/* This file is auto-generated by options-urls-cc-gen.awk.  */

#define INCLUDE_MEMORY
#include "config.h"
#include "system.h"
#include "coretypes.h"
#include "tm.h"
#include "opts.h"
#include "intl.h"
#include "insn-attr-common.h"

#include "cpplib.h"
#include "cpplib.h"
#include "diagnostic-color.h"
#include "diagnostic-url.h"
#include "diagnostic.h"
#include "pretty-print.h"

const char *
get_opt_url_suffix (int option_index, unsigned lang_mask)
{
  switch (option_index)
    {
     case OPT____:
       return "gcc/Overall-Options.html#index-_0023_0023_0023";
     case OPT__completion_:
       break;
     case OPT__embed_dir_:
       break;
     case OPT__help:
       break;
     case OPT__help_:
       break;
     case OPT__no_sysroot_suffix:
       break;
     case OPT__output_pch:
       break;
     case OPT__param_align_loop_iterations_:
       break;
     case OPT__param_align_threshold_:
       break;
     case OPT__param_analyzer_bb_explosion_factor_:
       break;
     case OPT__param_analyzer_max_constraints_:
       break;
     case OPT__param_analyzer_max_enodes_for_full_dump_:
       break;
     case OPT__param_analyzer_max_enodes_per_program_point_:
       break;
     case OPT__param_analyzer_max_infeasible_edges_:
       break;
     case OPT__param_analyzer_max_recursion_depth_:
       break;
     case OPT__param_analyzer_max_svalue_depth_:
       break;
     case OPT__param_analyzer_min_snodes_for_call_summary_:
       break;
     case OPT__param_analyzer_text_art_ideal_canvas_width_:
       break;
     case OPT__param_analyzer_text_art_string_ellipsis_head_len_:
       break;
     case OPT__param_analyzer_text_art_string_ellipsis_tail_len_:
       break;
     case OPT__param_analyzer_text_art_string_ellipsis_threshold_:
       break;
     case OPT__param_asan_globals_:
       break;
     case OPT__param_asan_instrument_allocas_:
       break;
     case OPT__param_asan_instrument_reads_:
       break;
     case OPT__param_asan_instrument_writes_:
       break;
     case OPT__param_asan_instrumentation_with_call_threshold_:
       break;
     case OPT__param_asan_kernel_mem_intrinsic_prefix_:
       break;
     case OPT__param_asan_memintrin_:
       break;
     case OPT__param_asan_stack_:
       break;
     case OPT__param_asan_use_after_return_:
       break;
     case OPT__param_avg_loop_niter_:
       break;
     case OPT__param_avoid_fma_max_bits_:
       break;
     case OPT__param_builtin_expect_probability_:
       break;
     case OPT__param_builtin_string_cmp_inline_length_:
       break;
     case OPT__param_case_values_threshold_:
       break;
     case OPT__param_comdat_sharing_probability_:
       break;
     case OPT__param_constructive_interference_size_:
       break;
     case OPT__param_cxx_max_namespaces_for_diagnostic_help_:
       break;
     case OPT__param_cycle_accurate_model_:
       break;
     case OPT__param_destructive_interference_size_:
       break;
     case OPT__param_dse_max_alias_queries_per_store_:
       break;
     case OPT__param_dse_max_object_size_:
       break;
     case OPT__param_early_inlining_insns_:
       break;
     case OPT__param_file_cache_files_:
       break;
     case OPT__param_file_cache_lines_:
       break;
     case OPT__param_fsm_scale_path_stmts_:
       break;
     case OPT__param_fully_pipelined_fma_:
       break;
     case OPT__param_gcse_after_reload_critical_fraction_:
       break;
     case OPT__param_gcse_after_reload_partial_fraction_:
       break;
     case OPT__param_gcse_cost_distance_ratio_:
       break;
     case OPT__param_gcse_unrestricted_cost_:
       break;
     case OPT__param_ggc_min_expand_:
       break;
     case OPT__param_ggc_min_heapsize_:
       break;
     case OPT__param_gimple_fe_computed_hot_bb_threshold_:
       break;
     case OPT__param_graphite_allow_codegen_errors_:
       break;
     case OPT__param_graphite_max_arrays_per_scop_:
       break;
     case OPT__param_graphite_max_nb_scop_params_:
       break;
     case OPT__param_hardcfr_max_blocks_:
       break;
     case OPT__param_hardcfr_max_inline_blocks_:
       break;
     case OPT__param_hash_table_verification_limit_:
       break;
     case OPT__param_hot_bb_count_fraction_:
       break;
     case OPT__param_hot_bb_count_ws_permille_:
       break;
     case OPT__param_hot_bb_frequency_fraction_:
       break;
     case OPT__param_hwasan_instrument_allocas_:
       break;
     case OPT__param_hwasan_instrument_mem_intrinsics_:
       break;
     case OPT__param_hwasan_instrument_reads_:
       break;
     case OPT__param_hwasan_instrument_stack_:
       break;
     case OPT__param_hwasan_instrument_writes_:
       break;
     case OPT__param_hwasan_random_frame_tag_:
       break;
     case OPT__param_inline_heuristics_hint_percent_:
       break;
     case OPT__param_inline_min_speedup_:
       break;
     case OPT__param_inline_unit_growth_:
       break;
     case OPT__param_integer_share_limit_:
       break;
     case OPT__param_ipa_cp_eval_threshold_:
       break;
     case OPT__param_ipa_cp_large_unit_insns_:
       break;
     case OPT__param_ipa_cp_loop_hint_bonus_:
       break;
     case OPT__param_ipa_cp_max_recursive_depth_:
       break;
     case OPT__param_ipa_cp_min_recursive_probability_:
       break;
     case OPT__param_ipa_cp_profile_count_base_:
       break;
     case OPT__param_ipa_cp_recursion_penalty_:
       break;
     case OPT__param_ipa_cp_recursive_freq_factor_:
       break;
     case OPT__param_ipa_cp_single_call_penalty_:
       break;
     case OPT__param_ipa_cp_unit_growth_:
       break;
     case OPT__param_ipa_cp_value_list_size_:
       break;
     case OPT__param_ipa_jump_function_lookups_:
       break;
     case OPT__param_ipa_max_aa_steps_:
       break;
     case OPT__param_ipa_max_agg_items_:
       break;
     case OPT__param_ipa_max_loop_predicates_:
       break;
     case OPT__param_ipa_max_param_expr_ops_:
       break;
     case OPT__param_ipa_max_switch_predicate_bounds_:
       break;
     case OPT__param_ipa_sra_deref_prob_threshold_:
       break;
     case OPT__param_ipa_sra_max_replacements_:
       break;
     case OPT__param_ipa_sra_ptr_growth_factor_:
       break;
     case OPT__param_ipa_sra_ptrwrap_growth_factor_:
       break;
     case OPT__param_ira_consider_dup_in_all_alts_:
       break;
     case OPT__param_ira_loop_reserved_regs_:
       break;
     case OPT__param_ira_max_conflict_table_size_:
       break;
     case OPT__param_ira_max_loops_num_:
       break;
     case OPT__param_ira_simple_lra_insn_threshold_:
       break;
     case OPT__param_iv_always_prune_cand_set_bound_:
       break;
     case OPT__param_iv_consider_all_candidates_bound_:
       break;
     case OPT__param_iv_max_considered_uses_:
       break;
     case OPT__param_jump_table_max_growth_ratio_for_size_:
       break;
     case OPT__param_jump_table_max_growth_ratio_for_speed_:
       break;
     case OPT__param_l1_cache_line_size_:
       break;
     case OPT__param_l1_cache_size_:
       break;
     case OPT__param_l2_cache_size_:
       break;
     case OPT__param_large_function_growth_:
       break;
     case OPT__param_large_function_insns_:
       break;
     case OPT__param_large_stack_frame_growth_:
       break;
     case OPT__param_large_stack_frame_:
       break;
     case OPT__param_large_unit_insns_:
       break;
     case OPT__param_lazy_modules_:
       break;
     case OPT__param_lim_expensive_:
       break;
     case OPT__param_logical_op_non_short_circuit_:
       break;
     case OPT__param_loop_block_tile_size_:
       break;
     case OPT__param_loop_interchange_max_num_stmts_:
       break;
     case OPT__param_loop_interchange_stride_ratio_:
       break;
     case OPT__param_loop_invariant_max_bbs_in_loop_:
       break;
     case OPT__param_loop_max_datarefs_for_datadeps_:
       break;
     case OPT__param_loop_versioning_max_inner_insns_:
       break;
     case OPT__param_loop_versioning_max_outer_insns_:
       break;
     case OPT__param_lra_inheritance_ebb_probability_cutoff_:
       break;
     case OPT__param_lra_max_considered_reload_pseudos_:
       break;
     case OPT__param_lto_max_partition_:
       break;
     case OPT__param_lto_max_streaming_parallelism_:
       break;
     case OPT__param_lto_min_partition_:
       break;
     case OPT__param_lto_partitions_:
       break;
     case OPT__param_max_average_unrolled_insns_:
       break;
     case OPT__param_max_combine_insns_:
       break;
     case OPT__param_max_completely_peel_loop_nest_depth_:
       break;
     case OPT__param_max_completely_peel_times_:
       break;
     case OPT__param_max_completely_peeled_insns_:
       break;
     case OPT__param_max_crossjump_edges_:
       break;
     case OPT__param_max_cse_insns_:
       break;
     case OPT__param_max_cse_path_length_:
       break;
     case OPT__param_max_cselib_memory_locations_:
       break;
     case OPT__param_max_debug_marker_count_:
       break;
     case OPT__param_max_delay_slot_insn_search_:
       break;
     case OPT__param_max_delay_slot_live_search_:
       break;
     case OPT__param_max_dse_active_local_stores_:
       break;
     case OPT__param_max_early_inliner_iterations_:
       break;
     case OPT__param_max_fields_for_field_sensitive_:
       break;
     case OPT__param_max_find_base_term_values_:
       break;
     case OPT__param_max_fsm_thread_path_insns_:
       break;
     case OPT__param_max_gcse_insertion_ratio_:
       break;
     case OPT__param_max_gcse_memory_:
       break;
     case OPT__param_max_goto_duplication_insns_:
       break;
     case OPT__param_max_grow_copy_bb_insns_:
       break;
     case OPT__param_max_hoist_depth_:
       break;
     case OPT__param_max_inline_functions_called_once_insns_:
       break;
     case OPT__param_max_inline_functions_called_once_loop_depth_:
       break;
     case OPT__param_max_inline_insns_auto_:
       break;
     case OPT__param_max_inline_insns_recursive_auto_:
       break;
     case OPT__param_max_inline_insns_recursive_:
       break;
     case OPT__param_max_inline_insns_single_:
       break;
     case OPT__param_max_inline_insns_size_:
       break;
     case OPT__param_max_inline_insns_small_:
       break;
     case OPT__param_max_inline_recursive_depth_auto_:
       break;
     case OPT__param_max_inline_recursive_depth_:
       break;
     case OPT__param_max_isl_operations_:
       break;
     case OPT__param_max_iterations_computation_cost_:
       break;
     case OPT__param_max_iterations_to_track_:
       break;
     case OPT__param_max_jump_thread_duplication_stmts_:
       break;
     case OPT__param_max_jump_thread_paths_:
       break;
     case OPT__param_max_last_value_rtl_:
       break;
     case OPT__param_max_loop_header_insns_:
       break;
     case OPT__param_max_modulo_backtrack_attempts_:
       break;
     case OPT__param_max_partial_antic_length_:
       break;
     case OPT__param_max_peel_branches_:
       break;
     case OPT__param_max_peel_times_:
       break;
     case OPT__param_max_peeled_insns_:
       break;
     case OPT__param_max_pending_list_length_:
       break;
     case OPT__param_max_pipeline_region_blocks_:
       break;
     case OPT__param_max_pipeline_region_insns_:
       break;
     case OPT__param_max_pow_sqrt_depth_:
       break;
     case OPT__param_max_predicted_iterations_:
       break;
     case OPT__param_max_reload_search_insns_:
       break;
     case OPT__param_max_rtl_if_conversion_insns_:
       break;
     case OPT__param_max_rtl_if_conversion_predictable_cost_:
       break;
     case OPT__param_max_rtl_if_conversion_unpredictable_cost_:
       break;
     case OPT__param_max_sched_extend_regions_iters_:
       break;
     case OPT__param_max_sched_insn_conflict_delay_:
       break;
     case OPT__param_max_sched_ready_insns_:
       break;
     case OPT__param_max_sched_region_blocks_:
       break;
     case OPT__param_max_sched_region_insns_:
       break;
     case OPT__param_max_slsr_cand_scan_:
       break;
     case OPT__param_max_speculative_devirt_maydefs_:
       break;
     case OPT__param_max_ssa_name_query_depth_:
       break;
     case OPT__param_max_store_chains_to_track_:
       break;
     case OPT__param_max_stores_to_merge_:
       break;
     case OPT__param_max_stores_to_sink_:
       break;
     case OPT__param_max_stores_to_track_:
       break;
     case OPT__param_max_tail_merge_comparisons_:
       break;
     case OPT__param_max_tail_merge_iterations_:
       break;
     case OPT__param_max_tracked_strlens_:
       break;
     case OPT__param_max_tree_if_conversion_phi_args_:
       break;
     case OPT__param_max_unroll_times_:
       break;
     case OPT__param_max_unrolled_insns_:
       break;
     case OPT__param_max_unswitch_depth_:
       break;
     case OPT__param_max_unswitch_insns_:
       break;
     case OPT__param_max_variable_expansions_in_unroller_:
       break;
     case OPT__param_max_vartrack_expr_depth_:
       break;
     case OPT__param_max_vartrack_reverse_op_size_:
       break;
     case OPT__param_max_vartrack_size_:
       break;
     case OPT__param_min_crossjump_insns_:
       break;
     case OPT__param_min_inline_recursive_probability_:
       break;
     case OPT__param_min_insn_to_prefetch_ratio_:
       break;
     case OPT__param_min_loop_cond_split_prob_:
       break;
     case OPT__param_min_nondebug_insn_uid_:
       break;
     case OPT__param_min_pagesize_:
       break;
     case OPT__param_min_size_for_stack_sharing_:
       break;
     case OPT__param_min_spec_prob_:
       break;
     case OPT__param_min_vect_loop_bound_:
       break;
     case OPT__param_modref_max_accesses_:
       break;
     case OPT__param_modref_max_adjustments_:
       break;
     case OPT__param_modref_max_bases_:
       break;
     case OPT__param_modref_max_depth_:
       break;
     case OPT__param_modref_max_escape_points_:
       break;
     case OPT__param_modref_max_refs_:
       break;
     case OPT__param_modref_max_tests_:
       break;
     case OPT__param_openacc_kernels_:
       break;
     case OPT__param_openacc_privatization_:
       break;
     case OPT__param_parloops_chunk_size_:
       break;
     case OPT__param_parloops_min_per_thread_:
       break;
     case OPT__param_parloops_schedule_:
       break;
     case OPT__param_partial_inlining_entry_probability_:
       break;
     case OPT__param_phiopt_factor_max_stmts_live_:
       break;
     case OPT__param_predictable_branch_outcome_:
       break;
     case OPT__param_prefetch_dynamic_strides_:
       break;
     case OPT__param_prefetch_latency_:
       break;
     case OPT__param_prefetch_min_insn_to_mem_ratio_:
       break;
     case OPT__param_prefetch_minimum_stride_:
       break;
     case OPT__param_profile_func_internal_id_:
       break;
     case OPT__param_ranger_debug_:
       break;
     case OPT__param_ranger_logical_depth_:
       break;
     case OPT__param_ranger_recompute_depth_:
       break;
     case OPT__param_relation_block_limit_:
       break;
     case OPT__param_rpo_vn_max_loop_depth_:
       break;
     case OPT__param_sccvn_max_alias_queries_per_access_:
       break;
     case OPT__param_scev_max_expr_complexity_:
       break;
     case OPT__param_scev_max_expr_size_:
       break;
     case OPT__param_sched_autopref_queue_depth_:
       break;
     case OPT__param_sched_mem_true_dep_cost_:
       break;
     case OPT__param_sched_pressure_algorithm_:
       break;
     case OPT__param_sched_spec_prob_cutoff_:
       break;
     case OPT__param_sched_state_edge_prob_cutoff_:
       break;
     case OPT__param_selsched_insns_to_rename_:
       break;
     case OPT__param_selsched_max_lookahead_:
       break;
     case OPT__param_selsched_max_sched_times_:
       break;
     case OPT__param_simultaneous_prefetches_:
       break;
     case OPT__param_sink_frequency_threshold_:
       break;
     case OPT__param_sms_dfa_history_:
       break;
     case OPT__param_sms_loop_average_count_threshold_:
       break;
     case OPT__param_sms_max_ii_factor_:
       break;
     case OPT__param_sms_min_sc_:
       break;
     case OPT__param_sra_max_propagations_:
       break;
     case OPT__param_sra_max_scalarization_size_Osize_:
       break;
     case OPT__param_sra_max_scalarization_size_Ospeed_:
       break;
     case OPT__param_ssa_name_def_chain_limit_:
       break;
     case OPT__param_ssp_buffer_size_:
       break;
     case OPT__param_stack_clash_protection_guard_size_:
       break;
     case OPT__param_stack_clash_protection_probe_interval_:
       break;
     case OPT__param_store_forwarding_max_distance_:
       break;
     case OPT__param_store_merging_allow_unaligned_:
       break;
     case OPT__param_store_merging_max_size_:
       break;
     case OPT__param_switch_conversion_max_branch_ratio_:
       break;
     case OPT__param_switch_lower_slow_alg_max_cases_:
       break;
     case OPT__param_threader_debug_:
       break;
     case OPT__param_tm_max_aggregate_size_:
       break;
     case OPT__param_tracer_dynamic_coverage_feedback_:
       break;
     case OPT__param_tracer_dynamic_coverage_:
       break;
     case OPT__param_tracer_max_code_growth_:
       break;
     case OPT__param_tracer_min_branch_probability_feedback_:
       break;
     case OPT__param_tracer_min_branch_probability_:
       break;
     case OPT__param_tracer_min_branch_ratio_:
       break;
     case OPT__param_transitive_relations_work_bound_:
       break;
     case OPT__param_tree_reassoc_width_:
       break;
     case OPT__param_tsan_distinguish_volatile_:
       break;
     case OPT__param_tsan_instrument_func_entry_exit_:
       break;
     case OPT__param_uninit_control_dep_attempts_:
       break;
     case OPT__param_uninit_max_chain_len_:
       break;
     case OPT__param_uninit_max_num_chains_:
       break;
     case OPT__param_uninlined_function_insns_:
       break;
     case OPT__param_uninlined_function_time_:
       break;
     case OPT__param_uninlined_thunk_insns_:
       break;
     case OPT__param_uninlined_thunk_time_:
       break;
     case OPT__param_unlikely_bb_count_fraction_:
       break;
     case OPT__param_unroll_jam_max_unroll_:
       break;
     case OPT__param_unroll_jam_min_percent_:
       break;
     case OPT__param_use_after_scope_direct_emission_threshold_:
       break;
     case OPT__param_use_canonical_types_:
       break;
     case OPT__param_vect_epilogues_nomask_:
       break;
     case OPT__param_vect_force_slp_:
       break;
     case OPT__param_vect_induction_float_:
       break;
     case OPT__param_vect_inner_loop_cost_factor_:
       break;
     case OPT__param_vect_max_layout_candidates_:
       break;
     case OPT__param_vect_max_peeling_for_alignment_:
       break;
     case OPT__param_vect_max_version_for_alias_checks_:
       break;
     case OPT__param_vect_max_version_for_alignment_checks_:
       break;
     case OPT__param_vect_partial_vector_usage_:
       break;
     case OPT__param_vrp_block_limit_:
       break;
     case OPT__param_vrp_sparse_threshold_:
       break;
     case OPT__param_vrp_switch_limit_:
       break;
     case OPT__param_vrp_vector_threshold_:
       break;
     case OPT__param_x86_stlf_window_ninsns_:
       break;
     case OPT__param_x86_stv_max_visits_:
       break;
     case OPT__sysroot_:
       break;
     case OPT__target_help:
       break;
     case OPT__version:
       break;
     case OPT_A:
       return "gcc/Preprocessor-Options.html#index-A";
     case OPT_B:
       if (lang_mask & CL_D)
         return "gdc/Directory-Options.html#index-B";
       return "gcc/Directory-Options.html#index-B";
     case OPT_C:
       if (lang_mask & CL_Fortran)
         return "gfortran/Preprocessing-Options.html#index-C";
       return "gcc/Preprocessor-Options.html#index-C";
     case OPT_CC:
       if (lang_mask & CL_Fortran)
         return "gfortran/Preprocessing-Options.html#index-CC";
       return "gcc/Preprocessor-Options.html#index-CC";
     case OPT_D:
       return "gcc/Preprocessor-Options.html#index-D-1";
     case OPT_E:
       break;
     case OPT_F:
       return "gcc/Darwin-Options.html#index-F";
     case OPT_H:
       if (lang_mask & CL_D)
         return "gdc/Code-Generation.html#index-H";
       if (lang_mask & CL_Fortran)
         return "gfortran/Preprocessing-Options.html#index-H";
       return "gcc/Preprocessor-Options.html#index-H";
     case OPT_Hd:
       if (lang_mask & CL_D)
         return "gdc/Code-Generation.html#index-Hd";
       break;
     case OPT_Hf:
       if (lang_mask & CL_D)
         return "gdc/Code-Generation.html#index-Hf";
       break;
     case OPT_I:
       if (lang_mask & CL_D)
         return "gdc/Directory-Options.html#index-I";
       return "gcc/Directory-Options.html#index-I";
     case OPT_J:
       if (lang_mask & CL_D)
         return "gdc/Directory-Options.html#index-J";
       break;
     case OPT_L:
       if (lang_mask & CL_D)
         return "gdc/Directory-Options.html#index-L";
       return "gcc/Directory-Options.html#index-L";
     case OPT_M:
       if (lang_mask & CL_D)
         return "gdc/Code-Generation.html#index-M";
       return "gcc/Preprocessor-Options.html#index-M";
     case OPT_MD:
       if (lang_mask & CL_D)
         return "gdc/Code-Generation.html#index-MD";
       return "gcc/Preprocessor-Options.html#index-MD";
     case OPT_MF:
       if (lang_mask & CL_D)
         return "gdc/Code-Generation.html#index-MF";
       return "gcc/Preprocessor-Options.html#index-MF";
     case OPT_MG:
       if (lang_mask & CL_D)
         return "gdc/Code-Generation.html#index-MG";
       return "gcc/Preprocessor-Options.html#index-MG";
     case OPT_MM:
       if (lang_mask & CL_D)
         return "gdc/Code-Generation.html#index-MM";
       return "gcc/Preprocessor-Options.html#index-MM";
     case OPT_MMD:
       if (lang_mask & CL_D)
         return "gdc/Code-Generation.html#index-MMD";
       return "gcc/Preprocessor-Options.html#index-MMD";
     case OPT_MP:
       if (lang_mask & CL_D)
         return "gdc/Code-Generation.html#index-MP";
       return "gcc/Preprocessor-Options.html#index-MP";
     case OPT_MQ:
       if (lang_mask & CL_D)
         return "gdc/Code-Generation.html#index-MQ";
       return "gcc/Preprocessor-Options.html#index-MQ";
     case OPT_MT:
       if (lang_mask & CL_D)
         return "gdc/Code-Generation.html#index-MT";
       return "gcc/Preprocessor-Options.html#index-MT";
     case OPT_Mmodules:
       break;
     case OPT_Mno_modules:
       return "gcc/Preprocessor-Options.html#index-Mno-modules";
     case OPT_N:
       break;
     case OPT_O:
       return "gcc/Optimize-Options.html#index-O";
     case OPT_Ofast:
       return "gcc/Optimize-Options.html#index-Ofast";
     case OPT_Og:
       return "gcc/Optimize-Options.html#index-Og";
     case OPT_Os:
       return "gcc/Optimize-Options.html#index-Os";
     case OPT_Oz:
       return "gcc/Optimize-Options.html#index-Oz";
     case OPT_P:
       if (lang_mask & CL_Fortran)
         return "gfortran/Preprocessing-Options.html#index-P";
       return "gcc/Preprocessor-Options.html#index-P";
     case OPT_Q:
       return "gcc/Developer-Options.html#index-Q";
     case OPT_Qn:
       return "gcc/System-V-Options.html#index-Qn";
     case OPT_Qy:
       return "gcc/System-V-Options.html#index-Qy";
     case OPT_R:
       break;
     case OPT_S:
       break;
     case OPT_T:
       return "gcc/Link-Options.html#index-T";
     case OPT_Tbss:
       break;
     case OPT_Tbss_:
       break;
     case OPT_Tdata:
       break;
     case OPT_Tdata_:
       break;
     case OPT_Ttext:
       break;
     case OPT_Ttext_:
       break;
     case OPT_U:
       return "gcc/Preprocessor-Options.html#index-U";
     case OPT_WNSObject_attribute:
       break;
     case OPT_Wa_:
       break;
     case OPT_Wabi:
       return "gcc/Warning-Options.html#index-Wabi";
     case OPT_Wabi_tag:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wabi-tag";
     case OPT_Wabi_:
       return "gcc/Warning-Options.html#index-Wabi";
     case OPT_Wabsolute_value:
       return "gcc/Warning-Options.html#index-Wabsolute-value";
     case OPT_Waddress:
       return "gcc/Warning-Options.html#index-Waddress";
     case OPT_Waddress_of_packed_member:
       return "gcc/Warning-Options.html#index-Waddress-of-packed-member";
     case OPT_Waggregate_return:
       return "gcc/Warning-Options.html#index-Waggregate-return";
     case OPT_Waggressive_loop_optimizations:
       return "gcc/Warning-Options.html#index-Waggressive-loop-optimizations";
     case OPT_Waliasing:
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Waliasing";
       break;
     case OPT_Walign_commons:
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Walign-commons";
       break;
     case OPT_Waligned_new_:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Waligned-new";
     case OPT_Wall:
       if (lang_mask & CL_D)
         return "gdc/Warnings.html#index-Wall";
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Wall";
       break;
     case OPT_Walloc_size:
       return "gcc/Warning-Options.html#index-Walloc-size";
     case OPT_Walloc_size_larger_than_:
       return "gcc/Warning-Options.html#index-Walloc-size-larger-than_003d";
     case OPT_Walloc_zero:
       return "gcc/Warning-Options.html#index-Walloc-zero";
     case OPT_Walloca:
       if (lang_mask & CL_D)
         return "gdc/Warnings.html#index-Walloca";
       return "gcc/Warning-Options.html#index-Walloca";
     case OPT_Walloca_larger_than_:
       if (lang_mask & CL_D)
         return "gdc/Warnings.html#index-Walloca-larger-than";
       return "gcc/Warning-Options.html#index-Walloca-larger-than_003d";
     case OPT_Wampersand:
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Wampersand";
       break;
     case OPT_Wanalyzer_allocation_size:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-allocation-size";
     case OPT_Wanalyzer_deref_before_check:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-deref-before-check";
     case OPT_Wanalyzer_double_fclose:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-double-fclose";
     case OPT_Wanalyzer_double_free:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-double-free";
     case OPT_Wanalyzer_exposure_through_output_file:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-exposure-through-output-file";
     case OPT_Wanalyzer_exposure_through_uninit_copy:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-exposure-through-uninit-copy";
     case OPT_Wanalyzer_fd_access_mode_mismatch:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-fd-access-mode-mismatch";
     case OPT_Wanalyzer_fd_double_close:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-fd-double-close";
     case OPT_Wanalyzer_fd_leak:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-fd-leak";
     case OPT_Wanalyzer_fd_phase_mismatch:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-fd-phase-mismatch";
     case OPT_Wanalyzer_fd_type_mismatch:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-fd-type-mismatch";
     case OPT_Wanalyzer_fd_use_after_close:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-fd-use-after-close";
     case OPT_Wanalyzer_fd_use_without_check:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-fd-use-without-check";
     case OPT_Wanalyzer_file_leak:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-file-leak";
     case OPT_Wanalyzer_free_of_non_heap:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-free-of-non-heap";
     case OPT_Wanalyzer_imprecise_fp_arithmetic:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-imprecise-fp-arithmetic";
     case OPT_Wanalyzer_infinite_loop:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-infinite-loop";
     case OPT_Wanalyzer_infinite_recursion:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-infinite-recursion";
     case OPT_Wanalyzer_jump_through_null:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-jump-through-null";
     case OPT_Wanalyzer_malloc_leak:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-malloc-leak";
     case OPT_Wanalyzer_mismatching_deallocation:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-mismatching-deallocation";
     case OPT_Wanalyzer_null_argument:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-null-argument";
     case OPT_Wanalyzer_null_dereference:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-null-dereference";
     case OPT_Wanalyzer_out_of_bounds:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-out-of-bounds";
     case OPT_Wanalyzer_overlapping_buffers:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-overlapping-buffers";
     case OPT_Wanalyzer_possible_null_argument:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-possible-null-argument";
     case OPT_Wanalyzer_possible_null_dereference:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-possible-null-dereference";
     case OPT_Wanalyzer_putenv_of_auto_var:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-putenv-of-auto-var";
     case OPT_Wanalyzer_shift_count_negative:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-shift-count-negative";
     case OPT_Wanalyzer_shift_count_overflow:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-shift-count-overflow";
     case OPT_Wanalyzer_stale_setjmp_buffer:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-stale-setjmp-buffer";
     case OPT_Wanalyzer_symbol_too_complex:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-symbol-too-complex";
     case OPT_Wanalyzer_tainted_allocation_size:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-tainted-allocation-size";
     case OPT_Wanalyzer_tainted_array_index:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-tainted-array-index";
     case OPT_Wanalyzer_tainted_assertion:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-tainted-assertion";
     case OPT_Wanalyzer_tainted_divisor:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-tainted-divisor";
     case OPT_Wanalyzer_tainted_offset:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-tainted-offset";
     case OPT_Wanalyzer_tainted_size:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-tainted-size";
     case OPT_Wanalyzer_too_complex:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-too-complex";
     case OPT_Wanalyzer_undefined_behavior_ptrdiff:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-undefined-behavior-ptrdiff";
     case OPT_Wanalyzer_undefined_behavior_strtok:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-undefined-behavior-strtok";
     case OPT_Wanalyzer_unsafe_call_within_signal_handler:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-unsafe-call-within-signal-handler";
     case OPT_Wanalyzer_use_after_free:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-use-after-free";
     case OPT_Wanalyzer_use_of_pointer_in_stale_stack_frame:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-use-of-pointer-in-stale-stack-frame";
     case OPT_Wanalyzer_use_of_uninitialized_value:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-use-of-uninitialized-value";
     case OPT_Wanalyzer_va_arg_type_mismatch:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-va-arg-type-mismatch";
     case OPT_Wanalyzer_va_list_exhausted:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-va-list-exhausted";
     case OPT_Wanalyzer_va_list_leak:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-va-list-leak";
     case OPT_Wanalyzer_va_list_use_after_va_end:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-va-list-use-after-va-end";
     case OPT_Wanalyzer_write_to_const:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-write-to-const";
     case OPT_Wanalyzer_write_to_string_literal:
       return "gcc/Static-Analyzer-Options.html#index-Wanalyzer-write-to-string-literal";
     case OPT_Wargument_mismatch:
       break;
     case OPT_Warith_conversion:
       return "gcc/Warning-Options.html#index-Warith-conversion";
     case OPT_Warray_bounds_:
       return "gcc/Warning-Options.html#index-Warray-bounds";
     case OPT_Warray_compare:
       return "gcc/Warning-Options.html#index-Warray-compare";
     case OPT_Warray_parameter_:
       return "gcc/Warning-Options.html#index-Warray-parameter";
     case OPT_Warray_temporaries:
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Warray-temporaries";
       break;
     case OPT_Wassign_intercept:
       return "gcc/Objective-C-and-Objective-C_002b_002b-Dialect-Options.html#index-Wassign-intercept";
     case OPT_Wattribute_alias_:
       return "gcc/Warning-Options.html#index-Wattribute-alias";
     case OPT_Wattribute_warning:
       return "gcc/Warning-Options.html#index-Wattribute-warning";
     case OPT_Wattributes:
       return "gcc/Warning-Options.html#index-Wattributes";
     case OPT_Wattributes_:
       return "gcc/Warning-Options.html#index-Wattributes";
     case OPT_Wbad_function_cast:
       return "gcc/Warning-Options.html#index-Wbad-function-cast";
     case OPT_Wbidi_chars_:
       return "gcc/Warning-Options.html#index-Wbidi-chars";
     case OPT_Wbool_compare:
       return "gcc/Warning-Options.html#index-Wbool-compare";
     case OPT_Wbool_operation:
       return "gcc/Warning-Options.html#index-Wbool-operation";
     case OPT_Wbuiltin_declaration_mismatch:
       if (lang_mask & CL_D)
         return "gdc/Warnings.html#index-Wbuiltin-declaration-mismatch";
       return "gcc/Warning-Options.html#index-Wbuiltin-declaration-mismatch";
     case OPT_Wbuiltin_macro_redefined:
       return "gcc/Warning-Options.html#index-Wbuiltin-macro-redefined";
     case OPT_Wc___compat:
       return "gcc/Warning-Options.html#index-Wc_002b_002b-compat";
     case OPT_Wc__11_compat:
       return "gcc/Warning-Options.html#index-Wc_002b_002b11-compat";
     case OPT_Wc__11_extensions:
       return "gcc/Warning-Options.html#index-Wc_002b_002b11-extensions";
     case OPT_Wc__14_compat:
       return "gcc/Warning-Options.html#index-Wc_002b_002b14-compat";
     case OPT_Wc__14_extensions:
       return "gcc/Warning-Options.html#index-Wc_002b_002b14-extensions";
     case OPT_Wc__17_compat:
       return "gcc/Warning-Options.html#index-Wc_002b_002b17-compat";
     case OPT_Wc__17_extensions:
       return "gcc/Warning-Options.html#index-Wc_002b_002b17-extensions";
     case OPT_Wc__20_compat:
       return "gcc/Warning-Options.html#index-Wc_002b_002b20-compat";
     case OPT_Wc__20_extensions:
       return "gcc/Warning-Options.html#index-Wc_002b_002b20-extensions";
     case OPT_Wc__23_extensions:
       return "gcc/Warning-Options.html#index-Wc_002b_002b23-extensions";
     case OPT_Wc__26_extensions:
       return "gcc/Warning-Options.html#index-Wc_002b_002b26-extensions";
     case OPT_Wc_binding_type:
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Wc-binding-type";
       break;
     case OPT_Wc11_c23_compat:
       return "gcc/Warning-Options.html#index-Wc11-c23-compat";
     case OPT_Wc23_c2y_compat:
       return "gcc/Warning-Options.html#index-Wc23-c2y-compat";
     case OPT_Wc90_c99_compat:
       return "gcc/Warning-Options.html#index-Wc90-c99-compat";
     case OPT_Wc99_c11_compat:
       return "gcc/Warning-Options.html#index-Wc99-c11-compat";
     case OPT_Wcalloc_transposed_args:
       return "gcc/Warning-Options.html#index-Wcalloc-transposed-args";
     case OPT_Wcannot_profile:
       break;
     case OPT_Wcase_enum:
       break;
     case OPT_Wcast_align:
       return "gcc/Warning-Options.html#index-Wcast-align";
     case OPT_Wcast_align_strict:
       return "gcc/Warning-Options.html#index-Wcast-align_003dstrict";
     case OPT_Wcast_function_type:
       return "gcc/Warning-Options.html#index-Wcast-function-type";
     case OPT_Wcast_qual:
       return "gcc/Warning-Options.html#index-Wcast-qual";
     case OPT_Wcast_result:
       if (lang_mask & CL_D)
         return "gdc/Warnings.html#index-Wcast-result";
       break;
     case OPT_Wcast_user_defined:
       return "gcc/Warning-Options.html#index-Wcast-user-defined";
     case OPT_Wcatch_value_:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wcatch-value";
     case OPT_Wchanges_meaning:
       return "gcc/Warning-Options.html#index-Wchanges-meaning";
     case OPT_Wchar_subscripts:
       return "gcc/Warning-Options.html#index-Wchar-subscripts";
     case OPT_Wcharacter_truncation:
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Wcharacter-truncation";
       break;
     case OPT_Wchkp:
       break;
     case OPT_Wclass_conversion:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wclass-conversion";
     case OPT_Wclass_memaccess:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wclass-memaccess";
     case OPT_Wclobbered:
       return "gcc/Warning-Options.html#index-Wclobbered";
     case OPT_Wcomma_subscript:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wcomma-subscript";
     case OPT_Wcomment:
       return "gcc/Warning-Options.html#index-Wcomment";
     case OPT_Wcompare_distinct_pointer_types:
       return "gcc/Warning-Options.html#index-Wcompare-distinct-pointer-types";
     case OPT_Wcompare_reals:
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Wcompare-reals";
       break;
     case OPT_Wcomplain_wrong_lang:
       return "gcc/Warning-Options.html#index-Wcomplain-wrong-lang";
     case OPT_Wconditionally_supported:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wconditionally-supported";
     case OPT_Wconversion:
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Wconversion";
       return "gcc/Warning-Options.html#index-Wconversion";
     case OPT_Wconversion_extra:
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Wconversion-extra";
       break;
     case OPT_Wconversion_null:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wconversion-null";
     case OPT_Wcoverage_invalid_line_number:
       return "gcc/Warning-Options.html#index-Wcoverage-invalid-line-number";
     case OPT_Wcoverage_mismatch:
       return "gcc/Warning-Options.html#index-Wcoverage-mismatch";
     case OPT_Wcoverage_too_many_conditions:
       return "gcc/Warning-Options.html#index-Wcoverage-too-many-conditions";
     case OPT_Wcpp:
       return "gcc/Warning-Options.html#index-Wcpp";
     case OPT_Wctad_maybe_unsupported:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wctad-maybe-unsupported";
     case OPT_Wctor_dtor_privacy:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wctor-dtor-privacy";
     case OPT_Wdangling_else:
       return "gcc/Warning-Options.html#index-Wdangling-else";
     case OPT_Wdangling_pointer_:
       return "gcc/Warning-Options.html#index-Wdangling-pointer";
     case OPT_Wdangling_reference:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wdangling-reference";
     case OPT_Wdate_time:
       return "gcc/Warning-Options.html#index-Wdate-time";
     case OPT_Wdeclaration_after_statement:
       return "gcc/Warning-Options.html#index-Wdeclaration-after-statement";
     case OPT_Wdeclaration_missing_parameter_type:
       return "gcc/Warning-Options.html#index-Wdeclaration-missing-parameter-type";
     case OPT_Wdefaulted_function_deleted:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wdefaulted-function-deleted";
     case OPT_Wdelete_incomplete:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wdelete-incomplete";
     case OPT_Wdelete_non_virtual_dtor:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wdelete-non-virtual-dtor";
     case OPT_Wdeprecated:
       if (lang_mask & CL_D)
         return "gdc/Warnings.html#index-Wdeprecated";
       return "gcc/Warning-Options.html#index-Wdeprecated";
     case OPT_Wdeprecated_copy:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wdeprecated-copy";
     case OPT_Wdeprecated_copy_dtor:
       break;
     case OPT_Wdeprecated_declarations:
       return "gcc/Warning-Options.html#index-Wdeprecated-declarations";
     case OPT_Wdeprecated_enum_enum_conversion:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wdeprecated-enum-enum-conversion";
     case OPT_Wdeprecated_enum_float_conversion:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wdeprecated-enum-float-conversion";
     case OPT_Wdeprecated_literal_operator:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wdeprecated-literal-operator";
     case OPT_Wdeprecated_non_prototype:
       return "gcc/Warning-Options.html#index-Wdeprecated-non-prototype";
     case OPT_Wdeprecated_variadic_comma_omission:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wdeprecated-variadic-comma-omission";
     case OPT_Wdesignated_init:
       return "gcc/Warning-Options.html#index-Wdesignated-init";
     case OPT_Wdisabled_optimization:
       return "gcc/Warning-Options.html#index-Wdisabled-optimization";
     case OPT_Wdiscarded_array_qualifiers:
       return "gcc/Warning-Options.html#index-Wdiscarded-array-qualifiers";
     case OPT_Wdiscarded_qualifiers:
       return "gcc/Warning-Options.html#index-Wdiscarded-qualifiers";
     case OPT_Wdiv_by_zero:
       return "gcc/Warning-Options.html#index-Wdiv-by-zero";
     case OPT_Wdo_subscript:
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Wdo-subscript";
       break;
     case OPT_Wdouble_promotion:
       return "gcc/Warning-Options.html#index-Wdouble-promotion";
     case OPT_Wduplicate_decl_specifier:
       return "gcc/Warning-Options.html#index-Wduplicate-decl-specifier";
     case OPT_Wduplicated_branches:
       return "gcc/Warning-Options.html#index-Wduplicated-branches";
     case OPT_Wduplicated_cond:
       return "gcc/Warning-Options.html#index-Wduplicated-cond";
     case OPT_Weffc__:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Weffc_002b_002b";
     case OPT_Welaborated_enum_base:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Welaborated-enum-base";
     case OPT_Wempty_body:
       return "gcc/Warning-Options.html#index-Wempty-body";
     case OPT_Wendif_labels:
       return "gcc/Warning-Options.html#index-Wendif-labels";
     case OPT_Wenum_compare:
       return "gcc/Warning-Options.html#index-Wenum-compare";
     case OPT_Wenum_conversion:
       return "gcc/Warning-Options.html#index-Wenum-conversion";
     case OPT_Wenum_int_mismatch:
       return "gcc/Warning-Options.html#index-Wenum-int-mismatch";
     case OPT_Werror:
       if (lang_mask & CL_D)
         return "gdc/Warnings.html#index-Werror";
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Werror";
       return "gcc/Warning-Options.html#index-Werror";
     case OPT_Werror_:
       if (lang_mask & CL_D)
         return "gdc/Warnings.html#index-Werror";
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Werror";
       return "gcc/Warning-Options.html#index-Werror";
     case OPT_Wexceptions:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wexceptions";
     case OPT_Wexpansion_to_defined:
       return "gcc/Warning-Options.html#index-Wexpansion-to-defined";
     case OPT_Wexternal_argument_mismatch:
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Wexternal-argument-mismatch";
       break;
     case OPT_Wextra:
       if (lang_mask & CL_D)
         return "gdc/Warnings.html#index-Wextra";
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Wextra";
       return "gcc/Warning-Options.html#index-Wextra";
     case OPT_Wextra_semi:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wextra-semi";
     case OPT_Wfatal_errors:
       return "gcc/Warning-Options.html#index-Wfatal-errors";
     case OPT_Wflex_array_member_not_at_end:
       return "gcc/Warning-Options.html#index-Wflex-array-member-not-at-end";
     case OPT_Wfloat_conversion:
       return "gcc/Warning-Options.html#index-Wfloat-conversion";
     case OPT_Wfloat_equal:
       return "gcc/Warning-Options.html#index-Wfloat-equal";
     case OPT_Wformat_contains_nul:
       return "gcc/Warning-Options.html#index-Wformat-contains-nul";
     case OPT_Wformat_diag:
       break;
     case OPT_Wformat_extra_args:
       return "gcc/Warning-Options.html#index-Wformat-extra-args";
     case OPT_Wformat_nonliteral:
       return "gcc/Warning-Options.html#index-Wformat-nonliteral";
     case OPT_Wformat_overflow_:
       return "gcc/Warning-Options.html#index-Wformat-overflow";
     case OPT_Wformat_security:
       return "gcc/Warning-Options.html#index-Wformat-security";
     case OPT_Wformat_signedness:
       return "gcc/Warning-Options.html#index-Wformat-signedness";
     case OPT_Wformat_truncation_:
       return "gcc/Warning-Options.html#index-Wformat-truncation";
     case OPT_Wformat_y2k:
       return "gcc/Warning-Options.html#index-Wformat-y2k";
     case OPT_Wformat_zero_length:
       return "gcc/Warning-Options.html#index-Wformat-zero-length";
     case OPT_Wformat_:
       return "gcc/Warning-Options.html#index-Wformat";
     case OPT_Wframe_address:
       return "gcc/Warning-Options.html#index-Wframe-address";
     case OPT_Wframe_larger_than_:
       return "gcc/Warning-Options.html#index-Wframe-larger-than_003d";
     case OPT_Wfree_labels:
       return "gcc/Warning-Options.html#index-Wfree-labels";
     case OPT_Wfree_nonheap_object:
       return "gcc/Warning-Options.html#index-Wfree-nonheap-object";
     case OPT_Wfrontend_loop_interchange:
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Wfrontend-loop-interchange";
       break;
     case OPT_Wfunction_elimination:
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Wfunction-elimination";
       break;
     case OPT_Wglobal_module:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wglobal-module";
     case OPT_Whardened:
       return "gcc/Warning-Options.html#index-Whardened";
     case OPT_Wheader_guard:
       return "gcc/Warning-Options.html#index-Wheader-guard";
     case OPT_Wif_not_aligned:
       return "gcc/Warning-Options.html#index-Wif-not-aligned";
     case OPT_Wignored_attributes:
       return "gcc/Warning-Options.html#index-Wignored-attributes";
     case OPT_Wignored_qualifiers:
       return "gcc/Warning-Options.html#index-Wignored-qualifiers";
     case OPT_Wimplicit:
       return "gcc/Warning-Options.html#index-Wimplicit";
     case OPT_Wimplicit_fallthrough_:
       return "gcc/Warning-Options.html#index-Wimplicit-fallthrough";
     case OPT_Wimplicit_function_declaration:
       return "gcc/Warning-Options.html#index-Wimplicit-function-declaration";
     case OPT_Wimplicit_int:
       return "gcc/Warning-Options.html#index-Wimplicit-int";
     case OPT_Wimplicit_interface:
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Wimplicit-interface";
       break;
     case OPT_Wimplicit_procedure:
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Wimplicit-procedure";
       break;
     case OPT_Winaccessible_base:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Winaccessible-base";
     case OPT_Wincompatible_pointer_types:
       return "gcc/Warning-Options.html#index-Wincompatible-pointer-types";
     case OPT_Winfinite_recursion:
       return "gcc/Warning-Options.html#index-Winfinite-recursion";
     case OPT_Winherited_variadic_ctor:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Winherited-variadic-ctor";
     case OPT_Winit_list_lifetime:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Winit-list-lifetime";
     case OPT_Winit_self:
       return "gcc/Warning-Options.html#index-Winit-self";
     case OPT_Winline:
       break;
     case OPT_Wint_conversion:
       return "gcc/Warning-Options.html#index-Wint-conversion";
     case OPT_Wint_in_bool_context:
       return "gcc/Warning-Options.html#index-Wint-in-bool-context";
     case OPT_Wint_to_pointer_cast:
       return "gcc/Warning-Options.html#index-Wint-to-pointer-cast";
     case OPT_Winteger_division:
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Winteger-division";
       break;
     case OPT_Winterference_size:
       return "gcc/Warning-Options.html#index-Winterference-size";
     case OPT_Wintrinsic_shadow:
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Wintrinsic-shadow";
       break;
     case OPT_Wintrinsics_std:
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Wintrinsics-std";
       break;
     case OPT_Winvalid_constexpr:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Winvalid-constexpr";
     case OPT_Winvalid_imported_macros:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Winvalid-imported-macros";
     case OPT_Winvalid_memory_model:
       return "gcc/Warning-Options.html#index-Winvalid-memory-model";
     case OPT_Winvalid_offsetof:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Winvalid-offsetof";
     case OPT_Winvalid_pch:
       return "gcc/Warning-Options.html#index-Winvalid-pch";
     case OPT_Winvalid_utf8:
       return "gcc/Warning-Options.html#index-Winvalid-utf8";
     case OPT_Wjump_misses_init:
       return "gcc/Warning-Options.html#index-Wjump-misses-init";
     case OPT_Wl_:
       break;
     case OPT_Wlarger_than_:
       return "gcc/Warning-Options.html#index-Wlarger-than_003d";
     case OPT_Wleading_whitespace_:
       return "gcc/Warning-Options.html#index-Wleading-whitespace_003d";
     case OPT_Wline_truncation:
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Wline-truncation";
       break;
     case OPT_Wliteral_suffix:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wliteral-suffix";
     case OPT_Wlogical_not_parentheses:
       return "gcc/Warning-Options.html#index-Wlogical-not-parentheses";
     case OPT_Wlogical_op:
       return "gcc/Warning-Options.html#index-Wlogical-op";
     case OPT_Wlong_long:
       return "gcc/Warning-Options.html#index-Wlong-long";
     case OPT_Wlto_type_mismatch:
       return "gcc/Warning-Options.html#index-Wlto-type-mismatch";
     case OPT_Wmain:
       return "gcc/Warning-Options.html#index-Wmain";
     case OPT_Wmaybe_uninitialized:
       return "gcc/Warning-Options.html#index-Wmaybe-uninitialized";
     case OPT_Wmemset_elt_size:
       return "gcc/Warning-Options.html#index-Wmemset-elt-size";
     case OPT_Wmemset_transposed_args:
       return "gcc/Warning-Options.html#index-Wmemset-transposed-args";
     case OPT_Wmisleading_indentation:
       return "gcc/Warning-Options.html#index-Wmisleading-indentation";
     case OPT_Wmismatched_dealloc:
       return "gcc/Warning-Options.html#index-Wmismatched-dealloc";
     case OPT_Wmismatched_new_delete:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wmismatched-new-delete";
     case OPT_Wmismatched_special_enum:
       if (lang_mask & CL_D)
         return "gdc/Warnings.html#index-Wmismatched-special-enum";
       break;
     case OPT_Wmismatched_tags:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wmismatched-tags";
     case OPT_Wmissing_attributes:
       return "gcc/Warning-Options.html#index-Wmissing-attributes";
     case OPT_Wmissing_braces:
       return "gcc/Warning-Options.html#index-Wmissing-braces";
     case OPT_Wmissing_declarations:
       return "gcc/Warning-Options.html#index-Wmissing-declarations";
     case OPT_Wmissing_field_initializers:
       return "gcc/Warning-Options.html#index-Wmissing-field-initializers";
     case OPT_Wmissing_include_dirs:
       return "gcc/Warning-Options.html#index-Wmissing-include-dirs";
     case OPT_Wmissing_parameter_name:
       return "gcc/Warning-Options.html#index-Wmissing-parameter-name";
     case OPT_Wmissing_parameter_type:
       return "gcc/Warning-Options.html#index-Wmissing-parameter-type";
     case OPT_Wmissing_profile:
       return "gcc/Warning-Options.html#index-Wmissing-profile";
     case OPT_Wmissing_prototypes:
       return "gcc/Warning-Options.html#index-Wmissing-prototypes";
     case OPT_Wmissing_requires:
       return "gcc/Warning-Options.html#index-Wmissing-requires";
     case OPT_Wmissing_template_keyword:
       return "gcc/Warning-Options.html#index-Wmissing-template-keyword";
     case OPT_Wmissing_variable_declarations:
       return "gcc/Warning-Options.html#index-Wmissing-variable-declarations";
     case OPT_Wmudflap:
       break;
     case OPT_Wmultichar:
       return "gcc/Warning-Options.html#index-Wmultichar";
     case OPT_Wmultiple_inheritance:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wmultiple-inheritance";
     case OPT_Wmultistatement_macros:
       return "gcc/Warning-Options.html#index-Wmultistatement-macros";
     case OPT_Wnamespaces:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wnamespaces";
     case OPT_Wnarrowing:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wnarrowing";
     case OPT_Wnested_externs:
       return "gcc/Warning-Options.html#index-Wnested-externs";
     case OPT_Wnoexcept:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wno-noexcept";
     case OPT_Wnoexcept_type:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wno-noexcept-type";
     case OPT_Wnon_template_friend:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wno-non-template-friend";
     case OPT_Wnon_virtual_dtor:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wno-non-virtual-dtor";
     case OPT_Wnonnull:
       return "gcc/Warning-Options.html#index-Wno-nonnull";
     case OPT_Wnonnull_compare:
       return "gcc/Warning-Options.html#index-Wno-nonnull-compare";
     case OPT_Wnormalized_:
       return "gcc/Warning-Options.html#index-Wno-normalized";
     case OPT_Wnrvo:
       return "gcc/Warning-Options.html#index-Wno-nrvo";
     case OPT_Wnull_dereference:
       return "gcc/Warning-Options.html#index-Wno-null-dereference";
     case OPT_Wobjc_root_class:
       return "gcc/Objective-C-and-Objective-C_002b_002b-Dialect-Options.html#index-Wobjc-root-class";
     case OPT_Wodr:
       return "gcc/Warning-Options.html#index-Wno-odr";
     case OPT_Wold_style_cast:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wno-old-style-cast";
     case OPT_Wold_style_declaration:
       return "gcc/Warning-Options.html#index-Wno-old-style-declaration";
     case OPT_Wold_style_definition:
       return "gcc/Warning-Options.html#index-Wno-old-style-definition";
     case OPT_Wopenacc_parallelism:
       return "gcc/Warning-Options.html#index-Wno-openacc-parallelism";
     case OPT_Wopenmp:
       return "gcc/Warning-Options.html#index-Wno-openmp";
     case OPT_Wopenmp_simd:
       return "gcc/Warning-Options.html#index-Wno-openmp-simd";
     case OPT_Woverflow:
       return "gcc/Warning-Options.html#index-Wno-overflow";
     case OPT_Woverlength_strings:
       return "gcc/Warning-Options.html#index-Wno-overlength-strings";
     case OPT_Woverloaded_virtual_:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wno-overloaded-virtual";
     case OPT_Woverride_init:
       return "gcc/Warning-Options.html#index-Wno-override-init";
     case OPT_Woverride_init_side_effects:
       return "gcc/Warning-Options.html#index-Wno-override-init-side-effects";
     case OPT_Woverwrite_recursive:
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Woverwrite-recursive";
       break;
     case OPT_Wp_:
       break;
     case OPT_Wpacked:
       return "gcc/Warning-Options.html#index-Wno-packed";
     case OPT_Wpacked_bitfield_compat:
       return "gcc/Warning-Options.html#index-Wno-packed-bitfield-compat";
     case OPT_Wpacked_not_aligned:
       return "gcc/Warning-Options.html#index-Wno-packed-not-aligned";
     case OPT_Wpadded:
       return "gcc/Warning-Options.html#index-Wno-padded";
     case OPT_Wparentheses:
       return "gcc/Warning-Options.html#index-Wno-parentheses";
     case OPT_Wpedantic:
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Wpedantic";
       return "gcc/Warning-Options.html#index-Wno-pedantic";
     case OPT_Wpedantic_cast:
       break;
     case OPT_Wpedantic_param_names:
       break;
     case OPT_Wpessimizing_move:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wno-pessimizing-move";
     case OPT_Wplacement_new_:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wno-placement-new";
     case OPT_Wpmf_conversions:
       break;
     case OPT_Wpointer_arith:
       break;
     case OPT_Wpointer_compare:
       return "gcc/Warning-Options.html#index-Wno-pointer-compare";
     case OPT_Wpointer_sign:
       return "gcc/Warning-Options.html#index-Wno-pointer-sign";
     case OPT_Wpointer_to_int_cast:
       return "gcc/Warning-Options.html#index-Wno-pointer-to-int-cast";
     case OPT_Wpragma_once_outside_header:
       return "gcc/Warning-Options.html#index-Wno-pragma-once-outside-header";
     case OPT_Wpragmas:
       return "gcc/Warning-Options.html#index-Wno-pragmas";
     case OPT_Wprio_ctor_dtor:
       return "gcc/Warning-Options.html#index-Wno-prio-ctor-dtor";
     case OPT_Wproperty_assign_default:
       return "gcc/Objective-C-and-Objective-C_002b_002b-Dialect-Options.html#index-Wno-property-assign-default";
     case OPT_Wprotocol:
       return "gcc/Objective-C-and-Objective-C_002b_002b-Dialect-Options.html#index-Wno-protocol";
     case OPT_Wpsabi:
       break;
     case OPT_Wrange_loop_construct:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wno-range-loop-construct";
     case OPT_Wreal_q_constant:
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Wreal-q-constant";
       break;
     case OPT_Wrealloc_lhs:
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Wrealloc-lhs";
       break;
     case OPT_Wrealloc_lhs_all:
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Wrealloc-lhs-all";
       break;
     case OPT_Wredundant_decls:
       return "gcc/Warning-Options.html#index-Wno-redundant-decls";
     case OPT_Wredundant_move:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wno-redundant-move";
     case OPT_Wredundant_tags:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wno-redundant-tags";
     case OPT_Wregister:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wno-register";
     case OPT_Wreorder:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wno-reorder";
     case OPT_Wrestrict:
       return "gcc/Warning-Options.html#index-Wno-restrict";
     case OPT_Wreturn_local_addr:
       return "gcc/Warning-Options.html#index-Wno-return-local-addr";
     case OPT_Wreturn_mismatch:
       return "gcc/Warning-Options.html#index-Wno-return-mismatch";
     case OPT_Wreturn_type:
       return "gcc/Warning-Options.html#index-Wno-return-type";
     case OPT_Wscalar_storage_order:
       return "gcc/Warning-Options.html#index-Wno-scalar-storage-order";
     case OPT_Wselector:
       return "gcc/Objective-C-and-Objective-C_002b_002b-Dialect-Options.html#index-Wno-selector";
     case OPT_Wself_move:
       return "gcc/Warning-Options.html#index-Wno-self-move";
     case OPT_Wsequence_point:
       return "gcc/Warning-Options.html#index-Wno-sequence-point";
     case OPT_Wshadow:
       return "gcc/Warning-Options.html#index-Wno-shadow";
     case OPT_Wshadow_ivar:
       return "gcc/Warning-Options.html#index-Wno-shadow-ivar";
     case OPT_Wshadow_compatible_local:
       return "gcc/Warning-Options.html#index-Wshadow_003dcompatible-local";
     case OPT_Wshadow_local:
       return "gcc/Warning-Options.html#index-Wshadow_003dlocal";
     case OPT_Wshift_count_negative:
       return "gcc/Warning-Options.html#index-Wno-shift-count-negative";
     case OPT_Wshift_count_overflow:
       return "gcc/Warning-Options.html#index-Wno-shift-count-overflow";
     case OPT_Wshift_negative_value:
       return "gcc/Warning-Options.html#index-Wno-shift-negative-value";
     case OPT_Wshift_overflow_:
       return "gcc/Warning-Options.html#index-Wno-shift-overflow";
     case OPT_Wsign_compare:
       return "gcc/Warning-Options.html#index-Wno-sign-compare";
     case OPT_Wsign_conversion:
       return "gcc/Warning-Options.html#index-Wno-sign-conversion";
     case OPT_Wsign_promo:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wno-sign-promo";
     case OPT_Wsized_deallocation:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wno-sized-deallocation";
     case OPT_Wsizeof_array_argument:
       return "gcc/Warning-Options.html#index-Wno-sizeof-array-argument";
     case OPT_Wsizeof_array_div:
       return "gcc/Warning-Options.html#index-Wno-sizeof-array-div";
     case OPT_Wsizeof_pointer_div:
       return "gcc/Warning-Options.html#index-Wno-sizeof-pointer-div";
     case OPT_Wsizeof_pointer_memaccess:
       return "gcc/Warning-Options.html#index-Wno-sizeof-pointer-memaccess";
     case OPT_Wspeculative:
       if (lang_mask & CL_D)
         return "gdc/Warnings.html#index-Wno-speculative";
       break;
     case OPT_Wstack_protector:
       return "gcc/Warning-Options.html#index-Wno-stack-protector";
     case OPT_Wstack_usage_:
       return "gcc/Warning-Options.html#index-Wno-stack-usage";
     case OPT_Wstrict_aliasing:
       return "gcc/Warning-Options.html#index-Wno-strict-aliasing";
     case OPT_Wstrict_aliasing_:
       return "gcc/Warning-Options.html#index-Wno-strict-aliasing";
     case OPT_Wstrict_flex_arrays:
       return "gcc/Warning-Options.html#index-Wno-strict-flex-arrays";
     case OPT_Wstrict_null_sentinel:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wno-strict-null-sentinel";
     case OPT_Wstrict_overflow:
       return "gcc/Warning-Options.html#index-Wno-strict-overflow";
     case OPT_Wstrict_overflow_:
       return "gcc/Warning-Options.html#index-Wno-strict-overflow";
     case OPT_Wstrict_prototypes:
       return "gcc/Warning-Options.html#index-Wno-strict-prototypes";
     case OPT_Wstrict_selector_match:
       return "gcc/Objective-C-and-Objective-C_002b_002b-Dialect-Options.html#index-Wno-strict-selector-match";
     case OPT_Wstring_compare:
       return "gcc/Warning-Options.html#index-Wno-string-compare";
     case OPT_Wstringop_overflow_:
       return "gcc/Warning-Options.html#index-Wno-stringop-overflow";
     case OPT_Wstringop_overread:
       return "gcc/Warning-Options.html#index-Wno-stringop-overread";
     case OPT_Wstringop_truncation:
       return "gcc/Warning-Options.html#index-Wno-stringop-truncation";
     case OPT_Wstyle:
       break;
     case OPT_Wsubobject_linkage:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wno-subobject-linkage";
     case OPT_Wsuggest_attribute_cold:
       return "gcc/Warning-Options.html#index-Wno-suggest-attribute_003dcold";
     case OPT_Wsuggest_attribute_const:
       return "gcc/Warning-Options.html#index-Wno-suggest-attribute_003dconst";
     case OPT_Wsuggest_attribute_format:
       return "gcc/Warning-Options.html#index-Wno-suggest-attribute_003dformat";
     case OPT_Wsuggest_attribute_malloc:
       return "gcc/Warning-Options.html#index-Wno-suggest-attribute_003dmalloc";
     case OPT_Wsuggest_attribute_noreturn:
       return "gcc/Warning-Options.html#index-Wno-suggest-attribute_003dnoreturn";
     case OPT_Wsuggest_attribute_pure:
       return "gcc/Warning-Options.html#index-Wno-suggest-attribute_003dpure";
     case OPT_Wsuggest_attribute_returns_nonnull:
       return "gcc/Warning-Options.html#index-Wno-suggest-attribute_003dreturns_005fnonnull";
     case OPT_Wsuggest_final_methods:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wno-suggest-final-methods";
     case OPT_Wsuggest_final_types:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wno-suggest-final-types";
     case OPT_Wsuggest_override:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wno-suggest-override";
     case OPT_Wsurprising:
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Wsurprising";
       break;
     case OPT_Wswitch:
       return "gcc/Warning-Options.html#index-Wno-switch";
     case OPT_Wswitch_bool:
       return "gcc/Warning-Options.html#index-Wno-switch-bool";
     case OPT_Wswitch_default:
       return "gcc/Warning-Options.html#index-Wno-switch-default";
     case OPT_Wswitch_enum:
       return "gcc/Warning-Options.html#index-Wno-switch-enum";
     case OPT_Wswitch_outside_range:
       return "gcc/Warning-Options.html#index-Wno-switch-outside-range";
     case OPT_Wswitch_unreachable:
       return "gcc/Warning-Options.html#index-Wno-switch-unreachable";
     case OPT_Wsync_nand:
       return "gcc/Warning-Options.html#index-Wno-sync-nand";
     case OPT_Wsynth:
       break;
     case OPT_Wsystem_headers:
       return "gcc/Warning-Options.html#index-Wno-system-headers";
     case OPT_Wtabs:
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Wtabs";
       break;
     case OPT_Wtarget_lifetime:
       break;
     case OPT_Wtautological_compare:
       return "gcc/Warning-Options.html#index-Wno-tautological-compare";
     case OPT_Wtemplate_body:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wno-template-body";
     case OPT_Wtemplate_id_cdtor:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wno-template-id-cdtor";
     case OPT_Wtemplate_names_tu_local:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wno-template-names-tu-local";
     case OPT_Wtemplates:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wno-templates";
     case OPT_Wterminate:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wno-terminate";
     case OPT_Wtraditional:
       return "gcc/Warning-Options.html#index-Wno-traditional";
     case OPT_Wtraditional_conversion:
       return "gcc/Warning-Options.html#index-Wno-traditional-conversion";
     case OPT_Wtrailing_whitespace_:
       return "gcc/Warning-Options.html#index-Wno-trailing-whitespace";
     case OPT_Wtrampolines:
       return "gcc/Warning-Options.html#index-Wno-trampolines";
     case OPT_Wtrigraphs:
       return "gcc/Warning-Options.html#index-Wtrigraphs";
     case OPT_Wtrivial_auto_var_init:
       return "gcc/Warning-Options.html#index-Wno-trivial-auto-var-init";
     case OPT_Wtsan:
       return "gcc/Warning-Options.html#index-Wno-tsan";
     case OPT_Wtype_limits:
       return "gcc/Warning-Options.html#index-Wno-type-limits";
     case OPT_Wundeclared_selector:
       return "gcc/Objective-C-and-Objective-C_002b_002b-Dialect-Options.html#index-Wno-undeclared-selector";
     case OPT_Wundef:
       return "gcc/Warning-Options.html#index-Wno-undef";
     case OPT_Wundefined_do_loop:
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Wundefined-do-loop";
       break;
     case OPT_Wunderflow:
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Wunderflow";
       break;
     case OPT_Wunicode:
       return "gcc/Warning-Options.html#index-Wno-unicode";
     case OPT_Wuninit_variable_checking:
       break;
     case OPT_Wuninit_variable_checking_:
       break;
     case OPT_Wuninitialized:
       return "gcc/Warning-Options.html#index-Wno-uninitialized";
     case OPT_Wunknown_pragmas:
       if (lang_mask & CL_D)
         return "gdc/Warnings.html#index-Wno-unknown-pragmas";
       return "gcc/Warning-Options.html#index-Wno-unknown-pragmas";
     case OPT_Wunsuffixed_float_constants:
       return "gcc/Warning-Options.html#index-Wno-unsuffixed-float-constants";
     case OPT_Wunterminated_string_initialization:
       return "gcc/Warning-Options.html#index-Wno-unterminated-string-initialization";
     case OPT_Wunused:
       return "gcc/Warning-Options.html#index-Wno-unused";
     case OPT_Wunused_but_set_parameter:
       return "gcc/Warning-Options.html#index-Wno-unused-but-set-parameter";
     case OPT_Wunused_but_set_variable:
       return "gcc/Warning-Options.html#index-Wno-unused-but-set-variable";
     case OPT_Wunused_const_variable_:
       return "gcc/Warning-Options.html#index-Wno-unused-const-variable";
     case OPT_Wunused_dummy_argument:
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Wunused-dummy-argument";
       break;
     case OPT_Wunused_function:
       return "gcc/Warning-Options.html#index-Wno-unused-function";
     case OPT_Wunused_label:
       return "gcc/Warning-Options.html#index-Wno-unused-label";
     case OPT_Wunused_local_typedefs:
       return "gcc/Warning-Options.html#index-Wno-unused-local-typedefs";
     case OPT_Wunused_macros:
       return "gcc/Warning-Options.html#index-Wunused-macros";
     case OPT_Wunused_parameter:
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Wunused-parameter";
       return "gcc/Warning-Options.html#index-Wno-unused-parameter";
     case OPT_Wunused_result:
       return "gcc/Warning-Options.html#index-Wno-unused-result";
     case OPT_Wunused_value:
       return "gcc/Warning-Options.html#index-Wno-unused-value";
     case OPT_Wunused_variable:
       return "gcc/Warning-Options.html#index-Wno-unused-variable";
     case OPT_Wuse_after_free:
       return "gcc/Warning-Options.html#index-Wno-use-after-free";
     case OPT_Wuse_after_free_:
       return "gcc/Warning-Options.html#index-Wno-use-after-free";
     case OPT_Wuse_without_only:
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Wuse-without-only";
       break;
     case OPT_Wuseless_cast:
       return "gcc/Warning-Options.html#index-Wno-useless-cast";
     case OPT_Wvarargs:
       if (lang_mask & CL_D)
         return "gdc/Warnings.html#index-Wno-varargs";
       return "gcc/Warning-Options.html#index-Wno-varargs";
     case OPT_Wvariadic_macros:
       return "gcc/Warning-Options.html#index-Wno-variadic-macros";
     case OPT_Wvector_operation_performance:
       return "gcc/Warning-Options.html#index-Wno-vector-operation-performance";
     case OPT_Wverbose_unbounded:
       break;
     case OPT_Wvexing_parse:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wno-vexing-parse";
     case OPT_Wvirtual_inheritance:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wno-virtual-inheritance";
     case OPT_Wvirtual_move_assign:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wno-virtual-move-assign";
     case OPT_Wvla:
       return "gcc/Warning-Options.html#index-Wno-vla";
     case OPT_Wvla_larger_than_:
       return "gcc/Warning-Options.html#index-Wno-vla-larger-than";
     case OPT_Wvla_parameter:
       return "gcc/Warning-Options.html#index-Wno-vla-parameter";
     case OPT_Wvolatile:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wno-volatile";
     case OPT_Wvolatile_register_var:
       return "gcc/Warning-Options.html#index-Wno-volatile-register-var";
     case OPT_Wwrite_strings:
       return "gcc/Warning-Options.html#index-Wno-write-strings";
     case OPT_Wxor_used_as_pow:
       return "gcc/Warning-Options.html#index-Wno-xor-used-as-pow";
     case OPT_Wzero_as_null_pointer_constant:
       return "gcc/C_002b_002b-Dialect-Options.html#index-Wno-zero-as-null-pointer-constant";
     case OPT_Wzero_length_bounds:
       return "gcc/Warning-Options.html#index-Wzero-length-bounds";
     case OPT_Wzerotrip:
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-Wzerotrip";
       break;
     case OPT_X:
       if (lang_mask & CL_D)
         return "gdc/Code-Generation.html#index-X";
       break;
     case OPT_Xassembler:
       return "gcc/Assembler-Options.html#index-Xassembler";
     case OPT_Xf:
       if (lang_mask & CL_D)
         return "gdc/Code-Generation.html#index-Xf";
       break;
     case OPT_Xlinker:
       return "gcc/Link-Options.html#index-Xlinker";
     case OPT_Xpreprocessor:
       return "gcc/Preprocessor-Options.html#index-Xpreprocessor";
     case OPT_Z:
       break;
     case OPT_ansi:
       break;
     case OPT_aux_info:
       return "gcc/C-Dialect-Options.html#index-aux-info";
     case OPT_c:
       break;
     case OPT_callgraph:
       break;
     case OPT_coverage:
       return "gcc/Instrumentation-Options.html#index-coverage";
     case OPT_cpp:
       if (lang_mask & CL_Fortran)
         return "gfortran/Preprocessing-Options.html#index-cpp";
       break;
     case OPT_cpp_:
       if (lang_mask & CL_Fortran)
         return "gfortran/Preprocessing-Options.html#index-cpp";
       break;
     case OPT_d:
       break;
     case OPT_debuglib_:
       if (lang_mask & CL_D)
         return "gdc/Linking.html#index-debuglib_003d";
       break;
     case OPT_defaultlib_:
       if (lang_mask & CL_D)
         return "gdc/Linking.html#index-defaultlib_003d";
       break;
     case OPT_defined_only:
       break;
     case OPT_demangle:
       break;
     case OPT_dstartfiles:
       break;
     case OPT_dump_body_:
       break;
     case OPT_dump_level_:
       break;
     case OPT_dumpbase:
       return "gcc/Overall-Options.html#index-dumpbase";
     case OPT_dumpbase_ext:
       return "gcc/Overall-Options.html#index-dumpbase-ext";
     case OPT_dumpdir:
       return "gcc/Overall-Options.html#index-dumpdir";
     case OPT_dumpfullversion:
       return "gcc/Developer-Options.html#index-dumpfullversion";
     case OPT_dumpmachine:
       return "gcc/Developer-Options.html#index-dumpmachine";
     case OPT_dumpspecs:
       return "gcc/Developer-Options.html#index-dumpspecs";
     case OPT_dumpversion:
       return "gcc/Developer-Options.html#index-dumpversion";
     case OPT_e:
       return "gcc/Link-Options.html#index-e";
     case OPT_export_dynamic:
       break;
     case OPT_fPIC:
       return "gcc/Code-Gen-Options.html#index-fPIC";
     case OPT_fPIE:
       return "gcc/Code-Gen-Options.html#index-fPIE";
     case OPT_fRTS_:
       break;
     case OPT_fabi_compat_version_:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fabi-compat-version";
     case OPT_fabi_version_:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fabi-version";
     case OPT_faccess_control:
       return "gcc/C_002b_002b-Dialect-Options.html#index-faccess-control";
     case OPT_fada_spec_parent_:
       return "gcc/Overall-Options.html#index-fada-spec-parent";
     case OPT_faggressive_function_elimination:
       if (lang_mask & CL_Fortran)
         return "gfortran/Code-Gen-Options.html#index-faggressive-function-elimination";
       break;
     case OPT_faggressive_loop_optimizations:
       return "gcc/Optimize-Options.html#index-faggressive-loop-optimizations";
     case OPT_falign_commons:
       if (lang_mask & CL_Fortran)
         return "gfortran/Code-Gen-Options.html#index-falign-commons";
       break;
     case OPT_falign_functions:
       return "gcc/Optimize-Options.html#index-falign-functions";
     case OPT_falign_functions_:
       return "gcc/Optimize-Options.html#index-falign-functions";
     case OPT_falign_jumps:
       return "gcc/Optimize-Options.html#index-falign-jumps";
     case OPT_falign_jumps_:
       return "gcc/Optimize-Options.html#index-falign-jumps";
     case OPT_falign_labels:
       return "gcc/Optimize-Options.html#index-falign-labels";
     case OPT_falign_labels_:
       return "gcc/Optimize-Options.html#index-falign-labels";
     case OPT_falign_loops:
       return "gcc/Optimize-Options.html#index-falign-loops";
     case OPT_falign_loops_:
       return "gcc/Optimize-Options.html#index-falign-loops";
     case OPT_faligned_new_:
       return "gcc/C_002b_002b-Dialect-Options.html#index-faligned-new";
     case OPT_fall_instantiations:
       if (lang_mask & CL_D)
         return "gdc/Runtime-Options.html#index-fall-instantiations";
       break;
     case OPT_fall_intrinsics:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-fall-intrinsics";
       break;
     case OPT_fall_virtual:
       break;
     case OPT_fallocation_dce:
       return "gcc/Optimize-Options.html#index-fallocation-dce";
     case OPT_fallow_argument_mismatch:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-fallow-argument-mismatch";
       break;
     case OPT_fallow_invalid_boz:
       break;
     case OPT_fallow_leading_underscore:
       break;
     case OPT_fallow_store_data_races:
       return "gcc/Optimize-Options.html#index-fallow-store-data-races";
     case OPT_falt_external_templates:
       break;
     case OPT_fanalyzer:
       return "gcc/Static-Analyzer-Options.html#index-fanalyzer";
     case OPT_fanalyzer_call_summaries:
       return "gcc/Static-Analyzer-Options.html#index-fanalyzer-call-summaries";
     case OPT_fanalyzer_checker_:
       return "gcc/Static-Analyzer-Options.html#index-fanalyzer-checker";
     case OPT_fanalyzer_debug_text_art:
       return "gcc/Static-Analyzer-Options.html#index-fanalyzer-debug-text-art";
     case OPT_fanalyzer_feasibility:
       return "gcc/Static-Analyzer-Options.html#index-fanalyzer-feasibility";
     case OPT_fanalyzer_fine_grained:
       return "gcc/Static-Analyzer-Options.html#index-fanalyzer-fine-grained";
     case OPT_fanalyzer_show_duplicate_count:
       return "gcc/Static-Analyzer-Options.html#index-fanalyzer-show-duplicate-count";
     case OPT_fanalyzer_show_events_in_system_headers:
       return "gcc/Static-Analyzer-Options.html#index-fanalyzer-show-events-in-system-headers";
     case OPT_fanalyzer_state_merge:
       return "gcc/Static-Analyzer-Options.html#index-fanalyzer-state-merge";
     case OPT_fanalyzer_state_purge:
       return "gcc/Static-Analyzer-Options.html#index-fanalyzer-state-purge";
     case OPT_fanalyzer_suppress_followups:
       return "gcc/Static-Analyzer-Options.html#index-fanalyzer-suppress-followups";
     case OPT_fanalyzer_transitivity:
       return "gcc/Static-Analyzer-Options.html#index-fanalyzer-transitivity";
     case OPT_fanalyzer_undo_inlining:
       return "gcc/Static-Analyzer-Options.html#index-fanalyzer-undo-inlining";
     case OPT_fanalyzer_verbose_edges:
       break;
     case OPT_fanalyzer_verbose_state_changes:
       break;
     case OPT_fanalyzer_verbosity_:
       break;
     case OPT_fasan_shadow_offset_:
       return "gcc/Instrumentation-Options.html#index-fasan-shadow-offset";
     case OPT_fasm:
       return "gcc/C-Dialect-Options.html#index-fasm";
     case OPT_fassert:
       if (lang_mask & CL_D)
         return "gdc/Runtime-Options.html#index-fassert";
       break;
     case OPT_fassociative_math:
       return "gcc/Optimize-Options.html#index-fassociative-math";
     case OPT_fassume_sane_operators_new_delete:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fassume-sane-operators-new-delete";
     case OPT_fasynchronous_unwind_tables:
       return "gcc/Code-Gen-Options.html#index-fasynchronous-unwind-tables";
     case OPT_fauto_inc_dec:
       return "gcc/Optimize-Options.html#index-fauto-inc-dec";
     case OPT_fauto_init:
       break;
     case OPT_fauto_profile:
       return "gcc/Optimize-Options.html#index-fauto-profile";
     case OPT_fauto_profile_:
       return "gcc/Optimize-Options.html#index-fauto-profile";
     case OPT_fautomatic:
       if (lang_mask & CL_Fortran)
         return "gfortran/Code-Gen-Options.html#index-fno-automatic";
       break;
     case OPT_favoid_store_forwarding:
       return "gcc/Optimize-Options.html#index-favoid-store-forwarding";
     case OPT_fbackslash:
       break;
     case OPT_fbacktrace:
       if (lang_mask & CL_Fortran)
         return "gfortran/Debugging-Options.html#index-fno-backtrace";
       break;
     case OPT_fbit_tests:
       return "gcc/Code-Gen-Options.html#index-fbit-tests";
     case OPT_fblas_matmul_limit_:
       if (lang_mask & CL_Fortran)
         return "gfortran/Code-Gen-Options.html#index-fblas-matmul-limit";
       break;
     case OPT_fbounds:
       break;
     case OPT_fbounds_check:
       if (lang_mask & CL_D)
         return "gdc/Runtime-Options.html#index-fbounds-check";
       if (lang_mask & CL_Fortran)
         return "gfortran/Code-Gen-Options.html#index-fbounds-check";
       break;
     case OPT_fbounds_check_:
       if (lang_mask & CL_D)
         return "gdc/Runtime-Options.html#index-fbounds-check";
       if (lang_mask & CL_Fortran)
         return "gfortran/Code-Gen-Options.html#index-fbounds-check";
       break;
     case OPT_fbranch_count_reg:
       return "gcc/Optimize-Options.html#index-fbranch-count-reg";
     case OPT_fbranch_probabilities:
       return "gcc/Optimize-Options.html#index-fbranch-probabilities";
     case OPT_fbuilding_libgcc:
       break;
     case OPT_fbuilding_libgfortran:
       break;
     case OPT_fbuilding_libphobos_tests:
       break;
     case OPT_fbuiltin:
       break;
     case OPT_fbuiltin_:
       break;
     case OPT_fbuiltin_printf:
       break;
     case OPT_fc_prototypes:
       break;
     case OPT_fc_prototypes_external:
       break;
     case OPT_fcall_saved_:
       break;
     case OPT_fcall_used_:
       break;
     case OPT_fcaller_saves:
       return "gcc/Optimize-Options.html#index-fcaller-saves";
     case OPT_fcallgraph_info:
       return "gcc/Developer-Options.html#index-fcallgraph-info";
     case OPT_fcallgraph_info_:
       return "gcc/Developer-Options.html#index-fcallgraph-info";
     case OPT_fcanon_prefix_map:
       return "gcc/Overall-Options.html#index-fcanon-prefix-map";
     case OPT_fcanonical_system_headers:
       return "gcc/Preprocessor-Options.html#index-fno-canonical-system-headers";
     case OPT_fcase:
       break;
     case OPT_fcf_protection_:
       return "gcc/Instrumentation-Options.html#index-fcf-protection";
     case OPT_fchar8_t:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fchar8_005ft";
     case OPT_fcheck_array_temporaries:
       if (lang_mask & CL_Fortran)
         return "gfortran/Code-Gen-Options.html#index-fcheck-array-temporaries";
       break;
     case OPT_fcheck_new:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fcheck-new";
     case OPT_fcheck_pointer_bounds:
       break;
     case OPT_fcheck_:
       if (lang_mask & CL_Fortran)
         return "gfortran/Code-Gen-Options.html#index-fcheck";
       break;
     case OPT_fcheckaction_:
       if (lang_mask & CL_D)
         return "gdc/Runtime-Options.html#index-fcheckaction";
       break;
     case OPT_fchecking:
       return "gcc/Developer-Options.html#index-fchecking";
     case OPT_fchecking_:
       return "gcc/Developer-Options.html#index-fchecking";
     case OPT_fchkp_check_incomplete_type:
       break;
     case OPT_fchkp_check_read:
       break;
     case OPT_fchkp_check_write:
       break;
     case OPT_fchkp_first_field_has_own_bounds:
       break;
     case OPT_fchkp_flexible_struct_trailing_arrays:
       break;
     case OPT_fchkp_instrument_calls:
       break;
     case OPT_fchkp_instrument_marked_only:
       break;
     case OPT_fchkp_narrow_bounds:
       break;
     case OPT_fchkp_narrow_to_innermost_array:
       break;
     case OPT_fchkp_optimize:
       break;
     case OPT_fchkp_store_bounds:
       break;
     case OPT_fchkp_treat_zero_dynamic_size_as_infinite:
       break;
     case OPT_fchkp_use_fast_string_functions:
       break;
     case OPT_fchkp_use_nochk_string_functions:
       break;
     case OPT_fchkp_use_static_bounds:
       break;
     case OPT_fchkp_use_static_const_bounds:
       break;
     case OPT_fchkp_use_wrappers:
       break;
     case OPT_fchkp_zero_input_bounds_for_main:
       break;
     case OPT_fcoarray_:
       if (lang_mask & CL_Fortran)
         return "gfortran/Code-Gen-Options.html#index-fcoarray";
       break;
     case OPT_fcode_hoisting:
       return "gcc/Optimize-Options.html#index-fcode-hoisting";
     case OPT_fcombine_stack_adjustments:
       return "gcc/Optimize-Options.html#index-fcombine-stack-adjustments";
     case OPT_fcommon:
       return "gcc/Code-Gen-Options.html#index-fcommon";
     case OPT_fcompare_debug:
       return "gcc/Developer-Options.html#index-fcompare-debug";
     case OPT_fcompare_debug_second:
       return "gcc/Developer-Options.html#index-fcompare-debug-second";
     case OPT_fcompare_debug_:
       return "gcc/Developer-Options.html#index-fcompare-debug";
     case OPT_fcompare_elim:
       return "gcc/Optimize-Options.html#index-fcompare-elim";
     case OPT_fconcepts:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fconcepts";
     case OPT_fconcepts_diagnostics_depth_:
       break;
     case OPT_fconcepts_ts:
       break;
     case OPT_fcond_mismatch:
       return "gcc/C-Dialect-Options.html#index-fcond-mismatch";
     case OPT_fcondition_coverage:
       return "gcc/Instrumentation-Options.html#index-fcondition-coverage";
     case OPT_fconserve_stack:
       return "gcc/Optimize-Options.html#index-fconserve-stack";
     case OPT_fconstant_string_class_:
       return "gcc/Objective-C-and-Objective-C_002b_002b-Dialect-Options.html#index-fconstant-string-class";
     case OPT_fconstexpr_cache_depth_:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fconstexpr-cache-depth";
     case OPT_fconstexpr_depth_:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fconstexpr-depth";
     case OPT_fconstexpr_fp_except:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fconstexpr-fp-except";
     case OPT_fconstexpr_loop_limit_:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fconstexpr-loop-limit";
     case OPT_fconstexpr_ops_limit_:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fconstexpr-ops-limit";
     case OPT_fcontract_assumption_mode_:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fcontract-assumption-mode";
     case OPT_fcontract_build_level_:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fcontract-build-level";
     case OPT_fcontract_continuation_mode_:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fcontract-continuation-mode";
     case OPT_fcontract_mode_:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fcontract-mode";
     case OPT_fcontract_role_:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fcontract-role";
     case OPT_fcontract_semantic_:
       break;
     case OPT_fcontract_strict_declarations_:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fcontract-strict-declarations";
     case OPT_fcontracts:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fcontracts";
     case OPT_fconvert_:
       break;
     case OPT_fcoroutines:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fcoroutines";
     case OPT_fcpp:
       break;
     case OPT_fcpp_begin:
       break;
     case OPT_fcpp_end:
       break;
     case OPT_fcprop_registers:
       return "gcc/Optimize-Options.html#index-fcprop-registers";
     case OPT_fcray_pointer:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-fcray-pointer";
       break;
     case OPT_fcrossjumping:
       return "gcc/Optimize-Options.html#index-fcrossjumping";
     case OPT_fcse_follow_jumps:
       return "gcc/Optimize-Options.html#index-fcse-follow-jumps";
     case OPT_fcx_fortran_rules:
       return "gcc/Optimize-Options.html#index-fcx-fortran-rules";
     case OPT_fcx_limited_range:
       return "gcc/Optimize-Options.html#index-fcx-limited-range";
     case OPT_fd:
       break;
     case OPT_fd_lines_as_code:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-fd-lines-as-code";
       break;
     case OPT_fd_lines_as_comments:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-fd-lines-as-comments";
       break;
     case OPT_fdata_sections:
       return "gcc/Optimize-Options.html#index-fdata-sections";
     case OPT_fdbg_cnt_list:
       return "gcc/Developer-Options.html#index-fdbg-cnt-list";
     case OPT_fdbg_cnt_:
       return "gcc/Developer-Options.html#index-fdbg-cnt";
     case OPT_fdce:
       return "gcc/Optimize-Options.html#index-fdce";
     case OPT_fdebug:
       if (lang_mask & CL_D)
         return "gdc/Runtime-Options.html#index-fdebug";
       break;
     case OPT_fdebug_aux_vars:
       if (lang_mask & CL_Fortran)
         return "gfortran/Debugging-Options.html#index-fdebug-aux-vars";
       break;
     case OPT_fdebug_builtins:
       break;
     case OPT_fdebug_cpp:
       return "gcc/Preprocessor-Options.html#index-fdebug-cpp";
     case OPT_fdebug_function_line_numbers:
       break;
     case OPT_fdebug_prefix_map_:
       return "gcc/Debugging-Options.html#index-fdebug-prefix-map";
     case OPT_fdebug_types_section:
       return "gcc/Debugging-Options.html#index-fdebug-types-section";
     case OPT_fdebug_:
       if (lang_mask & CL_D)
         return "gdc/Runtime-Options.html#index-fdebug";
       break;
     case OPT_fdec:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-fdec";
       break;
     case OPT_fdec_blank_format_item:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-fdec-blank-format-item";
       break;
     case OPT_fdec_char_conversions:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-fdec-char-conversions";
       break;
     case OPT_fdec_format_defaults:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-fdec-format-defaults";
       break;
     case OPT_fdec_include:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-fdec-include";
       break;
     case OPT_fdec_intrinsic_ints:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-fdec-intrinsic-ints";
       break;
     case OPT_fdec_math:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-fdec-math";
       break;
     case OPT_fdec_static:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-fdec-static";
       break;
     case OPT_fdec_structure:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-fdec-structure";
       break;
     case OPT_fdeclone_ctor_dtor:
       return "gcc/Optimize-Options.html#index-fdeclone-ctor-dtor";
     case OPT_fdef_:
       break;
     case OPT_fdefault_double_8:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-fdefault-double-8";
       break;
     case OPT_fdefault_integer_8:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-fdefault-integer-8";
       break;
     case OPT_fdefault_real_10:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-fdefault-real-10";
       break;
     case OPT_fdefault_real_16:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-fdefault-real-16";
       break;
     case OPT_fdefault_real_8:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-fdefault-real-8";
       break;
     case OPT_fdefer_pop:
       return "gcc/Optimize-Options.html#index-fdefer-pop";
     case OPT_fdelayed_branch:
       return "gcc/Optimize-Options.html#index-fdelayed-branch";
     case OPT_fdelete_dead_exceptions:
       return "gcc/Code-Gen-Options.html#index-fdelete-dead-exceptions";
     case OPT_fdelete_null_pointer_checks:
       return "gcc/Optimize-Options.html#index-fdelete-null-pointer-checks";
     case OPT_fdeps_file_:
       return "gcc/C-Dialect-Options.html#index-fdeps-file";
     case OPT_fdeps_format_:
       return "gcc/C-Dialect-Options.html#index-fdeps-format";
     case OPT_fdeps_target_:
       return "gcc/C-Dialect-Options.html#index-fdeps-target";
     case OPT_fdevirtualize:
       return "gcc/Optimize-Options.html#index-fdevirtualize";
     case OPT_fdevirtualize_at_ltrans:
       return "gcc/Optimize-Options.html#index-fdevirtualize-at-ltrans";
     case OPT_fdevirtualize_speculatively:
       return "gcc/Optimize-Options.html#index-fdevirtualize-speculatively";
     case OPT_fdiagnostics_add_output_:
       return "gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-add-output";
     case OPT_fdiagnostics_all_candidates:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fdiagnostics-all-candidates";
     case OPT_fdiagnostics_color_:
       return "gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-color";
     case OPT_fdiagnostics_column_origin_:
       return "gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-column-origin";
     case OPT_fdiagnostics_column_unit_:
       return "gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-column-unit";
     case OPT_fdiagnostics_escape_format_:
       return "gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-escape-format";
     case OPT_fdiagnostics_format_:
       return "gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-format";
     case OPT_fdiagnostics_generate_patch:
       return "gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-generate-patch";
     case OPT_fdiagnostics_json_formatting:
       return "gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-json-formatting";
     case OPT_fdiagnostics_minimum_margin_width_:
       return "gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-minimum-margin-width";
     case OPT_fdiagnostics_parseable_fixits:
       return "gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-parseable-fixits";
     case OPT_fdiagnostics_path_format_:
       return "gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-path-format";
     case OPT_fdiagnostics_plain_output:
       break;
     case OPT_fdiagnostics_set_output_:
       return "gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-set-output";
     case OPT_fdiagnostics_show_caret:
       return "gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-show-caret";
     case OPT_fdiagnostics_show_cwe:
       return "gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-show-cwe";
     case OPT_fdiagnostics_show_event_links:
       return "gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-show-event-links";
     case OPT_fdiagnostics_show_highlight_colors:
       return "gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-show-highlight-colors";
     case OPT_fdiagnostics_show_labels:
       return "gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-show-labels";
     case OPT_fdiagnostics_show_line_numbers:
       return "gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-show-line-numbers";
     case OPT_fdiagnostics_show_location_:
       return "gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-show-location";
     case OPT_fdiagnostics_show_option:
       return "gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-show-option";
     case OPT_fdiagnostics_show_path_depths:
       return "gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-show-path-depths";
     case OPT_fdiagnostics_show_rules:
       return "gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-show-rules";
     case OPT_fdiagnostics_show_template_tree:
       return "gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-show-template-tree";
     case OPT_fdiagnostics_text_art_charset_:
       return "gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-text-art-charset";
     case OPT_fdiagnostics_urls_:
       return "gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-urls";
     case OPT_fdirectives_only:
       return "gcc/Preprocessor-Options.html#index-fdirectives-only";
     case OPT_fdisable_:
       return "gcc/Developer-Options.html#index-fdisable-";
     case OPT_fdoc:
       if (lang_mask & CL_D)
         return "gdc/Code-Generation.html#index-fdoc";
       break;
     case OPT_fdoc_dir_:
       if (lang_mask & CL_D)
         return "gdc/Code-Generation.html#index-fdoc-dir";
       break;
     case OPT_fdoc_file_:
       if (lang_mask & CL_D)
         return "gdc/Code-Generation.html#index-fdoc-file";
       break;
     case OPT_fdoc_inc_:
       if (lang_mask & CL_D)
         return "gdc/Code-Generation.html#index-fdoc-inc";
       break;
     case OPT_fdollar_ok:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-fdollar-ok";
       break;
     case OPT_fdollars_in_identifiers:
       break;
     case OPT_fdruntime:
       if (lang_mask & CL_D)
         return "gdc/Runtime-Options.html#index-fdruntime";
       break;
     case OPT_fdse:
       return "gcc/Optimize-Options.html#index-fdse";
     case OPT_fdump_:
       break;
     case OPT_fdump_ada_spec:
       return "gcc/Overall-Options.html#index-fdump-ada-spec";
     case OPT_fdump_ada_spec_slim:
       break;
     case OPT_fdump_analyzer:
       return "gcc/Static-Analyzer-Options.html#index-fdump-analyzer";
     case OPT_fdump_analyzer_callgraph:
       return "gcc/Static-Analyzer-Options.html#index-fdump-analyzer-callgraph";
     case OPT_fdump_analyzer_exploded_graph:
       return "gcc/Static-Analyzer-Options.html#index-fdump-analyzer-exploded-graph";
     case OPT_fdump_analyzer_exploded_nodes:
       break;
     case OPT_fdump_analyzer_exploded_nodes_2:
       break;
     case OPT_fdump_analyzer_exploded_nodes_3:
       break;
     case OPT_fdump_analyzer_exploded_paths:
       return "gcc/Static-Analyzer-Options.html#index-fdump-analyzer-exploded-paths";
     case OPT_fdump_analyzer_feasibility:
       break;
     case OPT_fdump_analyzer_infinite_loop:
       break;
     case OPT_fdump_analyzer_json:
       return "gcc/Static-Analyzer-Options.html#index-fdump-analyzer-json";
     case OPT_fdump_analyzer_state_purge:
       return "gcc/Static-Analyzer-Options.html#index-fdump-analyzer-state-purge";
     case OPT_fdump_analyzer_stderr:
       return "gcc/Static-Analyzer-Options.html#index-fdump-analyzer-stderr";
     case OPT_fdump_analyzer_supergraph:
       return "gcc/Static-Analyzer-Options.html#index-fdump-analyzer-supergraph";
     case OPT_fdump_analyzer_untracked:
       return "gcc/Static-Analyzer-Options.html#index-fdump-analyzer-untracked";
     case OPT_fdump_c___spec_verbose:
       break;
     case OPT_fdump_c___spec_:
       break;
     case OPT_fdump_d_original:
       if (lang_mask & CL_D)
         return "gdc/Developer-Options.html#index-fdump-d-original";
       break;
     case OPT_fdump_final_insns:
       return "gcc/Developer-Options.html#index-fdump-final-insns";
     case OPT_fdump_final_insns_:
       return "gcc/Developer-Options.html#index-fdump-final-insns";
     case OPT_fdump_fortran_global:
       if (lang_mask & CL_Fortran)
         return "gfortran/Developer-Options.html#index-fdump-fortran-global";
       break;
     case OPT_fdump_fortran_optimized:
       if (lang_mask & CL_Fortran)
         return "gfortran/Developer-Options.html#index-fdump-fortran-optimized";
       break;
     case OPT_fdump_fortran_original:
       if (lang_mask & CL_Fortran)
         return "gfortran/Developer-Options.html#index-fdump-fortran-original";
       break;
     case OPT_fdump_go_spec_:
       return "gcc/Overall-Options.html#index-fdump-go-spec";
     case OPT_fdump_internal_locations:
       break;
     case OPT_fdump_noaddr:
       return "gcc/Developer-Options.html#index-fdump-noaddr";
     case OPT_fdump_passes:
       return "gcc/Developer-Options.html#index-fdump-passes";
     case OPT_fdump_scos:
       break;
     case OPT_fdump_system_exports:
       break;
     case OPT_fdump_unnumbered:
       return "gcc/Developer-Options.html#index-fdump-unnumbered";
     case OPT_fdump_unnumbered_links:
       return "gcc/Developer-Options.html#index-fdump-unnumbered-links";
     case OPT_fdwarf2_cfi_asm:
       return "gcc/Debugging-Options.html#index-fdwarf2-cfi-asm";
     case OPT_fearly_inlining:
       return "gcc/Optimize-Options.html#index-fearly-inlining";
     case OPT_felide_constructors:
       return "gcc/C_002b_002b-Dialect-Options.html#index-felide-constructors";
     case OPT_felide_type:
       return "gcc/Diagnostic-Message-Formatting-Options.html#index-felide-type";
     case OPT_feliminate_unused_debug_symbols:
       return "gcc/Debugging-Options.html#index-feliminate-unused-debug-symbols";
     case OPT_feliminate_unused_debug_types:
       return "gcc/Debugging-Options.html#index-feliminate-unused-debug-types";
     case OPT_femit_class_debug_always:
       return "gcc/Debugging-Options.html#index-femit-class-debug-always";
     case OPT_femit_struct_debug_baseonly:
       return "gcc/Debugging-Options.html#index-femit-struct-debug-baseonly";
     case OPT_femit_struct_debug_detailed_:
       return "gcc/Debugging-Options.html#index-femit-struct-debug-detailed";
     case OPT_femit_struct_debug_reduced:
       return "gcc/Debugging-Options.html#index-femit-struct-debug-reduced";
     case OPT_fenable_:
       return "gcc/Developer-Options.html#index-fenable-";
     case OPT_fenforce_eh_specs:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fenforce-eh-specs";
     case OPT_fenum_int_equiv:
       break;
     case OPT_fexceptions:
       return "gcc/Code-Gen-Options.html#index-fexceptions";
     case OPT_fexcess_precision_:
       return "gcc/Optimize-Options.html#index-fexcess-precision";
     case OPT_fexec_charset_:
       return "gcc/Preprocessor-Options.html#index-fexec-charset";
     case OPT_fexpensive_optimizations:
       return "gcc/Optimize-Options.html#index-fexpensive-optimizations";
     case OPT_fext_dce:
       break;
     case OPT_fext_numeric_literals:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fext-numeric-literals";
     case OPT_fextended_identifiers:
       return "gcc/Preprocessor-Options.html#index-fextended-identifiers";
     case OPT_fextended_opaque:
       break;
     case OPT_fextern_std_:
       if (lang_mask & CL_D)
         return "gdc/Runtime-Options.html#index-fextern-std";
       break;
     case OPT_fextern_tls_init:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fextern-tls-init";
     case OPT_fexternal_blas:
       if (lang_mask & CL_Fortran)
         return "gfortran/Code-Gen-Options.html#index-fexternal-blas";
       break;
     case OPT_fexternal_templates:
       break;
     case OPT_ff2c:
       if (lang_mask & CL_Fortran)
         return "gfortran/Code-Gen-Options.html#index-ff2c";
       break;
     case OPT_ffast_math:
       return "gcc/Optimize-Options.html#index-ffast-math";
     case OPT_ffat_lto_objects:
       return "gcc/Optimize-Options.html#index-ffat-lto-objects";
     case OPT_ffile_prefix_map_:
       return "gcc/Overall-Options.html#index-ffile-prefix-map";
     case OPT_ffinite_loops:
       return "gcc/Optimize-Options.html#index-ffinite-loops";
     case OPT_ffinite_math_only:
       return "gcc/Optimize-Options.html#index-ffinite-math-only";
     case OPT_ffixed_:
       break;
     case OPT_ffixed_form:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-ffixed-form";
       break;
     case OPT_ffixed_line_length_:
       break;
     case OPT_ffixed_line_length_none:
       break;
     case OPT_ffloat_store:
       break;
     case OPT_ffloatvalue:
       break;
     case OPT_ffold_mem_offsets:
       return "gcc/Optimize-Options.html#index-ffold-mem-offsets";
     case OPT_ffold_simple_inlines:
       return "gcc/C_002b_002b-Dialect-Options.html#index-ffold-simple-inlines";
     case OPT_ffor_scope:
       break;
     case OPT_fforward_propagate:
       return "gcc/Optimize-Options.html#index-fforward-propagate";
     case OPT_ffp_contract_:
       return "gcc/Optimize-Options.html#index-ffp-contract";
     case OPT_ffp_int_builtin_inexact:
       return "gcc/Optimize-Options.html#index-ffp-int-builtin-inexact";
     case OPT_ffpe_summary_:
       break;
     case OPT_ffpe_trap_:
       break;
     case OPT_ffree_form:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-ffree-form";
       break;
     case OPT_ffree_line_length_:
       break;
     case OPT_ffree_line_length_none:
       break;
     case OPT_ffreestanding:
       break;
     case OPT_ffriend_injection:
       break;
     case OPT_ffrontend_loop_interchange:
       break;
     case OPT_ffrontend_optimize:
       break;
     case OPT_ffunction_cse:
       return "gcc/Optimize-Options.html#index-ffunction-cse";
     case OPT_ffunction_sections:
       return "gcc/Optimize-Options.html#index-ffunction-sections";
     case OPT_fgcse:
       return "gcc/Optimize-Options.html#index-fgcse";
     case OPT_fgcse_after_reload:
       return "gcc/Optimize-Options.html#index-fgcse-after-reload";
     case OPT_fgcse_las:
       return "gcc/Optimize-Options.html#index-fgcse-las";
     case OPT_fgcse_lm:
       return "gcc/Optimize-Options.html#index-fgcse-lm";
     case OPT_fgcse_sm:
       return "gcc/Optimize-Options.html#index-fgcse-sm";
     case OPT_fgen_module_list_:
       break;
     case OPT_fgimple:
       return "gcc/C-Dialect-Options.html#index-fgimple";
     case OPT_fgnat_encodings_:
       break;
     case OPT_fgnu_keywords:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fgnu-keywords";
     case OPT_fgnu_runtime:
       return "gcc/Objective-C-and-Objective-C_002b_002b-Dialect-Options.html#index-fgnu-runtime";
     case OPT_fgnu_tm:
       return "gcc/C-Dialect-Options.html#index-fgnu-tm";
     case OPT_fgnu_unique:
       return "gcc/Code-Gen-Options.html#index-fgnu-unique";
     case OPT_fgnu89_inline:
       return "gcc/C-Dialect-Options.html#index-fgnu89-inline";
     case OPT_fgo_c_header_:
       break;
     case OPT_fgo_check_divide_overflow:
       break;
     case OPT_fgo_check_divide_zero:
       break;
     case OPT_fgo_compiling_runtime:
       break;
     case OPT_fgo_debug_escape:
       break;
     case OPT_fgo_debug_escape_hash_:
       break;
     case OPT_fgo_debug_optimization:
       break;
     case OPT_fgo_dump_:
       break;
     case OPT_fgo_embedcfg_:
       break;
     case OPT_fgo_importcfg_:
       break;
     case OPT_fgo_optimize_:
       break;
     case OPT_fgo_pkgpath_:
       break;
     case OPT_fgo_prefix_:
       break;
     case OPT_fgo_relative_import_path_:
       break;
     case OPT_fgraphite:
       break;
     case OPT_fgraphite_identity:
       return "gcc/Optimize-Options.html#index-fgraphite-identity";
     case OPT_fguess_branch_probability:
       return "gcc/Optimize-Options.html#index-fguess-branch-probability";
     case OPT_fguiding_decls:
       break;
     case OPT_fhardcfr_check_exceptions:
       return "gcc/Instrumentation-Options.html#index-fhardcfr-check-exceptions";
     case OPT_fhardcfr_check_noreturn_calls_:
       return "gcc/Instrumentation-Options.html#index-fhardcfr-check-noreturn-calls";
     case OPT_fhardcfr_check_returning_calls:
       return "gcc/Instrumentation-Options.html#index-fhardcfr-check-returning-calls";
     case OPT_fhardcfr_skip_leaf:
       return "gcc/Instrumentation-Options.html#index-fhardcfr-skip-leaf";
     case OPT_fharden_compares:
       return "gcc/Instrumentation-Options.html#index-fharden-compares";
     case OPT_fharden_conditional_branches:
       return "gcc/Instrumentation-Options.html#index-fharden-conditional-branches";
     case OPT_fharden_control_flow_redundancy:
       return "gcc/Instrumentation-Options.html#index-fharden-control-flow-redundancy";
     case OPT_fhardened:
       return "gcc/Instrumentation-Options.html#index-fhardened";
     case OPT_fhoist_adjacent_loads:
       return "gcc/Optimize-Options.html#index-fhoist-adjacent-loads";
     case OPT_fhonor_std:
       break;
     case OPT_fhosted:
       return "gcc/C-Dialect-Options.html#index-fhosted";
     case OPT_fhuge_objects:
       break;
     case OPT_fident:
       return "gcc/Code-Gen-Options.html#index-fident";
     case OPT_fif_conversion:
       return "gcc/Optimize-Options.html#index-fif-conversion";
     case OPT_fif_conversion2:
       return "gcc/Optimize-Options.html#index-fif-conversion2";
     case OPT_fignore_unknown_pragmas:
       if (lang_mask & CL_D)
         return "gdc/Warnings.html#index-fignore-unknown-pragmas";
       break;
     case OPT_fimmediate_escalation:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fimmediate-escalation";
     case OPT_fimplement_inlines:
       break;
     case OPT_fimplicit_constexpr:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fimplicit-constexpr";
     case OPT_fimplicit_inline_templates:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fimplicit-inline-templates";
     case OPT_fimplicit_none:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-fimplicit-none";
       break;
     case OPT_fimplicit_templates:
       break;
     case OPT_findex:
       break;
     case OPT_findirect_inlining:
       return "gcc/Optimize-Options.html#index-findirect-inlining";
     case OPT_finhibit_size_directive:
       return "gcc/Code-Gen-Options.html#index-finhibit-size-directive";
     case OPT_finit_character_:
       if (lang_mask & CL_Fortran)
         return "gfortran/Code-Gen-Options.html#index-finit-character";
       break;
     case OPT_finit_derived:
       if (lang_mask & CL_Fortran)
         return "gfortran/Code-Gen-Options.html#index-finit-derived";
       break;
     case OPT_finit_integer_:
       if (lang_mask & CL_Fortran)
         return "gfortran/Code-Gen-Options.html#index-finit-integer";
       break;
     case OPT_finit_local_zero:
       if (lang_mask & CL_Fortran)
         return "gfortran/Code-Gen-Options.html#index-finit-local-zero";
       break;
     case OPT_finit_logical_:
       if (lang_mask & CL_Fortran)
         return "gfortran/Code-Gen-Options.html#index-finit-logical";
       break;
     case OPT_finit_real_:
       if (lang_mask & CL_Fortran)
         return "gfortran/Code-Gen-Options.html#index-finit-real";
       break;
     case OPT_finline:
       return "gcc/Optimize-Options.html#index-finline";
     case OPT_finline_arg_packing:
       if (lang_mask & CL_Fortran)
         return "gfortran/Code-Gen-Options.html#index-finline-arg-packing";
       break;
     case OPT_finline_atomics:
       break;
     case OPT_finline_functions:
       return "gcc/Optimize-Options.html#index-finline-functions";
     case OPT_finline_functions_called_once:
       return "gcc/Optimize-Options.html#index-finline-functions-called-once";
     case OPT_finline_intrinsics:
       if (lang_mask & CL_Fortran)
         return "gfortran/Code-Gen-Options.html#index-finline-intrinsics";
       break;
     case OPT_finline_intrinsics_:
       if (lang_mask & CL_Fortran)
         return "gfortran/Code-Gen-Options.html#index-finline-intrinsics";
       break;
     case OPT_finline_limit_:
       return "gcc/Optimize-Options.html#index-finline-limit";
     case OPT_finline_matmul_limit_:
       if (lang_mask & CL_Fortran)
         return "gfortran/Code-Gen-Options.html#index-finline-matmul-limit";
       break;
     case OPT_finline_small_functions:
       return "gcc/Optimize-Options.html#index-finline-small-functions";
     case OPT_finline_stringops:
       return "gcc/Optimize-Options.html#index-finline-stringops";
     case OPT_finline_stringops_:
       return "gcc/Optimize-Options.html#index-finline-stringops";
     case OPT_finput_charset_:
       return "gcc/Preprocessor-Options.html#index-finput-charset";
     case OPT_finstrument_functions:
       return "gcc/Instrumentation-Options.html#index-finstrument-functions";
     case OPT_finstrument_functions_exclude_file_list_:
       return "gcc/Instrumentation-Options.html#index-finstrument-functions-exclude-file-list";
     case OPT_finstrument_functions_exclude_function_list_:
       return "gcc/Instrumentation-Options.html#index-finstrument-functions-exclude-function-list";
     case OPT_finstrument_functions_once:
       return "gcc/Instrumentation-Options.html#index-finstrument-functions-once";
     case OPT_finteger_4_integer_8:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-finteger-4-integer-8";
       break;
     case OPT_fintrinsic_modules_path:
       if (lang_mask & CL_Fortran)
         return "gfortran/Directory-Options.html#index-fintrinsic-modules-path";
       break;
     case OPT_fintrinsic_modules_path_:
       if (lang_mask & CL_Fortran)
         return "gfortran/Directory-Options.html#index-fintrinsic-modules-path";
       break;
     case OPT_finvariants:
       if (lang_mask & CL_D)
         return "gdc/Runtime-Options.html#index-finvariants";
       break;
     case OPT_fipa_bit_cp:
       return "gcc/Optimize-Options.html#index-fipa-bit-cp";
     case OPT_fipa_cp:
       return "gcc/Optimize-Options.html#index-fipa-cp";
     case OPT_fipa_cp_clone:
       return "gcc/Optimize-Options.html#index-fipa-cp-clone";
     case OPT_fipa_icf:
       return "gcc/Optimize-Options.html#index-fipa-icf";
     case OPT_fipa_icf_functions:
       break;
     case OPT_fipa_icf_variables:
       break;
     case OPT_fipa_modref:
       return "gcc/Optimize-Options.html#index-fipa-modref";
     case OPT_fipa_profile:
       return "gcc/Optimize-Options.html#index-fipa-profile";
     case OPT_fipa_pta:
       return "gcc/Optimize-Options.html#index-fipa-pta";
     case OPT_fipa_pure_const:
       return "gcc/Optimize-Options.html#index-fipa-pure-const";
     case OPT_fipa_ra:
       return "gcc/Optimize-Options.html#index-fipa-ra";
     case OPT_fipa_reference:
       return "gcc/Optimize-Options.html#index-fipa-reference";
     case OPT_fipa_reference_addressable:
       return "gcc/Optimize-Options.html#index-fipa-reference-addressable";
     case OPT_fipa_sra:
       return "gcc/Optimize-Options.html#index-fipa-sra";
     case OPT_fipa_stack_alignment:
       return "gcc/Optimize-Options.html#index-fipa-stack-alignment";
     case OPT_fipa_strict_aliasing:
       return "gcc/Optimize-Options.html#index-fipa-strict-aliasing";
     case OPT_fipa_vrp:
       return "gcc/Optimize-Options.html#index-fipa-vrp";
     case OPT_fira_algorithm_:
       return "gcc/Optimize-Options.html#index-fira-algorithm";
     case OPT_fira_hoist_pressure:
       return "gcc/Optimize-Options.html#index-fira-hoist-pressure";
     case OPT_fira_loop_pressure:
       return "gcc/Optimize-Options.html#index-fira-loop-pressure";
     case OPT_fira_region_:
       return "gcc/Optimize-Options.html#index-fira-region";
     case OPT_fira_share_save_slots:
       return "gcc/Optimize-Options.html#index-fira-share-save-slots";
     case OPT_fira_share_spill_slots:
       return "gcc/Optimize-Options.html#index-fira-share-spill-slots";
     case OPT_fira_verbose_:
       return "gcc/Developer-Options.html#index-fira-verbose";
     case OPT_fiso:
       break;
     case OPT_fisolate_erroneous_paths_attribute:
       return "gcc/Optimize-Options.html#index-fisolate-erroneous-paths-attribute";
     case OPT_fisolate_erroneous_paths_dereference:
       return "gcc/Optimize-Options.html#index-fisolate-erroneous-paths-dereference";
     case OPT_fivar_visibility_:
       return "gcc/Objective-C-and-Objective-C_002b_002b-Dialect-Options.html#index-fivar-visibility";
     case OPT_fivopts:
       return "gcc/Optimize-Options.html#index-fivopts";
     case OPT_fjump_tables:
       return "gcc/Code-Gen-Options.html#index-fjump-tables";
     case OPT_fkeep_gc_roots_live:
       break;
     case OPT_fkeep_inline_dllexport:
       return "gcc/Optimize-Options.html#index-fkeep-inline-dllexport";
     case OPT_fkeep_inline_functions:
       break;
     case OPT_fkeep_static_consts:
       return "gcc/Optimize-Options.html#index-fkeep-static-consts";
     case OPT_fkeep_static_functions:
       return "gcc/Optimize-Options.html#index-fkeep-static-functions";
     case OPT_flabels_ok:
       break;
     case OPT_flang_info_include_translate:
       return "gcc/C_002b_002b-Dialect-Options.html#index-flang-info-include-translate";
     case OPT_flang_info_include_translate_not:
       return "gcc/C_002b_002b-Dialect-Options.html#index-flang-info-include-translate-not";
     case OPT_flang_info_include_translate_:
       return "gcc/C_002b_002b-Dialect-Options.html#index-flang-info-include-translate";
     case OPT_flang_info_module_cmi:
       return "gcc/C_002b_002b-Dialect-Options.html#index-flang-info-module-cmi";
     case OPT_flang_info_module_cmi_:
       return "gcc/C_002b_002b-Dialect-Options.html#index-flang-info-module-cmi";
     case OPT_flate_combine_instructions:
       return "gcc/Optimize-Options.html#index-flate-combine-instructions";
     case OPT_flax_vector_conversions:
       return "gcc/C-Dialect-Options.html#index-flax-vector-conversions";
     case OPT_fleading_underscore:
       return "gcc/Code-Gen-Options.html#index-fleading-underscore";
     case OPT_flibs_:
       break;
     case OPT_flifetime_dse:
       return "gcc/Optimize-Options.html#index-flifetime-dse";
     case OPT_flifetime_dse_:
       return "gcc/Optimize-Options.html#index-flifetime-dse";
     case OPT_flimit_function_alignment:
       break;
     case OPT_flinker_output_:
       return "gcc/Link-Options.html#index-flinker-output";
     case OPT_flive_patching_:
       return "gcc/Optimize-Options.html#index-flive-patching";
     case OPT_flive_range_shrinkage:
       return "gcc/Optimize-Options.html#index-flive-range-shrinkage";
     case OPT_flocal_ivars:
       return "gcc/Objective-C-and-Objective-C_002b_002b-Dialect-Options.html#index-flocal-ivars";
     case OPT_flocation_:
       break;
     case OPT_floop_interchange:
       return "gcc/Optimize-Options.html#index-floop-interchange";
     case OPT_floop_nest_optimize:
       return "gcc/Optimize-Options.html#index-floop-nest-optimize";
     case OPT_floop_parallelize_all:
       return "gcc/Optimize-Options.html#index-floop-parallelize-all";
     case OPT_floop_unroll_and_jam:
       return "gcc/Optimize-Options.html#index-floop-unroll-and-jam";
     case OPT_flra_remat:
       return "gcc/Optimize-Options.html#index-flra-remat";
     case OPT_flto:
       return "gcc/Optimize-Options.html#index-flto";
     case OPT_flto_compression_level_:
       return "gcc/Optimize-Options.html#index-flto-compression-level";
     case OPT_flto_incremental_cache_size_:
       break;
     case OPT_flto_incremental_:
       break;
     case OPT_flto_partition_:
       return "gcc/Optimize-Options.html#index-flto-partition";
     case OPT_flto_report:
       return "gcc/Developer-Options.html#index-flto-report";
     case OPT_flto_report_wpa:
       return "gcc/Developer-Options.html#index-flto-report-wpa";
     case OPT_flto_:
       return "gcc/Optimize-Options.html#index-flto";
     case OPT_fltrans:
       break;
     case OPT_fltrans_output_list_:
       break;
     case OPT_fm2_debug_trace_:
       break;
     case OPT_fm2_dump_decl_:
       break;
     case OPT_fm2_dump_filter_:
       break;
     case OPT_fm2_dump_gimple_:
       break;
     case OPT_fm2_dump_quad_:
       break;
     case OPT_fm2_dump_:
       break;
     case OPT_fm2_file_offset_bits_:
       break;
     case OPT_fm2_g:
       break;
     case OPT_fm2_lower_case:
       break;
     case OPT_fm2_pathname_:
       break;
     case OPT_fm2_pathnameI:
       break;
     case OPT_fm2_plugin:
       break;
     case OPT_fm2_prefix_:
       break;
     case OPT_fm2_statistics:
       break;
     case OPT_fm2_strict_type:
       break;
     case OPT_fm2_whole_program:
       break;
     case OPT_fmacro_prefix_map_:
       return "gcc/Preprocessor-Options.html#index-fmacro-prefix-map";
     case OPT_fmain:
       if (lang_mask & CL_D)
         return "gdc/Runtime-Options.html#index-fmain";
       break;
     case OPT_fmalloc_dce:
       return "gcc/Optimize-Options.html#index-fmalloc-dce";
     case OPT_fmalloc_dce_:
       return "gcc/Optimize-Options.html#index-fmalloc-dce";
     case OPT_fmath_errno:
       return "gcc/Optimize-Options.html#index-fmath-errno";
     case OPT_fmax_array_constructor_:
       if (lang_mask & CL_Fortran)
         return "gfortran/Code-Gen-Options.html#index-fmax-array-constructor";
       break;
     case OPT_fmax_errors_:
       if (lang_mask & CL_D)
         return "gdc/Warnings.html#index-fmax-errors";
       return "gcc/Warning-Options.html#index-fmax-errors";
     case OPT_fmax_identifier_length_:
       break;
     case OPT_fmax_include_depth_:
       return "gcc/Preprocessor-Options.html#index-fmax-include-depth";
     case OPT_fmax_stack_var_size_:
       if (lang_mask & CL_Fortran)
         return "gfortran/Code-Gen-Options.html#index-fmax-stack-var-size";
       break;
     case OPT_fmax_subrecord_length_:
       break;
     case OPT_fmem_report:
       return "gcc/Developer-Options.html#index-fmem-report";
     case OPT_fmem_report_wpa:
       return "gcc/Developer-Options.html#index-fmem-report-wpa";
     case OPT_fmerge_all_constants:
       return "gcc/Optimize-Options.html#index-fmerge-all-constants";
     case OPT_fmerge_constants:
       return "gcc/Optimize-Options.html#index-fmerge-constants";
     case OPT_fmerge_debug_strings:
       return "gcc/Debugging-Options.html#index-fmerge-debug-strings";
     case OPT_fmessage_length_:
       return "gcc/Diagnostic-Message-Formatting-Options.html#index-fmessage-length";
     case OPT_fmin_function_alignment_:
       break;
     case OPT_fmod_:
       break;
     case OPT_fmodule_file_:
       if (lang_mask & CL_D)
         return "gdc/Directory-Options.html#index-fmodule-file";
       break;
     case OPT_fmodule_header:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fmodule-header";
     case OPT_fmodule_header_:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fmodule-header";
     case OPT_fmodule_implicit_inline:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fmodule-implicit-inline";
     case OPT_fmodule_lazy:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fmodule-lazy";
     case OPT_fmodule_mapper_:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fmodule-mapper";
     case OPT_fmodule_only:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fmodule-only";
     case OPT_fmodule_private:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-fmodule-private";
       break;
     case OPT_fmodule_version_ignore:
       break;
     case OPT_fmoduleinfo:
       if (lang_mask & CL_D)
         return "gdc/Runtime-Options.html#index-fmoduleinfo";
       break;
     case OPT_fmodules:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fmodules";
     case OPT_fmodulo_sched:
       return "gcc/Optimize-Options.html#index-fmodulo-sched";
     case OPT_fmodulo_sched_allow_regmoves:
       return "gcc/Optimize-Options.html#index-fmodulo-sched-allow-regmoves";
     case OPT_fmove_loop_invariants:
       return "gcc/Optimize-Options.html#index-fmove-loop-invariants";
     case OPT_fmove_loop_stores:
       return "gcc/Optimize-Options.html#index-fmove-loop-stores";
     case OPT_fms_extensions:
       break;
     case OPT_fmudflap:
       break;
     case OPT_fmudflapir:
       break;
     case OPT_fmudflapth:
       break;
     case OPT_fmultiflags:
       return "gcc/Developer-Options.html#index-fmultiflags";
     case OPT_fname_mangling_version_:
       break;
     case OPT_fnew_abi:
       break;
     case OPT_fnew_inheriting_ctors:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fnew-inheriting-ctors";
     case OPT_fnew_ttp_matching:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fnew-ttp-matching";
     case OPT_fnext_runtime:
       return "gcc/Objective-C-and-Objective-C_002b_002b-Dialect-Options.html#index-fnext-runtime";
     case OPT_fnil:
       break;
     case OPT_fnil_receivers:
       return "gcc/Objective-C-and-Objective-C_002b_002b-Dialect-Options.html#index-fnil-receivers";
     case OPT_fno_inline_intrinsics:
       break;
     case OPT_fno_inline_stringops:
       break;
     case OPT_fnon_call_exceptions:
       return "gcc/Code-Gen-Options.html#index-fnon-call-exceptions";
     case OPT_fnonansi_builtins:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fno-nonansi-builtins";
     case OPT_fnonnull_objects:
       break;
     case OPT_fnothrow_opt:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fnothrow-opt";
     case OPT_fobjc_abi_version_:
       return "gcc/Objective-C-and-Objective-C_002b_002b-Dialect-Options.html#index-fobjc-abi-version";
     case OPT_fobjc_call_cxx_cdtors:
       return "gcc/Objective-C-and-Objective-C_002b_002b-Dialect-Options.html#index-fobjc-call-cxx-cdtors";
     case OPT_fobjc_direct_dispatch:
       return "gcc/Objective-C-and-Objective-C_002b_002b-Dialect-Options.html#index-fobjc-direct-dispatch";
     case OPT_fobjc_exceptions:
       return "gcc/Objective-C-and-Objective-C_002b_002b-Dialect-Options.html#index-fobjc-exceptions";
     case OPT_fobjc_gc:
       return "gcc/Objective-C-and-Objective-C_002b_002b-Dialect-Options.html#index-fobjc-gc";
     case OPT_fobjc_nilcheck:
       return "gcc/Objective-C-and-Objective-C_002b_002b-Dialect-Options.html#index-fobjc-nilcheck";
     case OPT_fobjc_sjlj_exceptions:
       break;
     case OPT_fobjc_std_objc1:
       break;
     case OPT_foffload_abi_host_opts_:
       break;
     case OPT_foffload_abi_:
       break;
     case OPT_foffload_options_:
       return "gcc/OpenMP-and-OpenACC-Options.html#index-foffload-options";
     case OPT_foffload_:
       return "gcc/OpenMP-and-OpenACC-Options.html#index-foffload";
     case OPT_fomit_frame_pointer:
       return "gcc/Optimize-Options.html#index-fomit-frame-pointer";
     case OPT_fonly_:
       if (lang_mask & CL_D)
         return "gdc/Runtime-Options.html#index-fonly";
       break;
     case OPT_fopenacc:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-fopenacc";
       return "gcc/OpenMP-and-OpenACC-Options.html#index-fopenacc";
     case OPT_fopenacc_dim_:
       return "gcc/OpenMP-and-OpenACC-Options.html#index-fopenacc-dim";
     case OPT_fopenmp:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-fopenmp";
       return "gcc/OpenMP-and-OpenACC-Options.html#index-fopenmp";
     case OPT_fopenmp_allocators:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-fopenmp-allocators";
       break;
     case OPT_fopenmp_simd:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-fopenmp-simd";
       return "gcc/OpenMP-and-OpenACC-Options.html#index-fopenmp-simd";
     case OPT_fopenmp_target_simd_clone_:
       return "gcc/OpenMP-and-OpenACC-Options.html#index-fopenmp-target-simd-clone";
     case OPT_foperator_names:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fno-operator-names";
     case OPT_fopt_info:
       return "gcc/Developer-Options.html#index-fopt-info";
     case OPT_fopt_info_:
       break;
     case OPT_foptimize_crc:
       return "gcc/Optimize-Options.html#index-foptimize-crc";
     case OPT_foptimize_sibling_calls:
       return "gcc/Optimize-Options.html#index-foptimize-sibling-calls";
     case OPT_foptimize_strlen:
       return "gcc/Optimize-Options.html#index-foptimize-strlen";
     case OPT_fpack_derived:
       if (lang_mask & CL_Fortran)
         return "gfortran/Code-Gen-Options.html#index-fpack-derived";
       break;
     case OPT_fpack_struct:
       return "gcc/Code-Gen-Options.html#index-fpack-struct";
     case OPT_fpack_struct_:
       return "gcc/Code-Gen-Options.html#index-fpack-struct";
     case OPT_fpad_source:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-fpad-source";
       break;
     case OPT_fpartial_inlining:
       return "gcc/Optimize-Options.html#index-fpartial-inlining";
     case OPT_fpatchable_function_entry_:
       return "gcc/Instrumentation-Options.html#index-fpatchable-function-entry";
     case OPT_fpcc_struct_return:
       break;
     case OPT_fpch_deps:
       return "gcc/Preprocessor-Options.html#index-fpch-deps";
     case OPT_fpch_preprocess:
       return "gcc/Preprocessor-Options.html#index-fpch-preprocess";
     case OPT_fpeel_loops:
       return "gcc/Optimize-Options.html#index-fpeel-loops";
     case OPT_fpeephole:
       return "gcc/Optimize-Options.html#index-fno-peephole";
     case OPT_fpeephole2:
       return "gcc/Optimize-Options.html#index-fno-peephole2";
     case OPT_fpermissive:
       return "gcc/Warning-Options.html#index-fpermissive";
     case OPT_fpermitted_flt_eval_methods_:
       return "gcc/C-Dialect-Options.html#index-fpermitted-flt-eval-methods";
     case OPT_fpic:
       return "gcc/Code-Gen-Options.html#index-fpic";
     case OPT_fpie:
       return "gcc/Code-Gen-Options.html#index-fpie";
     case OPT_fpim:
       break;
     case OPT_fpim2:
       break;
     case OPT_fpim3:
       break;
     case OPT_fpim4:
       break;
     case OPT_fplan9_extensions:
       break;
     case OPT_fplt:
       return "gcc/Code-Gen-Options.html#index-fno-plt";
     case OPT_fplugin_arg_:
       break;
     case OPT_fplugin_:
       return "gcc/Overall-Options.html#index-fplugin";
     case OPT_fpositive_mod_floor_div:
       break;
     case OPT_fpost_ipa_mem_report:
       return "gcc/Developer-Options.html#index-fpost-ipa-mem-report";
     case OPT_fpostconditions:
       if (lang_mask & CL_D)
         return "gdc/Runtime-Options.html#index-fno-postconditions";
       break;
     case OPT_fpre_include_:
       break;
     case OPT_fpre_ipa_mem_report:
       return "gcc/Developer-Options.html#index-fpre-ipa-mem-report";
     case OPT_fpreconditions:
       if (lang_mask & CL_D)
         return "gdc/Runtime-Options.html#index-fno-preconditions";
       break;
     case OPT_fpredictive_commoning:
       return "gcc/Optimize-Options.html#index-fpredictive-commoning";
     case OPT_fprefetch_loop_arrays:
       return "gcc/Optimize-Options.html#index-fprefetch-loop-arrays";
     case OPT_fpreprocessed:
       return "gcc/Preprocessor-Options.html#index-fpreprocessed";
     case OPT_fpretty_templates:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fno-pretty-templates";
     case OPT_fpreview_all:
       break;
     case OPT_fpreview_bitfields:
       break;
     case OPT_fpreview_dip1000:
       break;
     case OPT_fpreview_dip1008:
       break;
     case OPT_fpreview_dip1021:
       break;
     case OPT_fpreview_dtorfields:
       break;
     case OPT_fpreview_fieldwise:
       break;
     case OPT_fpreview_fixaliasthis:
       break;
     case OPT_fpreview_fiximmutableconv:
       break;
     case OPT_fpreview_in:
       break;
     case OPT_fpreview_inclusiveincontracts:
       break;
     case OPT_fpreview_nosharedaccess:
       break;
     case OPT_fpreview_rvaluerefparam:
       break;
     case OPT_fpreview_safer:
       break;
     case OPT_fpreview_systemvariables:
       break;
     case OPT_fprintf_return_value:
       return "gcc/Optimize-Options.html#index-fno-printf-return-value";
     case OPT_fprofile:
       break;
     case OPT_fprofile_abs_path:
       return "gcc/Instrumentation-Options.html#index-fprofile-abs-path";
     case OPT_fprofile_arcs:
       break;
     case OPT_fprofile_correction:
       return "gcc/Optimize-Options.html#index-fprofile-correction";
     case OPT_fprofile_dir_:
       return "gcc/Instrumentation-Options.html#index-fprofile-dir";
     case OPT_fprofile_exclude_files_:
       return "gcc/Instrumentation-Options.html#index-fprofile-exclude-files";
     case OPT_fprofile_filter_files_:
       return "gcc/Instrumentation-Options.html#index-fprofile-filter-files";
     case OPT_fprofile_generate:
       return "gcc/Instrumentation-Options.html#index-fprofile-generate";
     case OPT_fprofile_generate_:
       return "gcc/Instrumentation-Options.html#index-fprofile-generate";
     case OPT_fprofile_info_section:
       return "gcc/Instrumentation-Options.html#index-fprofile-info-section";
     case OPT_fprofile_info_section_:
       return "gcc/Instrumentation-Options.html#index-fprofile-info-section";
     case OPT_fprofile_note_:
       return "gcc/Instrumentation-Options.html#index-fprofile-note";
     case OPT_fprofile_partial_training:
       return "gcc/Optimize-Options.html#index-fprofile-partial-training";
     case OPT_fprofile_prefix_map_:
       return "gcc/Instrumentation-Options.html#index-fprofile-prefix-map";
     case OPT_fprofile_prefix_path_:
       return "gcc/Instrumentation-Options.html#index-fprofile-prefix-path";
     case OPT_fprofile_reorder_functions:
       return "gcc/Optimize-Options.html#index-fprofile-reorder-functions";
     case OPT_fprofile_report:
       return "gcc/Developer-Options.html#index-fprofile-report";
     case OPT_fprofile_reproducible_:
       return "gcc/Instrumentation-Options.html#index-fprofile-reproducible";
     case OPT_fprofile_update_:
       return "gcc/Instrumentation-Options.html#index-fprofile-update";
     case OPT_fprofile_use:
       return "gcc/Optimize-Options.html#index-fprofile-use";
     case OPT_fprofile_use_:
       return "gcc/Optimize-Options.html#index-fprofile-use";
     case OPT_fprofile_values:
       return "gcc/Optimize-Options.html#index-fprofile-values";
     case OPT_fprotect_parens:
       if (lang_mask & CL_Fortran)
         return "gfortran/Code-Gen-Options.html#index-fno-protect-parens";
       break;
     case OPT_fpthread:
       break;
     case OPT_fq:
       break;
     case OPT_frandom_seed:
       return "gcc/Developer-Options.html#index-frandom-seed";
     case OPT_frandom_seed_:
       return "gcc/Developer-Options.html#index-frandom-seed";
     case OPT_frange:
       break;
     case OPT_frange_check:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-frange-check";
       break;
     case OPT_frange_for_ext_temps:
       return "gcc/C_002b_002b-Dialect-Options.html#index-frange-for-ext-temps";
     case OPT_freal_4_real_10:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-freal-4-real-10";
       break;
     case OPT_freal_4_real_16:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-freal-4-real-16";
       break;
     case OPT_freal_4_real_8:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-freal-4-real-8";
       break;
     case OPT_freal_8_real_10:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-freal-8-real-10";
       break;
     case OPT_freal_8_real_16:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-freal-8-real-16";
       break;
     case OPT_freal_8_real_4:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-freal-8-real-4";
       break;
     case OPT_frealloc_lhs:
       if (lang_mask & CL_Fortran)
         return "gfortran/Code-Gen-Options.html#index-frealloc-lhs";
       break;
     case OPT_freciprocal_math:
       return "gcc/Optimize-Options.html#index-freciprocal-math";
     case OPT_frecord_gcc_switches:
       return "gcc/Code-Gen-Options.html#index-frecord-gcc-switches";
     case OPT_frecord_marker_4:
       break;
     case OPT_frecord_marker_8:
       break;
     case OPT_frecursive:
       if (lang_mask & CL_Fortran)
         return "gfortran/Code-Gen-Options.html#index-frecursive";
       break;
     case OPT_free:
       return "gcc/Optimize-Options.html#index-free-1";
     case OPT_frelease:
       if (lang_mask & CL_D)
         return "gdc/Runtime-Options.html#index-fno-release";
       break;
     case OPT_frename_registers:
       return "gcc/Optimize-Options.html#index-frename-registers";
     case OPT_freorder_blocks:
       return "gcc/Optimize-Options.html#index-freorder-blocks";
     case OPT_freorder_blocks_algorithm_:
       return "gcc/Optimize-Options.html#index-freorder-blocks-algorithm";
     case OPT_freorder_blocks_and_partition:
       return "gcc/Optimize-Options.html#index-freorder-blocks-and-partition";
     case OPT_freorder_functions:
       return "gcc/Optimize-Options.html#index-freorder-functions";
     case OPT_frepack_arrays:
       if (lang_mask & CL_Fortran)
         return "gfortran/Code-Gen-Options.html#index-frepack-arrays";
       break;
     case OPT_freplace_objc_classes:
       return "gcc/Objective-C-and-Objective-C_002b_002b-Dialect-Options.html#index-freplace-objc-classes";
     case OPT_frepo:
       break;
     case OPT_freport_bug:
       return "gcc/Developer-Options.html#index-freport-bug";
     case OPT_frequire_return_statement:
       break;
     case OPT_frerun_cse_after_loop:
       return "gcc/Optimize-Options.html#index-frerun-cse-after-loop";
     case OPT_freschedule_modulo_scheduled_loops:
       return "gcc/Optimize-Options.html#index-freschedule-modulo-scheduled-loops";
     case OPT_fresolution_:
       break;
     case OPT_freturn:
       break;
     case OPT_frevert_all:
       break;
     case OPT_frevert_dip1000:
       break;
     case OPT_frevert_dtorfields:
       break;
     case OPT_frevert_intpromote:
       break;
     case OPT_frounding_math:
       return "gcc/Optimize-Options.html#index-frounding-math";
     case OPT_frtti:
       if (lang_mask & CL_D)
         return "gdc/Runtime-Options.html#index-fno-rtti";
       return "gcc/C_002b_002b-Dialect-Options.html#index-fno-rtti";
     case OPT_fruntime_modules_:
       break;
     case OPT_frust_borrowcheck:
       break;
     case OPT_frust_cfg_:
       break;
     case OPT_frust_compile_until_:
       break;
     case OPT_frust_crate_type_:
       break;
     case OPT_frust_crate_:
       break;
     case OPT_frust_debug:
       break;
     case OPT_frust_dump_:
       break;
     case OPT_frust_edition_:
       break;
     case OPT_frust_embed_metadata:
       break;
     case OPT_frust_extern_:
       break;
     case OPT_frust_incomplete_and_experimental_compiler_do_not_use:
       break;
     case OPT_frust_mangling_:
       break;
     case OPT_frust_max_recursion_depth_:
       break;
     case OPT_frust_metadata_output_:
       break;
     case OPT_frust_name_resolution_2_0:
       break;
     case OPT_fsanitize_address_use_after_scope:
       return "gcc/Instrumentation-Options.html#index-fsanitize-address-use-after-scope";
     case OPT_fsanitize_coverage_:
       break;
     case OPT_fsanitize_recover:
       return "gcc/Instrumentation-Options.html#index-fno-sanitize-recover";
     case OPT_fsanitize_recover_:
       return "gcc/Instrumentation-Options.html#index-fno-sanitize-recover";
     case OPT_fsanitize_sections_:
       return "gcc/Instrumentation-Options.html#index-fsanitize-sections";
     case OPT_fsanitize_trap:
       return "gcc/Instrumentation-Options.html#index-fno-sanitize-trap";
     case OPT_fsanitize_trap_:
       return "gcc/Instrumentation-Options.html#index-fno-sanitize-trap";
     case OPT_fsanitize_:
       break;
     case OPT_fsave_mixins_:
       if (lang_mask & CL_D)
         return "gdc/Code-Generation.html#index-fsave-mixins";
       break;
     case OPT_fsave_optimization_record:
       return "gcc/Developer-Options.html#index-fsave-optimization-record";
     case OPT_fscaffold_c:
       break;
     case OPT_fscaffold_c__:
       break;
     case OPT_fscaffold_dynamic:
       break;
     case OPT_fscaffold_main:
       break;
     case OPT_fscaffold_static:
       break;
     case OPT_fsched_critical_path_heuristic:
       return "gcc/Optimize-Options.html#index-fsched-critical-path-heuristic";
     case OPT_fsched_dep_count_heuristic:
       return "gcc/Optimize-Options.html#index-fsched-dep-count-heuristic";
     case OPT_fsched_group_heuristic:
       return "gcc/Optimize-Options.html#index-fsched-group-heuristic";
     case OPT_fsched_interblock:
       return "gcc/Optimize-Options.html#index-fno-sched-interblock";
     case OPT_fsched_last_insn_heuristic:
       return "gcc/Optimize-Options.html#index-fsched-last-insn-heuristic";
     case OPT_fsched_pressure:
       return "gcc/Optimize-Options.html#index-fsched-pressure";
     case OPT_fsched_rank_heuristic:
       return "gcc/Optimize-Options.html#index-fsched-rank-heuristic";
     case OPT_fsched_spec:
       return "gcc/Optimize-Options.html#index-fno-sched-spec";
     case OPT_fsched_spec_insn_heuristic:
       return "gcc/Optimize-Options.html#index-fsched-spec-insn-heuristic";
     case OPT_fsched_spec_load:
       return "gcc/Optimize-Options.html#index-fsched-spec-load";
     case OPT_fsched_spec_load_dangerous:
       return "gcc/Optimize-Options.html#index-fsched-spec-load-dangerous";
     case OPT_fsched_stalled_insns:
       return "gcc/Optimize-Options.html#index-fsched-stalled-insns";
     case OPT_fsched_stalled_insns_dep:
       return "gcc/Optimize-Options.html#index-fsched-stalled-insns-dep";
     case OPT_fsched_stalled_insns_dep_:
       return "gcc/Optimize-Options.html#index-fsched-stalled-insns-dep";
     case OPT_fsched_stalled_insns_:
       return "gcc/Optimize-Options.html#index-fsched-stalled-insns";
     case OPT_fsched_verbose_:
       return "gcc/Developer-Options.html#index-fsched-verbose";
     case OPT_fsched2_use_superblocks:
       return "gcc/Optimize-Options.html#index-fsched2-use-superblocks";
     case OPT_fschedule_fusion:
       return "gcc/Optimize-Options.html#index-fschedule-fusion";
     case OPT_fschedule_insns:
       return "gcc/Optimize-Options.html#index-fschedule-insns";
     case OPT_fschedule_insns2:
       return "gcc/Optimize-Options.html#index-fschedule-insns2";
     case OPT_fsearch_include_path:
       return "gcc/Preprocessor-Options.html#index-fsearch-include-path";
     case OPT_fsearch_include_path_:
       return "gcc/Preprocessor-Options.html#index-fsearch-include-path";
     case OPT_fsecond_underscore:
       if (lang_mask & CL_Fortran)
         return "gfortran/Code-Gen-Options.html#index-fsecond-underscore";
       break;
     case OPT_fsection_anchors:
       return "gcc/Optimize-Options.html#index-fsection-anchors";
     case OPT_fsel_sched_pipelining:
       return "gcc/Optimize-Options.html#index-fsel-sched-pipelining";
     case OPT_fsel_sched_pipelining_outer_loops:
       return "gcc/Optimize-Options.html#index-fsel-sched-pipelining-outer-loops";
     case OPT_fsel_sched_reschedule_pipelined:
       break;
     case OPT_fselective_scheduling:
       return "gcc/Optimize-Options.html#index-fselective-scheduling";
     case OPT_fselective_scheduling2:
       return "gcc/Optimize-Options.html#index-fselective-scheduling2";
     case OPT_fself_test_:
       break;
     case OPT_fsemantic_interposition:
       return "gcc/Optimize-Options.html#index-fsemantic-interposition";
     case OPT_fshared:
       break;
     case OPT_fshort_enums:
       if (lang_mask & CL_Fortran)
         return "gfortran/Code-Gen-Options.html#index-fshort-enums";
       break;
     case OPT_fshort_wchar:
       return "gcc/Code-Gen-Options.html#index-fshort-wchar";
     case OPT_fshow_column:
       return "gcc/Diagnostic-Message-Formatting-Options.html#index-fno-show-column";
     case OPT_fshrink_wrap:
       return "gcc/Optimize-Options.html#index-fshrink-wrap";
     case OPT_fshrink_wrap_separate:
       return "gcc/Optimize-Options.html#index-fshrink-wrap-separate";
     case OPT_fsign_zero:
       if (lang_mask & CL_Fortran)
         return "gfortran/Runtime-Options.html#index-fsign-zero";
       break;
     case OPT_fsignaling_nans:
       return "gcc/Optimize-Options.html#index-fsignaling-nans";
     case OPT_fsigned_bitfields:
       break;
     case OPT_fsigned_char:
       break;
     case OPT_fsigned_zeros:
       return "gcc/Optimize-Options.html#index-fno-signed-zeros";
     case OPT_fsimd_cost_model_:
       return "gcc/Optimize-Options.html#index-fsimd-cost-model";
     case OPT_fsingle_precision_constant:
       return "gcc/Optimize-Options.html#index-fsingle-precision-constant";
     case OPT_fsized_deallocation:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fsized-deallocation";
     case OPT_fsoft_check_all:
       break;
     case OPT_fsources:
       break;
     case OPT_fsplit_ivs_in_unroller:
       return "gcc/Optimize-Options.html#index-fsplit-ivs-in-unroller";
     case OPT_fsplit_loops:
       return "gcc/Optimize-Options.html#index-fsplit-loops";
     case OPT_fsplit_paths:
       return "gcc/Optimize-Options.html#index-fsplit-paths";
     case OPT_fsplit_stack:
       return "gcc/Instrumentation-Options.html#index-fsplit-stack";
     case OPT_fsplit_wide_types:
       return "gcc/Optimize-Options.html#index-fsplit-wide-types";
     case OPT_fsplit_wide_types_early:
       return "gcc/Optimize-Options.html#index-fsplit-wide-types-early";
     case OPT_fsquangle:
       break;
     case OPT_fssa_backprop:
       return "gcc/Optimize-Options.html#index-fssa-backprop";
     case OPT_fssa_phiopt:
       return "gcc/Optimize-Options.html#index-fssa-phiopt";
     case OPT_fsso_struct_:
       return "gcc/C-Dialect-Options.html#index-fsso-struct";
     case OPT_fstack_arrays:
       if (lang_mask & CL_Fortran)
         return "gfortran/Code-Gen-Options.html#index-fstack-arrays";
       break;
     case OPT_fstack_check_:
       return "gcc/Instrumentation-Options.html#index-fstack-check";
     case OPT_fstack_clash_protection:
       return "gcc/Instrumentation-Options.html#index-fstack-clash-protection";
     case OPT_fstack_limit:
       return "gcc/Instrumentation-Options.html#index-fno-stack-limit";
     case OPT_fstack_limit_register_:
       return "gcc/Instrumentation-Options.html#index-fstack-limit-register";
     case OPT_fstack_limit_symbol_:
       return "gcc/Instrumentation-Options.html#index-fstack-limit-symbol";
     case OPT_fstack_protector:
       return "gcc/Instrumentation-Options.html#index-fstack-protector";
     case OPT_fstack_protector_all:
       return "gcc/Instrumentation-Options.html#index-fstack-protector-all";
     case OPT_fstack_protector_explicit:
       return "gcc/Instrumentation-Options.html#index-fstack-protector-explicit";
     case OPT_fstack_protector_strong:
       return "gcc/Instrumentation-Options.html#index-fstack-protector-strong";
     case OPT_fstack_reuse_:
       break;
     case OPT_fstack_usage:
       return "gcc/Developer-Options.html#index-fstack-usage";
     case OPT_fstats:
       return "gcc/Developer-Options.html#index-fstats";
     case OPT_fstdarg_opt:
       return "gcc/Optimize-Options.html#index-fstdarg-opt";
     case OPT_fstore_merging:
       return "gcc/Optimize-Options.html#index-fstore-merging";
     case OPT_fstrict_aliasing:
       return "gcc/Optimize-Options.html#index-fstrict-aliasing";
     case OPT_fstrict_enums:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fstrict-enums";
     case OPT_fstrict_flex_arrays_:
       return "gcc/C-Dialect-Options.html#index-fno-strict-flex-arrays";
     case OPT_fstrict_overflow:
       return "gcc/Code-Gen-Options.html#index-fstrict-overflow";
     case OPT_fstrict_prototype:
       break;
     case OPT_fstrict_volatile_bitfields:
       return "gcc/Code-Gen-Options.html#index-fstrict-volatile-bitfields";
     case OPT_fstrong_eval_order_:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fstrong-eval-order";
     case OPT_fstrub_all:
       return "gcc/Instrumentation-Options.html#index-fstrub_003dall";
     case OPT_fstrub_at_calls:
       return "gcc/Instrumentation-Options.html#index-fstrub_003dat-calls";
     case OPT_fstrub_disable:
       return "gcc/Instrumentation-Options.html#index-fstrub_003ddisable";
     case OPT_fstrub_internal:
       return "gcc/Instrumentation-Options.html#index-fstrub_003dinternal";
     case OPT_fstrub_relaxed:
       return "gcc/Instrumentation-Options.html#index-fstrub_003drelaxed";
     case OPT_fstrub_strict:
       return "gcc/Instrumentation-Options.html#index-fstrub_003dstrict";
     case OPT_fswig:
       break;
     case OPT_fswitch_errors:
       if (lang_mask & CL_D)
         return "gdc/Runtime-Options.html#index-fno-switch-errors";
       break;
     case OPT_fsync_libcalls:
       return "gcc/Code-Gen-Options.html#index-fsync-libcalls";
     case OPT_fsyntax_only:
       if (lang_mask & CL_D)
         return "gdc/Warnings.html#index-fno-syntax-only";
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-fsyntax-only";
       return "gcc/Warning-Options.html#index-fsyntax-only";
     case OPT_ftabstop_:
       return "gcc/Preprocessor-Options.html#index-ftabstop";
     case OPT_ftail_call_workaround_:
       break;
     case OPT_ftemplate_backtrace_limit_:
       return "gcc/C_002b_002b-Dialect-Options.html#index-ftemplate-backtrace-limit";
     case OPT_ftemplate_depth_:
       return "gcc/C_002b_002b-Dialect-Options.html#index-ftemplate-depth";
     case OPT_ftest_coverage:
       return "gcc/Instrumentation-Options.html#index-ftest-coverage";
     case OPT_ftest_forall_temp:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-ftest-forall-temp";
       break;
     case OPT_fthis_is_variable:
       break;
     case OPT_fthread_jumps:
       return "gcc/Optimize-Options.html#index-fthread-jumps";
     case OPT_fthreadsafe_statics:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fno-threadsafe-statics";
     case OPT_ftime_report:
       return "gcc/Developer-Options.html#index-ftime-report";
     case OPT_ftime_report_details:
       return "gcc/Developer-Options.html#index-ftime-report-details";
     case OPT_ftls_model_:
       return "gcc/Code-Gen-Options.html#index-ftls-model";
     case OPT_ftoplevel_reorder:
       return "gcc/Optimize-Options.html#index-fno-toplevel-reorder";
     case OPT_ftracer:
       return "gcc/Optimize-Options.html#index-ftracer";
     case OPT_ftrack_macro_expansion:
       return "gcc/Preprocessor-Options.html#index-ftrack-macro-expansion";
     case OPT_ftrack_macro_expansion_:
       return "gcc/Preprocessor-Options.html#index-ftrack-macro-expansion";
     case OPT_ftrampoline_impl_:
       return "gcc/Code-Gen-Options.html#index-ftrampoline-impl";
     case OPT_ftrampolines:
       return "gcc/Code-Gen-Options.html#index-ftrampolines";
     case OPT_ftransition_all:
       break;
     case OPT_ftransition_field:
       break;
     case OPT_ftransition_in:
       break;
     case OPT_ftransition_nogc:
       break;
     case OPT_ftransition_templates:
       break;
     case OPT_ftransition_tls:
       break;
     case OPT_ftrapping_math:
       return "gcc/Optimize-Options.html#index-fno-trapping-math";
     case OPT_ftrapv:
       return "gcc/Code-Gen-Options.html#index-ftrapv";
     case OPT_ftree_bit_ccp:
       return "gcc/Optimize-Options.html#index-ftree-bit-ccp";
     case OPT_ftree_builtin_call_dce:
       return "gcc/Optimize-Options.html#index-ftree-builtin-call-dce";
     case OPT_ftree_ccp:
       return "gcc/Optimize-Options.html#index-ftree-ccp";
     case OPT_ftree_ch:
       return "gcc/Optimize-Options.html#index-ftree-ch";
     case OPT_ftree_coalesce_vars:
       return "gcc/Optimize-Options.html#index-ftree-coalesce-vars";
     case OPT_ftree_copy_prop:
       return "gcc/Optimize-Options.html#index-ftree-copy-prop";
     case OPT_ftree_cselim:
       break;
     case OPT_ftree_dce:
       return "gcc/Optimize-Options.html#index-ftree-dce";
     case OPT_ftree_dominator_opts:
       return "gcc/Optimize-Options.html#index-ftree-dominator-opts";
     case OPT_ftree_dse:
       return "gcc/Optimize-Options.html#index-ftree-dse";
     case OPT_ftree_forwprop:
       return "gcc/Optimize-Options.html#index-ftree-forwprop";
     case OPT_ftree_fre:
       return "gcc/Optimize-Options.html#index-ftree-fre";
     case OPT_ftree_loop_distribute_patterns:
       return "gcc/Optimize-Options.html#index-ftree-loop-distribute-patterns";
     case OPT_ftree_loop_distribution:
       return "gcc/Optimize-Options.html#index-ftree-loop-distribution";
     case OPT_ftree_loop_if_convert:
       return "gcc/Optimize-Options.html#index-ftree-loop-if-convert";
     case OPT_ftree_loop_im:
       return "gcc/Optimize-Options.html#index-ftree-loop-im";
     case OPT_ftree_loop_ivcanon:
       return "gcc/Optimize-Options.html#index-ftree-loop-ivcanon";
     case OPT_ftree_loop_optimize:
       return "gcc/Optimize-Options.html#index-ftree-loop-optimize";
     case OPT_ftree_loop_vectorize:
       return "gcc/Optimize-Options.html#index-ftree-loop-vectorize";
     case OPT_ftree_lrs:
       break;
     case OPT_ftree_parallelize_loops_:
       return "gcc/Optimize-Options.html#index-ftree-parallelize-loops";
     case OPT_ftree_partial_pre:
       return "gcc/Optimize-Options.html#index-ftree-partial-pre";
     case OPT_ftree_phiprop:
       return "gcc/Optimize-Options.html#index-ftree-phiprop";
     case OPT_ftree_pre:
       return "gcc/Optimize-Options.html#index-ftree-pre";
     case OPT_ftree_pta:
       return "gcc/Optimize-Options.html#index-ftree-pta";
     case OPT_ftree_reassoc:
       return "gcc/Optimize-Options.html#index-ftree-reassoc";
     case OPT_ftree_scev_cprop:
       return "gcc/Optimize-Options.html#index-ftree-scev-cprop";
     case OPT_ftree_sink:
       return "gcc/Optimize-Options.html#index-ftree-sink";
     case OPT_ftree_slp_vectorize:
       return "gcc/Optimize-Options.html#index-ftree-slp-vectorize";
     case OPT_ftree_slsr:
       return "gcc/Optimize-Options.html#index-ftree-slsr";
     case OPT_ftree_sra:
       return "gcc/Optimize-Options.html#index-ftree-sra";
     case OPT_ftree_switch_conversion:
       return "gcc/Optimize-Options.html#index-ftree-switch-conversion";
     case OPT_ftree_tail_merge:
       return "gcc/Optimize-Options.html#index-ftree-tail-merge";
     case OPT_ftree_ter:
       return "gcc/Optimize-Options.html#index-ftree-ter";
     case OPT_ftree_vectorize:
       return "gcc/Optimize-Options.html#index-ftree-vectorize";
     case OPT_ftree_vrp:
       return "gcc/Optimize-Options.html#index-ftree-vrp";
     case OPT_ftrivial_auto_var_init_:
       return "gcc/Optimize-Options.html#index-ftrivial-auto-var-init";
     case OPT_funbounded_by_reference:
       break;
     case OPT_funconstrained_commons:
       return "gcc/Optimize-Options.html#index-funconstrained-commons";
     case OPT_funderscoring:
       if (lang_mask & CL_Fortran)
         return "gfortran/Code-Gen-Options.html#index-fno-underscoring";
       break;
     case OPT_funit_at_a_time:
       return "gcc/Optimize-Options.html#index-funit-at-a-time";
     case OPT_funittest:
       if (lang_mask & CL_D)
         return "gdc/Runtime-Options.html#index-fno-unittest";
       break;
     case OPT_funreachable_traps:
       return "gcc/Optimize-Options.html#index-funreachable-traps";
     case OPT_funroll_all_loops:
       return "gcc/Optimize-Options.html#index-funroll-all-loops";
     case OPT_funroll_completely_grow_size:
       break;
     case OPT_funroll_loops:
       return "gcc/Optimize-Options.html#index-funroll-loops";
     case OPT_funsafe_math_optimizations:
       return "gcc/Optimize-Options.html#index-funsafe-math-optimizations";
     case OPT_funsigned:
       if (lang_mask & CL_Fortran)
         return "gfortran/Fortran-Dialect-Options.html#index-funsigned";
       break;
     case OPT_funsigned_bitfields:
       break;
     case OPT_funsigned_char:
       break;
     case OPT_funswitch_loops:
       return "gcc/Optimize-Options.html#index-funswitch-loops";
     case OPT_funwind_tables:
       return "gcc/Code-Gen-Options.html#index-funwind-tables";
     case OPT_fuse_cxa_atexit:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fuse-cxa-atexit";
     case OPT_fuse_cxa_get_exception_ptr:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fno-use-cxa-get-exception-ptr";
     case OPT_fuse_ld_bfd:
       return "gcc/Link-Options.html#index-fuse-ld_003dbfd";
     case OPT_fuse_ld_gold:
       return "gcc/Link-Options.html#index-fuse-ld_003dgold";
     case OPT_fuse_ld_lld:
       return "gcc/Link-Options.html#index-fuse-ld_003dlld";
     case OPT_fuse_ld_mold:
       return "gcc/Link-Options.html#index-fuse-ld_003dmold";
     case OPT_fuse_linker_plugin:
       return "gcc/Optimize-Options.html#index-fuse-linker-plugin";
     case OPT_fuse_list_:
       break;
     case OPT_fvar_tracking:
       return "gcc/Debugging-Options.html#index-fvar-tracking";
     case OPT_fvar_tracking_assignments:
       return "gcc/Debugging-Options.html#index-fno-var-tracking-assignments";
     case OPT_fvar_tracking_assignments_toggle:
       return "gcc/Developer-Options.html#index-fno-var-tracking-assignments-toggle";
     case OPT_fvar_tracking_uninit:
       break;
     case OPT_fvariable_expansion_in_unroller:
       return "gcc/Optimize-Options.html#index-fvariable-expansion-in-unroller";
     case OPT_fvect_cost_model_:
       return "gcc/Optimize-Options.html#index-fvect-cost-model";
     case OPT_fverbose_asm:
       return "gcc/Code-Gen-Options.html#index-fverbose-asm";
     case OPT_fversion_loops_for_strides:
       return "gcc/Optimize-Options.html#index-fversion-loops-for-strides";
     case OPT_fversion_:
       if (lang_mask & CL_D)
         return "gdc/Runtime-Options.html#index-fversion";
       break;
     case OPT_fvisibility_inlines_hidden:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fvisibility-inlines-hidden";
     case OPT_fvisibility_ms_compat:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fvisibility-ms-compat";
     case OPT_fvisibility_:
       return "gcc/Code-Gen-Options.html#index-fvisibility";
     case OPT_fvpt:
       return "gcc/Optimize-Options.html#index-fvpt";
     case OPT_fvtable_gc:
       break;
     case OPT_fvtable_thunks:
       break;
     case OPT_fvtable_verify_:
       return "gcc/Instrumentation-Options.html#index-fvtable-verify";
     case OPT_fvtv_counts:
       return "gcc/Instrumentation-Options.html#index-fvtv-counts";
     case OPT_fvtv_debug:
       return "gcc/Instrumentation-Options.html#index-fvtv-debug";
     case OPT_fweak:
       return "gcc/C_002b_002b-Dialect-Options.html#index-fno-weak";
     case OPT_fweak_templates:
       if (lang_mask & CL_D)
         return "gdc/Runtime-Options.html#index-fno-weak-templates";
       break;
     case OPT_fweb:
       return "gcc/Optimize-Options.html#index-fweb";
     case OPT_fwhole_program:
       return "gcc/Optimize-Options.html#index-fwhole-program";
     case OPT_fwholediv:
       break;
     case OPT_fwholevalue:
       break;
     case OPT_fwide_exec_charset_:
       return "gcc/Preprocessor-Options.html#index-fwide-exec-charset";
     case OPT_fworking_directory:
       if (lang_mask & CL_Fortran)
         return "gfortran/Preprocessing-Options.html#index-fworking-directory";
       return "gcc/Preprocessor-Options.html#index-fno-working-directory";
     case OPT_fwpa:
       break;
     case OPT_fwpa_:
       break;
     case OPT_fwrapv:
       return "gcc/Code-Gen-Options.html#index-fwrapv";
     case OPT_fwrapv_pointer:
       return "gcc/Code-Gen-Options.html#index-fwrapv-pointer";
     case OPT_fxref:
       break;
     case OPT_fzero_call_used_regs_:
       return "gcc/Optimize-Options.html#index-fzero-call-used-regs";
     case OPT_fzero_init_padding_bits_:
       break;
     case OPT_fzero_initialized_in_bss:
       return "gcc/Optimize-Options.html#index-fno-zero-initialized-in-bss";
     case OPT_fzero_link:
       return "gcc/Objective-C-and-Objective-C_002b_002b-Dialect-Options.html#index-fzero-link";
     case OPT_g:
       return "gcc/Debugging-Options.html#index-g";
     case OPT_gant:
       break;
     case OPT_gas_loc_support:
       return "gcc/Debugging-Options.html#index-gas-loc-support";
     case OPT_gas_locview_support:
       return "gcc/Debugging-Options.html#index-gas-locview-support";
     case OPT_gbtf:
       return "gcc/Debugging-Options.html#index-gbtf";
     case OPT_gcodeview:
       return "gcc/Debugging-Options.html#index-gcodeview";
     case OPT_gcoff:
       break;
     case OPT_gcoff1:
       break;
     case OPT_gcoff2:
       break;
     case OPT_gcoff3:
       break;
     case OPT_gcolumn_info:
       return "gcc/Debugging-Options.html#index-gcolumn-info";
     case OPT_gctf:
       return "gcc/Debugging-Options.html#index-gctf";
     case OPT_gdescribe_dies:
       return "gcc/Debugging-Options.html#index-gdescribe-dies";
     case OPT_gdwarf:
       return "gcc/Debugging-Options.html#index-gdwarf";
     case OPT_gdwarf_:
       break;
     case OPT_gdwarf32:
       return "gcc/Debugging-Options.html#index-gdwarf32";
     case OPT_gdwarf64:
       return "gcc/Debugging-Options.html#index-gdwarf64";
     case OPT_gen_decls:
       return "gcc/Objective-C-and-Objective-C_002b_002b-Dialect-Options.html#index-gen-decls";
     case OPT_ggdb:
       return "gcc/Debugging-Options.html#index-ggdb";
     case OPT_ggnu_pubnames:
       return "gcc/Debugging-Options.html#index-ggnu-pubnames";
     case OPT_gimple_stats:
       break;
     case OPT_ginline_points:
       return "gcc/Debugging-Options.html#index-ginline-points";
     case OPT_ginternal_reset_location_views:
       return "gcc/Debugging-Options.html#index-ginternal-reset-location-views";
     case OPT_gnat:
       break;
     case OPT_gnatO:
       break;
     case OPT_gno_:
       break;
     case OPT_gno_pubnames:
       break;
     case OPT_gprune_btf:
       return "gcc/Debugging-Options.html#index-gprune-btf";
     case OPT_gpubnames:
       return "gcc/Debugging-Options.html#index-gpubnames";
     case OPT_grecord_gcc_switches:
       return "gcc/Debugging-Options.html#index-grecord-gcc-switches";
     case OPT_gsplit_dwarf:
       return "gcc/Debugging-Options.html#index-gsplit-dwarf";
     case OPT_gstabs:
       break;
     case OPT_gstabs_:
       break;
     case OPT_gstatement_frontiers:
       return "gcc/Debugging-Options.html#index-gstatement-frontiers";
     case OPT_gstrict_dwarf:
       return "gcc/Debugging-Options.html#index-gstrict-dwarf";
     case OPT_gtoggle:
       return "gcc/Developer-Options.html#index-gtoggle";
     case OPT_gvariable_location_views:
       return "gcc/Debugging-Options.html#index-gvariable-location-views";
     case OPT_gvariable_location_views_incompat5:
       return "gcc/Debugging-Options.html#index-gvariable-location-views_003dincompat5";
     case OPT_gvms:
       return "gcc/Debugging-Options.html#index-gvms";
     case OPT_gxcoff:
       break;
     case OPT_gxcoff_:
       break;
     case OPT_gz:
       return "gcc/Debugging-Options.html#index-gz";
     case OPT_gz_:
       return "gcc/Debugging-Options.html#index-gz";
     case OPT_h:
       break;
     case OPT_help:
       return "gcc/Overall-Options.html#index-help";
     case OPT_idirafter:
       if (lang_mask & CL_Fortran)
         return "gfortran/Preprocessing-Options.html#index-idirafter";
       return "gcc/Directory-Options.html#index-idirafter";
     case OPT_imacros:
       return "gcc/Preprocessor-Options.html#index-imacros";
     case OPT_imultiarch:
       break;
     case OPT_imultilib:
       if (lang_mask & CL_D)
         return "gdc/Directory-Options.html#index-imultilib";
       if (lang_mask & CL_Fortran)
         return "gfortran/Preprocessing-Options.html#index-imultilib";
       return "gcc/Directory-Options.html#index-imultilib";
     case OPT_include:
       return "gcc/Preprocessor-Options.html#index-include";
     case OPT_iplugindir_:
       return "gcc/Directory-Options.html#index-iplugindir_003d";
     case OPT_iprefix:
       if (lang_mask & CL_D)
         return "gdc/Directory-Options.html#index-iprefix";
       if (lang_mask & CL_Fortran)
         return "gfortran/Preprocessing-Options.html#index-iprefix";
       return "gcc/Directory-Options.html#index-iprefix";
     case OPT_iquote:
       if (lang_mask & CL_Fortran)
         return "gfortran/Preprocessing-Options.html#index-iquote";
       return "gcc/Directory-Options.html#index-iquote";
     case OPT_isysroot:
       if (lang_mask & CL_Fortran)
         return "gfortran/Preprocessing-Options.html#index-isysroot";
       return "gcc/Directory-Options.html#index-isysroot";
     case OPT_isystem:
       if (lang_mask & CL_Fortran)
         return "gfortran/Preprocessing-Options.html#index-isystem";
       return "gcc/Directory-Options.html#index-isystem";
     case OPT_iwithprefix:
       return "gcc/Directory-Options.html#index-iwithprefix";
     case OPT_iwithprefixbefore:
       return "gcc/Directory-Options.html#index-iwithprefixbefore";
     case OPT_k8:
       break;
     case OPT_l:
       return "gcc/Link-Options.html#index-l";
     case OPT_lang_asm:
       break;
     case OPT_list:
       break;
     case OPT_m128bit_long_double:
       return "gcc/x86-Options.html#index-m128bit-long-double";
     case OPT_m16:
       return "gcc/x86-Options.html#index-m16";
     case OPT_m32:
       return "gcc/x86-Options.html#index-m32-2";
     case OPT_m3dnow:
       return "gcc/x86-Options.html#index-m3dnow";
     case OPT_m3dnowa:
       return "gcc/x86-Options.html#index-m3dnowa";
     case OPT_m64:
       return "gcc/x86-Options.html#index-m64-4";
     case OPT_m80387:
       return "gcc/x86-Options.html#index-m80387";
     case OPT_m8bit_idiv:
       return "gcc/x86-Options.html#index-m8bit-idiv";
     case OPT_m96bit_long_double:
       return "gcc/x86-Options.html#index-m96bit-long-double";
     case OPT_mabi_:
       return "gcc/x86-Options.html#index-mabi-7";
     case OPT_mabm:
       return "gcc/x86-Options.html#index-mabm";
     case OPT_maccumulate_outgoing_args:
       return "gcc/x86-Options.html#index-maccumulate-outgoing-args-1";
     case OPT_maddress_mode_:
       break;
     case OPT_madx:
       return "gcc/x86-Options.html#index-madx";
     case OPT_maes:
       return "gcc/x86-Options.html#index-maes";
     case OPT_malign_data_:
       return "gcc/x86-Options.html#index-malign-data-1";
     case OPT_malign_double:
       return "gcc/x86-Options.html#index-malign-double";
     case OPT_malign_functions_:
       break;
     case OPT_malign_jumps_:
       break;
     case OPT_malign_loops_:
       break;
     case OPT_malign_stringops:
       return "gcc/x86-Options.html#index-malign-stringops";
     case OPT_mamx_avx512:
       return "gcc/x86-Options.html#index-mamx-avx512";
     case OPT_mamx_bf16:
       return "gcc/x86-Options.html#index-mamx-bf16";
     case OPT_mamx_complex:
       return "gcc/x86-Options.html#index-mamx-complex";
     case OPT_mamx_fp16:
       return "gcc/x86-Options.html#index-mamx-fp16";
     case OPT_mamx_fp8:
       return "gcc/x86-Options.html#index-mamx-fp8";
     case OPT_mamx_int8:
       return "gcc/x86-Options.html#index-mamx-int8";
     case OPT_mamx_movrs:
       return "gcc/x86-Options.html#index-mamx-movrs";
     case OPT_mamx_tf32:
       return "gcc/x86-Options.html#index-mamx-tf32";
     case OPT_mamx_tile:
       return "gcc/x86-Options.html#index-mamx-tile";
     case OPT_mamx_transpose:
       return "gcc/x86-Options.html#index-mamx-transpose";
     case OPT_mandroid:
       return "gcc/GNU_002fLinux-Options.html#index-mandroid";
     case OPT_mapx_features_:
       break;
     case OPT_mapx_inline_asm_use_gpr32:
       return "gcc/x86-Options.html#index-mapx-inline-asm-use-gpr32";
     case OPT_mapxf:
       return "gcc/x86-Options.html#index-mapxf";
     case OPT_march_:
       return "gcc/x86-Options.html#index-march-15";
     case OPT_masm_:
       break;
     case OPT_mavx:
       return "gcc/x86-Options.html#index-mavx";
     case OPT_mavx10_1_256:
       return "gcc/x86-Options.html#index-mavx10_002e1-256";
     case OPT_mavx10_1_512:
       return "gcc/x86-Options.html#index-mavx10_002e1-512";
     case OPT_mavx10_2:
       return "gcc/x86-Options.html#index-mavx10_002e2";
     case OPT_mavx10_2_256:
       return "gcc/x86-Options.html#index-mavx10_002e2-256";
     case OPT_mavx2:
       return "gcc/x86-Options.html#index-mavx2";
     case OPT_mavx256_split_unaligned_load:
       return "gcc/x86-Options.html#index-mavx256-split-unaligned-load";
     case OPT_mavx256_split_unaligned_store:
       return "gcc/x86-Options.html#index-mavx256-split-unaligned-store";
     case OPT_mavx512bf16:
       return "gcc/x86-Options.html#index-mavx512bf16";
     case OPT_mavx512bitalg:
       return "gcc/x86-Options.html#index-mavx512bitalg";
     case OPT_mavx512bw:
       return "gcc/x86-Options.html#index-mavx512bw";
     case OPT_mavx512cd:
       return "gcc/x86-Options.html#index-mavx512cd";
     case OPT_mavx512dq:
       return "gcc/x86-Options.html#index-mavx512dq";
     case OPT_mavx512f:
       return "gcc/x86-Options.html#index-mavx512f";
     case OPT_mavx512fp16:
       return "gcc/x86-Options.html#index-mavx512fp16";
     case OPT_mavx512ifma:
       return "gcc/x86-Options.html#index-mavx512ifma";
     case OPT_mavx512vbmi:
       return "gcc/x86-Options.html#index-mavx512vbmi";
     case OPT_mavx512vbmi2:
       return "gcc/x86-Options.html#index-mavx512vbmi2";
     case OPT_mavx512vl:
       return "gcc/x86-Options.html#index-mavx512vl";
     case OPT_mavx512vnni:
       return "gcc/x86-Options.html#index-mavx512vnni";
     case OPT_mavx512vp2intersect:
       return "gcc/x86-Options.html#index-mavx512vp2intersect";
     case OPT_mavx512vpopcntdq:
       return "gcc/x86-Options.html#index-mavx512vpopcntdq";
     case OPT_mavxifma:
       return "gcc/x86-Options.html#index-mavxifma";
     case OPT_mavxneconvert:
       return "gcc/x86-Options.html#index-mavxneconvert";
     case OPT_mavxvnni:
       return "gcc/x86-Options.html#index-mavxvnni";
     case OPT_mavxvnniint16:
       return "gcc/x86-Options.html#index-mavxvnniint16";
     case OPT_mavxvnniint8:
       return "gcc/x86-Options.html#index-mavxvnniint8";
     case OPT_mbionic:
       return "gcc/GNU_002fLinux-Options.html#index-mbionic";
     case OPT_mbmi:
       return "gcc/x86-Options.html#index-mbmi";
     case OPT_mbmi2:
       return "gcc/x86-Options.html#index-mbmi2";
     case OPT_mbranch_cost_:
       break;
     case OPT_mcall_ms2sysv_xlogues:
       return "gcc/x86-Options.html#index-mcall-ms2sysv-xlogues";
     case OPT_mcet_switch:
       return "gcc/x86-Options.html#index-mcet-switch";
     case OPT_mcld:
       return "gcc/x86-Options.html#index-mcld";
     case OPT_mcldemote:
       return "gcc/x86-Options.html#index-mcldemote";
     case OPT_mclflushopt:
       return "gcc/x86-Options.html#index-mclflushopt";
     case OPT_mclwb:
       return "gcc/x86-Options.html#index-mclwb";
     case OPT_mclzero:
       return "gcc/x86-Options.html#index-mclzero";
     case OPT_mcmodel_:
       return "gcc/x86-Options.html#index-mcmodel_003d-7";
     case OPT_mcmpccxadd:
       return "gcc/x86-Options.html#index-mcmpccxadd";
     case OPT_mcrc32:
       return "gcc/x86-Options.html#index-mcrc32";
     case OPT_mcx16:
       return "gcc/x86-Options.html#index-mcx16";
     case OPT_mdaz_ftz:
       return "gcc/x86-Options.html#index-mdaz-ftz";
     case OPT_mdirect_extern_access:
       return "gcc/x86-Options.html#index-mdirect-extern-access-1";
     case OPT_mdispatch_scheduler:
       break;
     case OPT_mdump_tune_features:
       return "gcc/x86-Options.html#index-mdump-tune-features";
     case OPT_menqcmd:
       return "gcc/x86-Options.html#index-menqcmd";
     case OPT_mevex512:
       return "gcc/x86-Options.html#index-mevex512";
     case OPT_mf16c:
       return "gcc/x86-Options.html#index-mf16c";
     case OPT_mfancy_math_387:
       return "gcc/x86-Options.html#index-mfancy-math-387";
     case OPT_mfentry:
       return "gcc/x86-Options.html#index-mfentry";
     case OPT_mfentry_name_:
       return "gcc/x86-Options.html#index-mfentry-name";
     case OPT_mfentry_section_:
       return "gcc/x86-Options.html#index-mfentry-section";
     case OPT_mfma:
       return "gcc/x86-Options.html#index-mfma";
     case OPT_mfma4:
       return "gcc/x86-Options.html#index-mfma4";
     case OPT_mforce_drap:
       break;
     case OPT_mforce_indirect_call:
       return "gcc/x86-Options.html#index-mforce-indirect-call";
     case OPT_mfp_ret_in_387:
       return "gcc/x86-Options.html#index-mfp-ret-in-387";
     case OPT_mfpmath_:
       break;
     case OPT_mfsgsbase:
       return "gcc/x86-Options.html#index-mfsgsbase";
     case OPT_mfunction_return_:
       return "gcc/x86-Options.html#index-mfunction-return";
     case OPT_mfxsr:
       return "gcc/x86-Options.html#index-mfxsr";
     case OPT_mgeneral_regs_only:
       return "gcc/x86-Options.html#index-mgeneral-regs-only-2";
     case OPT_mgfni:
       return "gcc/x86-Options.html#index-mgfni";
     case OPT_mglibc:
       return "gcc/GNU_002fLinux-Options.html#index-mglibc";
     case OPT_mhard_float:
       return "gcc/x86-Options.html#index-mhard-float-11";
     case OPT_mharden_sls_:
       return "gcc/x86-Options.html#index-mharden-sls-1";
     case OPT_mhle:
       return "gcc/x86-Options.html#index-mhle";
     case OPT_mhreset:
       return "gcc/x86-Options.html#index-mhreset";
     case OPT_miamcu:
       return "gcc/x86-Options.html#index-miamcu";
     case OPT_mieee_fp:
       return "gcc/x86-Options.html#index-mieee-fp";
     case OPT_mincoming_stack_boundary_:
       return "gcc/x86-Options.html#index-mincoming-stack-boundary";
     case OPT_mindirect_branch_cs_prefix:
       return "gcc/x86-Options.html#index-mindirect-branch-cs-prefix";
     case OPT_mindirect_branch_register:
       return "gcc/x86-Options.html#index-mindirect-branch-register";
     case OPT_mindirect_branch_:
       return "gcc/x86-Options.html#index-mindirect-branch";
     case OPT_minline_all_stringops:
       return "gcc/x86-Options.html#index-minline-all-stringops";
     case OPT_minline_stringops_dynamically:
       return "gcc/x86-Options.html#index-minline-stringops-dynamically";
     case OPT_minstrument_return_:
       return "gcc/x86-Options.html#index-minstrument-return";
     case OPT_mkl:
       return "gcc/x86-Options.html#index-mkl";
     case OPT_mlam_:
       return "gcc/x86-Options.html#index-mlam";
     case OPT_mlarge_data_threshold_:
       return "gcc/x86-Options.html#index-mlarge-data-threshold";
     case OPT_mlong_double_128:
       return "gcc/x86-Options.html#index-mlong-double-128-1";
     case OPT_mlong_double_64:
       return "gcc/x86-Options.html#index-mlong-double-64-1";
     case OPT_mlong_double_80:
       return "gcc/x86-Options.html#index-mlong-double-80";
     case OPT_mlwp:
       return "gcc/x86-Options.html#index-mlwp";
     case OPT_mlzcnt:
       return "gcc/x86-Options.html#index-mlzcnt";
     case OPT_mmanual_endbr:
       return "gcc/x86-Options.html#index-mmanual-endbr";
     case OPT_mmemcpy_strategy_:
       break;
     case OPT_mmemset_strategy_:
       break;
     case OPT_mmitigate_rop:
       break;
     case OPT_mmmx:
       return "gcc/x86-Options.html#index-mmmx";
     case OPT_mmovbe:
       return "gcc/x86-Options.html#index-mmovbe";
     case OPT_mmovdir64b:
       return "gcc/x86-Options.html#index-mmovdir64b";
     case OPT_mmovdiri:
       return "gcc/x86-Options.html#index-mmovdiri";
     case OPT_mmove_max_:
       return "gcc/x86-Options.html#index-mmove-max";
     case OPT_mmovrs:
       return "gcc/x86-Options.html#index-mmovrs";
     case OPT_mmpx:
       break;
     case OPT_mms_bitfields:
       return "gcc/x86-Options.html#index-mms-bitfields";
     case OPT_mmusl:
       return "gcc/GNU_002fLinux-Options.html#index-mmusl";
     case OPT_mmwait:
       return "gcc/x86-Options.html#index-mmwait";
     case OPT_mmwaitx:
       return "gcc/x86-Options.html#index-mmwaitx";
     case OPT_mneeded:
       return "gcc/x86-Options.html#index-mneeded";
     case OPT_mno_align_stringops:
       return "gcc/x86-Options.html#index-mno-align-stringops";
     case OPT_mno_default:
       return "gcc/x86-Options.html#index-mno-default";
     case OPT_mno_fancy_math_387:
       return "gcc/x86-Options.html#index-mno-fancy-math-387";
     case OPT_mno_push_args:
       return "gcc/x86-Options.html#index-mno-push-args";
     case OPT_mno_red_zone:
       return "gcc/x86-Options.html#index-mno-red-zone";
     case OPT_mno_sse4:
       break;
     case OPT_mnop_mcount:
       return "gcc/x86-Options.html#index-mnop-mcount";
     case OPT_mnoreturn_no_callee_saved_registers:
       return "gcc/x86-Options.html#index-mnoreturn-no-callee-saved-registers";
     case OPT_momit_leaf_frame_pointer:
       return "gcc/x86-Options.html#index-momit-leaf-frame-pointer-2";
     case OPT_mpartial_vector_fp_math:
       return "gcc/x86-Options.html#index-mpartial-vector-fp-math";
     case OPT_mpc32:
       return "gcc/x86-Options.html#index-mpc32";
     case OPT_mpc64:
       return "gcc/x86-Options.html#index-mpc64";
     case OPT_mpc80:
       return "gcc/x86-Options.html#index-mpc80";
     case OPT_mpclmul:
       return "gcc/x86-Options.html#index-mpclmul";
     case OPT_mpcommit:
       break;
     case OPT_mpconfig:
       return "gcc/x86-Options.html#index-mpconfig";
     case OPT_mpku:
       return "gcc/x86-Options.html#index-mpku";
     case OPT_mpopcnt:
       return "gcc/x86-Options.html#index-mpopcnt";
     case OPT_mprefer_vector_width_:
       return "gcc/x86-Options.html#index-mprefer-vector-width";
     case OPT_mpreferred_stack_boundary_:
       return "gcc/x86-Options.html#index-mpreferred-stack-boundary-1";
     case OPT_mprefetchi:
       return "gcc/x86-Options.html#index-mprefetchi";
     case OPT_mprfchw:
       return "gcc/x86-Options.html#index-mprfchw";
     case OPT_mptwrite:
       return "gcc/x86-Options.html#index-mptwrite";
     case OPT_mpush_args:
       return "gcc/x86-Options.html#index-mpush-args";
     case OPT_mraoint:
       return "gcc/x86-Options.html#index-mraoint";
     case OPT_mrdpid:
       return "gcc/x86-Options.html#index-mrdpid";
     case OPT_mrdrnd:
       return "gcc/x86-Options.html#index-mrdrnd";
     case OPT_mrdseed:
       return "gcc/x86-Options.html#index-mrdseed";
     case OPT_mrecip:
       return "gcc/x86-Options.html#index-mrecip-2";
     case OPT_mrecip_:
       return "gcc/x86-Options.html#index-mrecip-2";
     case OPT_mrecord_mcount:
       return "gcc/x86-Options.html#index-mrecord-mcount";
     case OPT_mrecord_return:
       return "gcc/x86-Options.html#index-mrecord-return";
     case OPT_mred_zone:
       return "gcc/x86-Options.html#index-mred-zone";
     case OPT_mregparm_:
       return "gcc/x86-Options.html#index-mregparm";
     case OPT_mrelax_cmpxchg_loop:
       return "gcc/x86-Options.html#index-mrelax-cmpxchg-loop";
     case OPT_mrtd:
       return "gcc/x86-Options.html#index-mrtd-1";
     case OPT_mrtm:
       return "gcc/x86-Options.html#index-mrtm";
     case OPT_msahf:
       return "gcc/x86-Options.html#index-msahf";
     case OPT_mserialize:
       return "gcc/x86-Options.html#index-mserialize";
     case OPT_msgx:
       return "gcc/x86-Options.html#index-msgx";
     case OPT_msha:
       return "gcc/x86-Options.html#index-msha";
     case OPT_msha512:
       return "gcc/x86-Options.html#index-msha512";
     case OPT_mshstk:
       return "gcc/x86-Options.html#index-mshstk";
     case OPT_mskip_rax_setup:
       return "gcc/x86-Options.html#index-mskip-rax-setup";
     case OPT_msm3:
       return "gcc/x86-Options.html#index-msm3";
     case OPT_msm4:
       return "gcc/x86-Options.html#index-msm4";
     case OPT_msoft_float:
       return "gcc/x86-Options.html#index-msoft-float-16";
     case OPT_msse:
       return "gcc/x86-Options.html#index-msse";
     case OPT_msse2:
       return "gcc/x86-Options.html#index-msse2";
     case OPT_msse2avx:
       return "gcc/x86-Options.html#index-msse2avx";
     case OPT_msse3:
       return "gcc/x86-Options.html#index-msse3";
     case OPT_msse4:
       return "gcc/x86-Options.html#index-msse4";
     case OPT_msse4_1:
       return "gcc/x86-Options.html#index-msse4_002e1";
     case OPT_msse4_2:
       return "gcc/x86-Options.html#index-msse4_002e2";
     case OPT_msse4a:
       return "gcc/x86-Options.html#index-msse4a";
     case OPT_msseregparm:
       return "gcc/x86-Options.html#index-msseregparm";
     case OPT_mssse3:
       return "gcc/x86-Options.html#index-mssse3";
     case OPT_mstack_arg_probe:
       break;
     case OPT_mstack_protector_guard_offset_:
       return "gcc/x86-Options.html#index-mstack-protector-guard-offset-4";
     case OPT_mstack_protector_guard_reg_:
       return "gcc/x86-Options.html#index-mstack-protector-guard-reg-3";
     case OPT_mstack_protector_guard_symbol_:
       return "gcc/x86-Options.html#index-mstack-protector-guard-symbol";
     case OPT_mstack_protector_guard_:
       return "gcc/x86-Options.html#index-mstack-protector-guard-4";
     case OPT_mstackrealign:
       return "gcc/x86-Options.html#index-mstackrealign";
     case OPT_mstore_max_:
       return "gcc/x86-Options.html#index-mstore-max";
     case OPT_mstringop_strategy_:
       break;
     case OPT_mstv:
       break;
     case OPT_mtbm:
       return "gcc/x86-Options.html#index-mtbm";
     case OPT_mtls_dialect_:
       return "gcc/x86-Options.html#index-mtls-dialect-2";
     case OPT_mtls_direct_seg_refs:
       return "gcc/x86-Options.html#index-mtls-direct-seg-refs";
     case OPT_mtsxldtrk:
       return "gcc/x86-Options.html#index-mtsxldtrk";
     case OPT_mtune_ctrl_:
       break;
     case OPT_mtune_:
       return "gcc/x86-Options.html#index-mtune-17";
     case OPT_muclibc:
       return "gcc/GNU_002fLinux-Options.html#index-muclibc";
     case OPT_muintr:
       return "gcc/x86-Options.html#index-muintr";
     case OPT_munroll_only_small_loops:
       return "gcc/x86-Options.html#index-munroll-only-small-loops";
     case OPT_musermsr:
       return "gcc/x86-Options.html#index-musermsr";
     case OPT_mvaes:
       return "gcc/x86-Options.html#index-mvaes";
     case OPT_mveclibabi_:
       return "gcc/x86-Options.html#index-mveclibabi-1";
     case OPT_mvect8_ret_in_mem:
       return "gcc/x86-Options.html#index-mvect8-ret-in-mem";
     case OPT_mvpclmulqdq:
       return "gcc/x86-Options.html#index-mvpclmulqdq";
     case OPT_mvzeroupper:
       return "gcc/x86-Options.html#index-mvzeroupper";
     case OPT_mwaitpkg:
       return "gcc/x86-Options.html#index-mwaitpkg";
     case OPT_mwbnoinvd:
       return "gcc/x86-Options.html#index-mwbnoinvd";
     case OPT_mwidekl:
       return "gcc/x86-Options.html#index-mwidekl";
     case OPT_mx32:
       return "gcc/x86-Options.html#index-mx32";
     case OPT_mxop:
       return "gcc/x86-Options.html#index-mxop";
     case OPT_mxsave:
       return "gcc/x86-Options.html#index-mxsave";
     case OPT_mxsavec:
       return "gcc/x86-Options.html#index-mxsavec";
     case OPT_mxsaveopt:
       return "gcc/x86-Options.html#index-mxsaveopt";
     case OPT_mxsaves:
       return "gcc/x86-Options.html#index-mxsaves";
     case OPT_n:
       break;
     case OPT_name_sort:
       break;
     case OPT_no_canonical_prefixes:
       return "gcc/Directory-Options.html#index-no-canonical-prefixes";
     case OPT_no_integrated_cpp:
       return "gcc/Preprocessor-Options.html#index-no-integrated-cpp";
     case OPT_no_pie:
       return "gcc/Link-Options.html#index-no-pie";
     case OPT_nocpp:
       break;
     case OPT_nodefaultlibs:
       return "gcc/Link-Options.html#index-nodefaultlibs";
     case OPT_nolibc:
       return "gcc/Link-Options.html#index-nolibc";
     case OPT_nophoboslib:
       if (lang_mask & CL_D)
         return "gdc/Linking.html#index-nophoboslib";
       break;
     case OPT_nostartfiles:
       return "gcc/Link-Options.html#index-nostartfiles";
     case OPT_nostdinc:
       if (lang_mask & CL_D)
         return "gdc/Directory-Options.html#index-nostdinc";
       if (lang_mask & CL_Fortran)
         return "gfortran/Preprocessing-Options.html#index-nostdinc";
       return "gcc/Directory-Options.html#index-nostdinc";
     case OPT_nostdinc__:
       break;
     case OPT_nostdlib:
       return "gcc/Link-Options.html#index-nostdlib";
     case OPT_nostdlib__:
       return "gcc/Link-Options.html#index-nostdlib_002b_002b";
     case OPT_o:
       return "gcc/Overall-Options.html#index-o";
     case OPT_objects:
       break;
     case OPT_p:
       return "gcc/Instrumentation-Options.html#index-p";
     case OPT_pass_exit_codes:
       return "gcc/Overall-Options.html#index-pass-exit-codes";
     case OPT_pedantic_errors:
       if (lang_mask & CL_Fortran)
         return "gfortran/Error-and-Warning-Options.html#index-pedantic-errors";
       break;
     case OPT_pg:
       return "gcc/Instrumentation-Options.html#index-pg";
     case OPT_pie:
       return "gcc/Link-Options.html#index-pie";
     case OPT_pipe:
       return "gcc/Overall-Options.html#index-pipe";
     case OPT_posix:
       break;
     case OPT_print_file_name_:
       return "gcc/Developer-Options.html#index-print-file-name";
     case OPT_print_libgcc_file_name:
       return "gcc/Developer-Options.html#index-print-libgcc-file-name";
     case OPT_print_multi_directory:
       return "gcc/Developer-Options.html#index-print-multi-directory";
     case OPT_print_multi_lib:
       return "gcc/Developer-Options.html#index-print-multi-lib";
     case OPT_print_multi_os_directory:
       return "gcc/Developer-Options.html#index-print-multi-os-directory";
     case OPT_print_multiarch:
       return "gcc/Developer-Options.html#index-print-multiarch";
     case OPT_print_objc_runtime_info:
       return "gcc/Objective-C-and-Objective-C_002b_002b-Dialect-Options.html#index-print-objc-runtime-info";
     case OPT_print_prog_name_:
       return "gcc/Developer-Options.html#index-print-prog-name";
     case OPT_print_search_dirs:
       return "gcc/Developer-Options.html#index-print-search-dirs";
     case OPT_print_sysroot:
       return "gcc/Developer-Options.html#index-print-sysroot";
     case OPT_print_sysroot_headers_suffix:
       return "gcc/Developer-Options.html#index-print-sysroot-headers-suffix";
     case OPT_print_value:
       break;
     case OPT_profile:
       break;
     case OPT_pthread:
       break;
     case OPT_quiet:
       break;
     case OPT_r:
       return "gcc/Link-Options.html#index-r";
     case OPT_rdynamic:
       return "gcc/Link-Options.html#index-rdynamic";
     case OPT_remap:
       return "gcc/Preprocessor-Options.html#index-remap";
     case OPT_reverse_sort:
       break;
     case OPT_s:
       return "gcc/Link-Options.html#index-s";
     case OPT_save_temps:
       return "gcc/Developer-Options.html#index-save-temps";
     case OPT_save_temps_:
       return "gcc/Developer-Options.html#index-save-temps";
     case OPT_shared:
       return "gcc/Link-Options.html#index-shared";
     case OPT_shared_libgcc:
       return "gcc/Link-Options.html#index-shared-libgcc";
     case OPT_shared_libphobos:
       if (lang_mask & CL_D)
         return "gdc/Linking.html#index-shared-libphobos";
       break;
     case OPT_size_sort:
       break;
     case OPT_specs_:
       return "gcc/Overall-Options.html#index-specs";
     case OPT_static:
       break;
     case OPT_static_libasan:
       return "gcc/Link-Options.html#index-static-libasan";
     case OPT_static_libgcc:
       return "gcc/Link-Options.html#index-static-libgcc";
     case OPT_static_libgfortran:
       if (lang_mask & CL_Fortran)
         return "gfortran/Link-Options.html#index-static-libgfortran";
       break;
     case OPT_static_libgm2:
       break;
     case OPT_static_libgo:
       break;
     case OPT_static_libhwasan:
       break;
     case OPT_static_liblsan:
       return "gcc/Link-Options.html#index-static-liblsan";
     case OPT_static_libmpx:
       break;
     case OPT_static_libmpxwrappers:
       break;
     case OPT_static_libphobos:
       if (lang_mask & CL_D)
         return "gdc/Linking.html#index-static-libphobos";
       break;
     case OPT_static_libquadmath:
       if (lang_mask & CL_Fortran)
         return "gfortran/Link-Options.html#index-static-libquadmath";
       break;
     case OPT_static_libstdc__:
       return "gcc/Link-Options.html#index-static-libstdc_002b_002b";
     case OPT_static_libtsan:
       return "gcc/Link-Options.html#index-static-libtsan";
     case OPT_static_libubsan:
       return "gcc/Link-Options.html#index-static-libubsan";
     case OPT_static_pie:
       return "gcc/Link-Options.html#index-static-pie";
     case OPT_std_c__11:
       break;
     case OPT_std_c__14:
       break;
     case OPT_std_c__17:
       break;
     case OPT_std_c__20:
       break;
     case OPT_std_c__23:
       break;
     case OPT_std_c__26:
       break;
     case OPT_std_c__98:
       break;
     case OPT_std_c11:
       break;
     case OPT_std_c17:
       break;
     case OPT_std_c23:
       break;
     case OPT_std_c2y:
       break;
     case OPT_std_c90:
       break;
     case OPT_std_c99:
       break;
     case OPT_std_f2003:
       break;
     case OPT_std_f2008:
       break;
     case OPT_std_f2008ts:
       break;
     case OPT_std_f2018:
       break;
     case OPT_std_f2023:
       break;
     case OPT_std_f202y:
       break;
     case OPT_std_f95:
       break;
     case OPT_std_gnu:
       break;
     case OPT_std_gnu__11:
       break;
     case OPT_std_gnu__14:
       break;
     case OPT_std_gnu__17:
       break;
     case OPT_std_gnu__20:
       break;
     case OPT_std_gnu__23:
       break;
     case OPT_std_gnu__26:
       break;
     case OPT_std_gnu__98:
       break;
     case OPT_std_gnu11:
       break;
     case OPT_std_gnu17:
       break;
     case OPT_std_gnu23:
       break;
     case OPT_std_gnu2y:
       break;
     case OPT_std_gnu90:
       break;
     case OPT_std_gnu99:
       break;
     case OPT_std_iso9899_199409:
       break;
     case OPT_std_legacy:
       break;
     case OPT_stdlib_:
       return "gcc/C_002b_002b-Dialect-Options.html#index-stdlib";
     case OPT_symbol_:
       break;
     case OPT_symbolic:
       return "gcc/Link-Options.html#index-symbolic";
     case OPT_t:
       break;
     case OPT_time:
       return "gcc/Developer-Options.html#index-time";
     case OPT_time_:
       return "gcc/Developer-Options.html#index-time";
     case OPT_tno_android_cc:
       return "gcc/GNU_002fLinux-Options.html#index-tno-android-cc";
     case OPT_tno_android_ld:
       return "gcc/GNU_002fLinux-Options.html#index-tno-android-ld";
     case OPT_traditional:
       break;
     case OPT_traditional_cpp:
       return "gcc/Preprocessor-Options.html#index-traditional-cpp";
     case OPT_tree_stats:
       break;
     case OPT_trigraphs:
       return "gcc/Preprocessor-Options.html#index-trigraphs";
     case OPT_truncate:
       break;
     case OPT_type_stats:
       break;
     case OPT_u:
       return "gcc/Link-Options.html#index-u";
     case OPT_undef:
       if (lang_mask & CL_Fortran)
         return "gfortran/Preprocessing-Options.html#index-undef";
       return "gcc/Preprocessor-Options.html#index-undef";
     case OPT_v:
       if (lang_mask & CL_D)
         return "gdc/Developer-Options.html#index-v";
       return "gcc/Overall-Options.html#index-v";
     case OPT_version:
       return "gcc/Overall-Options.html#index-version";
     case OPT_w:
       return "gcc/Warning-Options.html#index-w";
     case OPT_wrapper:
       return "gcc/Overall-Options.html#index-wrapper";
     case OPT_x:
       return "gcc/Overall-Options.html#index-x";
     case OPT_z:
       return "gcc/Link-Options.html#index-z";
    }
  return nullptr;
}
