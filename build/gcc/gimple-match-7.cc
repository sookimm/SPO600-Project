/* Generated automatically by the program `genmatch' from
   a IL pattern matching and simplification description.  */
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-function"

#include "gimple-match-auto.h"

bool
gimple_maybe_cmp (tree t, tree *res_ops, tree (*valueize)(tree) ATTRIBUTE_UNUSED)
{
  const tree type = TREE_TYPE (t);
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (t))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, t))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case LT_EXPR:
	      case LE_EXPR:
	      case EQ_EXPR:
	      case NE_EXPR:
	      case GE_EXPR:
	      case GT_EXPR:
	      case UNORDERED_EXPR:
	      case ORDERED_EXPR:
	      case UNLT_EXPR:
	      case UNLE_EXPR:
	      case UNGT_EXPR:
	      case UNGE_EXPR:
	      case UNEQ_EXPR:
	      case LTGT_EXPR:
	        {
		  tree _p0 = gimple_assign_rhs1 (_a1);
		  _p0 = do_valueize (valueize, _p0);
		  tree _p1 = gimple_assign_rhs2 (_a1);
		  _p1 = do_valueize (valueize, _p1);
		  {
		    tree captures[3] ATTRIBUTE_UNUSED = { t, _p0, _p1 };
		    {
		      res_ops[0] = captures[0];
		      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 5, __FILE__, __LINE__, false);
		      return true;
		    }
		  }
	          break;
	        }
	      CASE_CONVERT:
	        {
		  tree _p0 = gimple_assign_rhs1 (_a1);
		  _p0 = do_valueize (valueize, _p0);
		  switch (TREE_CODE (_p0))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p0))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case LT_EXPR:
			      case LE_EXPR:
			      case EQ_EXPR:
			      case NE_EXPR:
			      case GE_EXPR:
			      case GT_EXPR:
			      case UNORDERED_EXPR:
			      case ORDERED_EXPR:
			      case UNLT_EXPR:
			      case UNLE_EXPR:
			      case UNGT_EXPR:
			      case UNGE_EXPR:
			      case UNEQ_EXPR:
			      case LTGT_EXPR:
			        {
				  tree _q20 = gimple_assign_rhs1 (_a2);
				  _q20 = do_valueize (valueize, _q20);
				  tree _q21 = gimple_assign_rhs2 (_a2);
				  _q21 = do_valueize (valueize, _q21);
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
				    if (tree_nop_conversion_p (type, TREE_TYPE (captures[0]))
)
				      {
					{
					  res_ops[0] = captures[0];
					  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 6, __FILE__, __LINE__, false);
					  return true;
					}
				      }
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case BIT_XOR_EXPR:
	        {
		  tree _p0 = gimple_assign_rhs1 (_a1);
		  _p0 = do_valueize (valueize, _p0);
		  tree _p1 = gimple_assign_rhs2 (_a1);
		  _p1 = do_valueize (valueize, _p1);
		  if (tree_swap_operands_p (_p0, _p1))
		    std::swap (_p0, _p1);
		  {
		    tree captures[3] ATTRIBUTE_UNUSED = { t, _p0, _p1 };
		    if (INTEGRAL_TYPE_P (type)
 && TYPE_PRECISION (type) == 1
)
		      {
			{
			  res_ops[0] = captures[0];
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 7, __FILE__, __LINE__, false);
			  return true;
			}
		      }
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_signed_integer_sat_trunc (tree t, tree *res_ops, tree (*valueize)(tree) ATTRIBUTE_UNUSED)
{
  const tree type = TREE_TYPE (t);
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (t))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, t))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case COND_EXPR:
	        {
		  tree _p0 = gimple_assign_rhs1 (_a1);
		  _p0 = do_valueize (valueize, _p0);
		  tree _p1 = gimple_assign_rhs2 (_a1);
		  _p1 = do_valueize (valueize, _p1);
		  tree _p2 = gimple_assign_rhs3 (_a1);
		  _p2 = do_valueize (valueize, _p2);
		  switch (TREE_CODE (_p0))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p0))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case GT_EXPR:
			        {
				  tree _q20 = gimple_assign_rhs1 (_a2);
				  _q20 = do_valueize (valueize, _q20);
				  tree _q21 = gimple_assign_rhs2 (_a2);
				  _q21 = do_valueize (valueize, _q21);
				  switch (TREE_CODE (_q20))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q20))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case PLUS_EXPR:
					        {
						  tree _q30 = gimple_assign_rhs1 (_a3);
						  _q30 = do_valueize (valueize, _q30);
						  tree _q31 = gimple_assign_rhs2 (_a3);
						  _q31 = do_valueize (valueize, _q31);
						  if (tree_swap_operands_p (_q30, _q31))
						    std::swap (_q30, _q31);
						  switch (TREE_CODE (_q30))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q30))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      CASE_CONVERT:
							        {
								  tree _q40 = gimple_assign_rhs1 (_a4);
								  _q40 = do_valueize (valueize, _q40);
								  switch (TREE_CODE (_q31))
								    {
								    case INTEGER_CST:
								      {
									switch (TREE_CODE (_q21))
									  {
									  case INTEGER_CST:
									    {
									      switch (TREE_CODE (_p1))
									        {
										case SSA_NAME:
										  if (gimple *_d5 = get_def (valueize, _p1))
										    {
										      if (gassign *_a5 = dyn_cast <gassign *> (_d5))
										        switch (gimple_assign_rhs_code (_a5))
											  {
											  case BIT_XOR_EXPR:
											    {
											      tree _q80 = gimple_assign_rhs1 (_a5);
											      _q80 = do_valueize (valueize, _q80);
											      tree _q81 = gimple_assign_rhs2 (_a5);
											      _q81 = do_valueize (valueize, _q81);
											      if (tree_swap_operands_p (_q80, _q81))
											        std::swap (_q80, _q81);
											      switch (TREE_CODE (_q80))
											        {
												case SSA_NAME:
												  if (gimple *_d6 = get_def (valueize, _q80))
												    {
												      if (gassign *_a6 = dyn_cast <gassign *> (_d6))
												        switch (gimple_assign_rhs_code (_a6))
													  {
													  case NEGATE_EXPR:
													    {
													      tree _q90 = gimple_assign_rhs1 (_a6);
													      _q90 = do_valueize (valueize, _q90);
													      switch (TREE_CODE (_q90))
													        {
														case SSA_NAME:
														  if (gimple *_d7 = get_def (valueize, _q90))
														    {
														      if (gassign *_a7 = dyn_cast <gassign *> (_d7))
														        switch (gimple_assign_rhs_code (_a7))
															  {
															  CASE_CONVERT:
															    {
															      tree _q100 = gimple_assign_rhs1 (_a7);
															      _q100 = do_valueize (valueize, _q100);
															      switch (TREE_CODE (_q100))
															        {
																case SSA_NAME:
																  if (gimple *_d8 = get_def (valueize, _q100))
																    {
																      if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																        switch (gimple_assign_rhs_code (_a8))
																	  {
																	  case LT_EXPR:
																	    {
																	      tree _q110 = gimple_assign_rhs1 (_a8);
																	      _q110 = do_valueize (valueize, _q110);
																	      tree _q111 = gimple_assign_rhs2 (_a8);
																	      _q111 = do_valueize (valueize, _q111);
																	      if ((_q110 == _q40 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q40, 0) && types_match (_q110, _q40)))
																		{
																		  if (integer_zerop (_q111))
																		    {
																		      switch (TREE_CODE (_q81))
																		        {
																			case INTEGER_CST:
																			  {
																			    switch (TREE_CODE (_p2))
																			      {
																			      case SSA_NAME:
																			        if (gimple *_d9 = get_def (valueize, _p2))
																			          {
																				    if (gassign *_a9 = dyn_cast <gassign *> (_d9))
																				      switch (gimple_assign_rhs_code (_a9))
																					{
																					CASE_CONVERT:
																					  {
																					    tree _q150 = gimple_assign_rhs1 (_a9);
																					    _q150 = do_valueize (valueize, _q150);
																					    if ((_q150 == _q40 && ! TREE_SIDE_EFFECTS (_q150)) || (operand_equal_p (_q150, _q40, 0) && types_match (_q150, _q40)))
																					      {
																						{
																						  tree captures[5] ATTRIBUTE_UNUSED = { _q40, _q30, _q31, _q21, _q81 };
																						  if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type)
)
																						    {
																						      if (!TYPE_UNSIGNED (TREE_TYPE (captures[0])) && TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
																							{
																							  {
 unsigned itype_prec = TYPE_PRECISION (TREE_TYPE (captures[0]));
 unsigned otype_prec = TYPE_PRECISION (type);
 wide_int offset = wi::uhwi (HOST_WIDE_INT_1U << (otype_prec - 1),
 itype_prec);
 wide_int limit_0 = wi::mask (otype_prec, false, itype_prec);
 wide_int limit_1 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 3,
 itype_prec);
 wide_int limit_2 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 2,
 itype_prec);
 wide_int otype_max = wi::mask (otype_prec - 1, false, otype_prec);
 wide_int itype_max = wi::mask (otype_prec - 1, false, itype_prec);
 wide_int int_cst_1 = wi::to_wide (captures[2]);
 wide_int int_cst_2 = wi::to_wide (captures[3]);
 wide_int int_cst_3 = wi::to_wide (captures[4]);
																							      if (((wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_0))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_1)))
 && wi::eq_p (int_cst_3, otype_max)
)
																								{
																								  {
																								    res_ops[0] = captures[0];
																								    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 81, __FILE__, __LINE__, false);
																								    return true;
																								  }
																								}
																							  }
																							}
																						    }
																						}
																					      }
																					    break;
																					  }
																					default:;
																					}
																			          }
																			        break;
																			      default:;
																			      }
																			    break;
																			  }
																		        default:;
																		        }
																		    }
																	        }
																	      break;
																	    }
																	  default:;
																	  }
																    }
																  break;
															        default:;
															        }
															      break;
															    }
															  default:;
															  }
														    }
														  break;
													        default:;
													        }
													      break;
													    }
													  default:;
													  }
												    }
												  break;
												case INTEGER_CST:
												  {
												    switch (TREE_CODE (_q81))
												      {
												      case SSA_NAME:
												        if (gimple *_d6 = get_def (valueize, _q81))
												          {
													    if (gassign *_a6 = dyn_cast <gassign *> (_d6))
													      switch (gimple_assign_rhs_code (_a6))
														{
														case NEGATE_EXPR:
														  {
														    tree _q100 = gimple_assign_rhs1 (_a6);
														    _q100 = do_valueize (valueize, _q100);
														    switch (TREE_CODE (_q100))
														      {
														      case SSA_NAME:
														        if (gimple *_d7 = get_def (valueize, _q100))
														          {
															    if (gassign *_a7 = dyn_cast <gassign *> (_d7))
															      switch (gimple_assign_rhs_code (_a7))
																{
																CASE_CONVERT:
																  {
																    tree _q110 = gimple_assign_rhs1 (_a7);
																    _q110 = do_valueize (valueize, _q110);
																    switch (TREE_CODE (_q110))
																      {
																      case SSA_NAME:
																        if (gimple *_d8 = get_def (valueize, _q110))
																          {
																	    if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																	      switch (gimple_assign_rhs_code (_a8))
																		{
																		case LT_EXPR:
																		  {
																		    tree _q120 = gimple_assign_rhs1 (_a8);
																		    _q120 = do_valueize (valueize, _q120);
																		    tree _q121 = gimple_assign_rhs2 (_a8);
																		    _q121 = do_valueize (valueize, _q121);
																		    if ((_q120 == _q40 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q40, 0) && types_match (_q120, _q40)))
																		      {
																			if (integer_zerop (_q121))
																			  {
																			    switch (TREE_CODE (_p2))
																			      {
																			      case SSA_NAME:
																			        if (gimple *_d9 = get_def (valueize, _p2))
																			          {
																				    if (gassign *_a9 = dyn_cast <gassign *> (_d9))
																				      switch (gimple_assign_rhs_code (_a9))
																					{
																					CASE_CONVERT:
																					  {
																					    tree _q150 = gimple_assign_rhs1 (_a9);
																					    _q150 = do_valueize (valueize, _q150);
																					    if ((_q150 == _q40 && ! TREE_SIDE_EFFECTS (_q150)) || (operand_equal_p (_q150, _q40, 0) && types_match (_q150, _q40)))
																					      {
																						{
																						  tree captures[5] ATTRIBUTE_UNUSED = { _q40, _q30, _q31, _q21, _q80 };
																						  if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type)
)
																						    {
																						      if (!TYPE_UNSIGNED (TREE_TYPE (captures[0])) && TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
																							{
																							  {
 unsigned itype_prec = TYPE_PRECISION (TREE_TYPE (captures[0]));
 unsigned otype_prec = TYPE_PRECISION (type);
 wide_int offset = wi::uhwi (HOST_WIDE_INT_1U << (otype_prec - 1),
 itype_prec);
 wide_int limit_0 = wi::mask (otype_prec, false, itype_prec);
 wide_int limit_1 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 3,
 itype_prec);
 wide_int limit_2 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 2,
 itype_prec);
 wide_int otype_max = wi::mask (otype_prec - 1, false, otype_prec);
 wide_int itype_max = wi::mask (otype_prec - 1, false, itype_prec);
 wide_int int_cst_1 = wi::to_wide (captures[2]);
 wide_int int_cst_2 = wi::to_wide (captures[3]);
 wide_int int_cst_3 = wi::to_wide (captures[4]);
																							      if (((wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_0))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_1)))
 && wi::eq_p (int_cst_3, otype_max)
)
																								{
																								  {
																								    res_ops[0] = captures[0];
																								    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 81, __FILE__, __LINE__, false);
																								    return true;
																								  }
																								}
																							  }
																							}
																						    }
																						}
																					      }
																					    break;
																					  }
																					default:;
																					}
																			          }
																			        break;
																			      default:;
																			      }
																			  }
																		      }
																		    break;
																		  }
																		default:;
																		}
																          }
																        break;
																      default:;
																      }
																    break;
																  }
																default:;
																}
														          }
														        break;
														      default:;
														      }
														    break;
														  }
														default:;
														}
												          }
												        break;
												      default:;
												      }
												  {
												    tree _q81_pops[1];
												    if (gimple_nop_convert (_q81, _q81_pops, valueize))
												      {
													tree _q100 = _q81_pops[0];
													switch (TREE_CODE (_q100))
													  {
													  case SSA_NAME:
													    if (gimple *_d6 = get_def (valueize, _q100))
													      {
														if (gassign *_a6 = dyn_cast <gassign *> (_d6))
														  switch (gimple_assign_rhs_code (_a6))
														    {
														    case NEGATE_EXPR:
														      {
															tree _q110 = gimple_assign_rhs1 (_a6);
															_q110 = do_valueize (valueize, _q110);
															{
															  tree _q110_pops[1];
															  if (gimple_nop_convert (_q110, _q110_pops, valueize))
															    {
															      tree _q120 = _q110_pops[0];
															      switch (TREE_CODE (_q120))
															        {
																case SSA_NAME:
																  if (gimple *_d7 = get_def (valueize, _q120))
																    {
																      if (gassign *_a7 = dyn_cast <gassign *> (_d7))
																        switch (gimple_assign_rhs_code (_a7))
																	  {
																	  CASE_CONVERT:
																	    {
																	      tree _q130 = gimple_assign_rhs1 (_a7);
																	      _q130 = do_valueize (valueize, _q130);
																	      switch (TREE_CODE (_q130))
																	        {
																		case SSA_NAME:
																		  if (gimple *_d8 = get_def (valueize, _q130))
																		    {
																		      if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																		        switch (gimple_assign_rhs_code (_a8))
																			  {
																			  case LT_EXPR:
																			    {
																			      tree _q140 = gimple_assign_rhs1 (_a8);
																			      _q140 = do_valueize (valueize, _q140);
																			      tree _q141 = gimple_assign_rhs2 (_a8);
																			      _q141 = do_valueize (valueize, _q141);
																			      if ((_q140 == _q40 && ! TREE_SIDE_EFFECTS (_q140)) || (operand_equal_p (_q140, _q40, 0) && types_match (_q140, _q40)))
																				{
																				  if (integer_zerop (_q141))
																				    {
																				      switch (TREE_CODE (_p2))
																				        {
																					case SSA_NAME:
																					  if (gimple *_d9 = get_def (valueize, _p2))
																					    {
																					      if (gassign *_a9 = dyn_cast <gassign *> (_d9))
																					        switch (gimple_assign_rhs_code (_a9))
																						  {
																						  CASE_CONVERT:
																						    {
																						      tree _q170 = gimple_assign_rhs1 (_a9);
																						      _q170 = do_valueize (valueize, _q170);
																						      if ((_q170 == _q40 && ! TREE_SIDE_EFFECTS (_q170)) || (operand_equal_p (_q170, _q40, 0) && types_match (_q170, _q40)))
																							{
																							  {
																							    tree captures[5] ATTRIBUTE_UNUSED = { _q40, _q30, _q31, _q21, _q80 };
																							    if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type)
)
																							      {
																								if (!TYPE_UNSIGNED (TREE_TYPE (captures[0])) && TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
																								  {
																								    {
 unsigned itype_prec = TYPE_PRECISION (TREE_TYPE (captures[0]));
 unsigned otype_prec = TYPE_PRECISION (type);
 wide_int offset = wi::uhwi (HOST_WIDE_INT_1U << (otype_prec - 1),
 itype_prec);
 wide_int limit_0 = wi::mask (otype_prec, false, itype_prec);
 wide_int limit_1 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 3,
 itype_prec);
 wide_int limit_2 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 2,
 itype_prec);
 wide_int otype_max = wi::mask (otype_prec - 1, false, otype_prec);
 wide_int itype_max = wi::mask (otype_prec - 1, false, itype_prec);
 wide_int int_cst_1 = wi::to_wide (captures[2]);
 wide_int int_cst_2 = wi::to_wide (captures[3]);
 wide_int int_cst_3 = wi::to_wide (captures[4]);
																									if (((wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_0))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_1)))
 && wi::eq_p (int_cst_3, otype_max)
)
																									  {
																									    {
																									      res_ops[0] = captures[0];
																									      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 81, __FILE__, __LINE__, false);
																									      return true;
																									    }
																									  }
																								    }
																								  }
																							      }
																							  }
																						        }
																						      break;
																						    }
																						  default:;
																						  }
																					    }
																					  break;
																				        default:;
																				        }
																				    }
																			        }
																			      break;
																			    }
																			  default:;
																			  }
																		    }
																		  break;
																	        default:;
																	        }
																	      break;
																	    }
																	  default:;
																	  }
																    }
																  break;
															        default:;
															        }
															    }
															}
														        break;
														      }
														    default:;
														    }
													      }
													    break;
												          default:;
												          }
												      }
												  }
												    break;
												  }
											        default:;
											        }
											    {
											      tree _q80_pops[1];
											      if (gimple_nop_convert (_q80, _q80_pops, valueize))
											        {
												  tree _q90 = _q80_pops[0];
												  switch (TREE_CODE (_q90))
												    {
												    case SSA_NAME:
												      if (gimple *_d6 = get_def (valueize, _q90))
												        {
													  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
													    switch (gimple_assign_rhs_code (_a6))
													      {
													      case NEGATE_EXPR:
													        {
														  tree _q100 = gimple_assign_rhs1 (_a6);
														  _q100 = do_valueize (valueize, _q100);
														  {
														    tree _q100_pops[1];
														    if (gimple_nop_convert (_q100, _q100_pops, valueize))
														      {
															tree _q110 = _q100_pops[0];
															switch (TREE_CODE (_q110))
															  {
															  case SSA_NAME:
															    if (gimple *_d7 = get_def (valueize, _q110))
															      {
																if (gassign *_a7 = dyn_cast <gassign *> (_d7))
																  switch (gimple_assign_rhs_code (_a7))
																    {
																    CASE_CONVERT:
																      {
																	tree _q120 = gimple_assign_rhs1 (_a7);
																	_q120 = do_valueize (valueize, _q120);
																	switch (TREE_CODE (_q120))
																	  {
																	  case SSA_NAME:
																	    if (gimple *_d8 = get_def (valueize, _q120))
																	      {
																		if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																		  switch (gimple_assign_rhs_code (_a8))
																		    {
																		    case LT_EXPR:
																		      {
																			tree _q130 = gimple_assign_rhs1 (_a8);
																			_q130 = do_valueize (valueize, _q130);
																			tree _q131 = gimple_assign_rhs2 (_a8);
																			_q131 = do_valueize (valueize, _q131);
																			if ((_q130 == _q40 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q40, 0) && types_match (_q130, _q40)))
																			  {
																			    if (integer_zerop (_q131))
																			      {
																				switch (TREE_CODE (_q81))
																				  {
																				  case INTEGER_CST:
																				    {
																				      switch (TREE_CODE (_p2))
																				        {
																					case SSA_NAME:
																					  if (gimple *_d9 = get_def (valueize, _p2))
																					    {
																					      if (gassign *_a9 = dyn_cast <gassign *> (_d9))
																					        switch (gimple_assign_rhs_code (_a9))
																						  {
																						  CASE_CONVERT:
																						    {
																						      tree _q170 = gimple_assign_rhs1 (_a9);
																						      _q170 = do_valueize (valueize, _q170);
																						      if ((_q170 == _q40 && ! TREE_SIDE_EFFECTS (_q170)) || (operand_equal_p (_q170, _q40, 0) && types_match (_q170, _q40)))
																							{
																							  {
																							    tree captures[5] ATTRIBUTE_UNUSED = { _q40, _q30, _q31, _q21, _q81 };
																							    if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type)
)
																							      {
																								if (!TYPE_UNSIGNED (TREE_TYPE (captures[0])) && TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
																								  {
																								    {
 unsigned itype_prec = TYPE_PRECISION (TREE_TYPE (captures[0]));
 unsigned otype_prec = TYPE_PRECISION (type);
 wide_int offset = wi::uhwi (HOST_WIDE_INT_1U << (otype_prec - 1),
 itype_prec);
 wide_int limit_0 = wi::mask (otype_prec, false, itype_prec);
 wide_int limit_1 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 3,
 itype_prec);
 wide_int limit_2 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 2,
 itype_prec);
 wide_int otype_max = wi::mask (otype_prec - 1, false, otype_prec);
 wide_int itype_max = wi::mask (otype_prec - 1, false, itype_prec);
 wide_int int_cst_1 = wi::to_wide (captures[2]);
 wide_int int_cst_2 = wi::to_wide (captures[3]);
 wide_int int_cst_3 = wi::to_wide (captures[4]);
																									if (((wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_0))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_1)))
 && wi::eq_p (int_cst_3, otype_max)
)
																									  {
																									    {
																									      res_ops[0] = captures[0];
																									      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 81, __FILE__, __LINE__, false);
																									      return true;
																									    }
																									  }
																								    }
																								  }
																							      }
																							  }
																						        }
																						      break;
																						    }
																						  default:;
																						  }
																					    }
																					  break;
																				        default:;
																				        }
																				      break;
																				    }
																			          default:;
																			          }
																			      }
																			  }
																		        break;
																		      }
																		    default:;
																		    }
																	      }
																	    break;
																          default:;
																          }
																        break;
																      }
																    default:;
																    }
															      }
															    break;
														          default:;
														          }
														      }
														  }
													          break;
													        }
													      default:;
													      }
												        }
												      break;
												    default:;
												    }
											        }
											    }
											      break;
											    }
											  default:;
											  }
										    }
										  break;
									        default:;
									        }
									      break;
									    }
								          default:;
								          }
								        break;
								      }
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    case INTEGER_CST:
						      {
							switch (TREE_CODE (_q31))
							  {
							  case SSA_NAME:
							    if (gimple *_d4 = get_def (valueize, _q31))
							      {
								if (gassign *_a4 = dyn_cast <gassign *> (_d4))
								  switch (gimple_assign_rhs_code (_a4))
								    {
								    CASE_CONVERT:
								      {
									tree _q50 = gimple_assign_rhs1 (_a4);
									_q50 = do_valueize (valueize, _q50);
									switch (TREE_CODE (_q21))
									  {
									  case INTEGER_CST:
									    {
									      switch (TREE_CODE (_p1))
									        {
										case SSA_NAME:
										  if (gimple *_d5 = get_def (valueize, _p1))
										    {
										      if (gassign *_a5 = dyn_cast <gassign *> (_d5))
										        switch (gimple_assign_rhs_code (_a5))
											  {
											  case BIT_XOR_EXPR:
											    {
											      tree _q80 = gimple_assign_rhs1 (_a5);
											      _q80 = do_valueize (valueize, _q80);
											      tree _q81 = gimple_assign_rhs2 (_a5);
											      _q81 = do_valueize (valueize, _q81);
											      if (tree_swap_operands_p (_q80, _q81))
											        std::swap (_q80, _q81);
											      switch (TREE_CODE (_q80))
											        {
												case SSA_NAME:
												  if (gimple *_d6 = get_def (valueize, _q80))
												    {
												      if (gassign *_a6 = dyn_cast <gassign *> (_d6))
												        switch (gimple_assign_rhs_code (_a6))
													  {
													  case NEGATE_EXPR:
													    {
													      tree _q90 = gimple_assign_rhs1 (_a6);
													      _q90 = do_valueize (valueize, _q90);
													      switch (TREE_CODE (_q90))
													        {
														case SSA_NAME:
														  if (gimple *_d7 = get_def (valueize, _q90))
														    {
														      if (gassign *_a7 = dyn_cast <gassign *> (_d7))
														        switch (gimple_assign_rhs_code (_a7))
															  {
															  CASE_CONVERT:
															    {
															      tree _q100 = gimple_assign_rhs1 (_a7);
															      _q100 = do_valueize (valueize, _q100);
															      switch (TREE_CODE (_q100))
															        {
																case SSA_NAME:
																  if (gimple *_d8 = get_def (valueize, _q100))
																    {
																      if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																        switch (gimple_assign_rhs_code (_a8))
																	  {
																	  case LT_EXPR:
																	    {
																	      tree _q110 = gimple_assign_rhs1 (_a8);
																	      _q110 = do_valueize (valueize, _q110);
																	      tree _q111 = gimple_assign_rhs2 (_a8);
																	      _q111 = do_valueize (valueize, _q111);
																	      if ((_q110 == _q50 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q50, 0) && types_match (_q110, _q50)))
																		{
																		  if (integer_zerop (_q111))
																		    {
																		      switch (TREE_CODE (_q81))
																		        {
																			case INTEGER_CST:
																			  {
																			    switch (TREE_CODE (_p2))
																			      {
																			      case SSA_NAME:
																			        if (gimple *_d9 = get_def (valueize, _p2))
																			          {
																				    if (gassign *_a9 = dyn_cast <gassign *> (_d9))
																				      switch (gimple_assign_rhs_code (_a9))
																					{
																					CASE_CONVERT:
																					  {
																					    tree _q150 = gimple_assign_rhs1 (_a9);
																					    _q150 = do_valueize (valueize, _q150);
																					    if ((_q150 == _q50 && ! TREE_SIDE_EFFECTS (_q150)) || (operand_equal_p (_q150, _q50, 0) && types_match (_q150, _q50)))
																					      {
																						{
																						  tree captures[5] ATTRIBUTE_UNUSED = { _q50, _q31, _q30, _q21, _q81 };
																						  if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type)
)
																						    {
																						      if (!TYPE_UNSIGNED (TREE_TYPE (captures[0])) && TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
																							{
																							  {
 unsigned itype_prec = TYPE_PRECISION (TREE_TYPE (captures[0]));
 unsigned otype_prec = TYPE_PRECISION (type);
 wide_int offset = wi::uhwi (HOST_WIDE_INT_1U << (otype_prec - 1),
 itype_prec);
 wide_int limit_0 = wi::mask (otype_prec, false, itype_prec);
 wide_int limit_1 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 3,
 itype_prec);
 wide_int limit_2 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 2,
 itype_prec);
 wide_int otype_max = wi::mask (otype_prec - 1, false, otype_prec);
 wide_int itype_max = wi::mask (otype_prec - 1, false, itype_prec);
 wide_int int_cst_1 = wi::to_wide (captures[2]);
 wide_int int_cst_2 = wi::to_wide (captures[3]);
 wide_int int_cst_3 = wi::to_wide (captures[4]);
																							      if (((wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_0))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_1)))
 && wi::eq_p (int_cst_3, otype_max)
)
																								{
																								  {
																								    res_ops[0] = captures[0];
																								    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 81, __FILE__, __LINE__, false);
																								    return true;
																								  }
																								}
																							  }
																							}
																						    }
																						}
																					      }
																					    break;
																					  }
																					default:;
																					}
																			          }
																			        break;
																			      default:;
																			      }
																			    break;
																			  }
																		        default:;
																		        }
																		    }
																	        }
																	      break;
																	    }
																	  default:;
																	  }
																    }
																  break;
															        default:;
															        }
															      break;
															    }
															  default:;
															  }
														    }
														  break;
													        default:;
													        }
													      break;
													    }
													  default:;
													  }
												    }
												  break;
												case INTEGER_CST:
												  {
												    switch (TREE_CODE (_q81))
												      {
												      case SSA_NAME:
												        if (gimple *_d6 = get_def (valueize, _q81))
												          {
													    if (gassign *_a6 = dyn_cast <gassign *> (_d6))
													      switch (gimple_assign_rhs_code (_a6))
														{
														case NEGATE_EXPR:
														  {
														    tree _q100 = gimple_assign_rhs1 (_a6);
														    _q100 = do_valueize (valueize, _q100);
														    switch (TREE_CODE (_q100))
														      {
														      case SSA_NAME:
														        if (gimple *_d7 = get_def (valueize, _q100))
														          {
															    if (gassign *_a7 = dyn_cast <gassign *> (_d7))
															      switch (gimple_assign_rhs_code (_a7))
																{
																CASE_CONVERT:
																  {
																    tree _q110 = gimple_assign_rhs1 (_a7);
																    _q110 = do_valueize (valueize, _q110);
																    switch (TREE_CODE (_q110))
																      {
																      case SSA_NAME:
																        if (gimple *_d8 = get_def (valueize, _q110))
																          {
																	    if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																	      switch (gimple_assign_rhs_code (_a8))
																		{
																		case LT_EXPR:
																		  {
																		    tree _q120 = gimple_assign_rhs1 (_a8);
																		    _q120 = do_valueize (valueize, _q120);
																		    tree _q121 = gimple_assign_rhs2 (_a8);
																		    _q121 = do_valueize (valueize, _q121);
																		    if ((_q120 == _q50 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q50, 0) && types_match (_q120, _q50)))
																		      {
																			if (integer_zerop (_q121))
																			  {
																			    switch (TREE_CODE (_p2))
																			      {
																			      case SSA_NAME:
																			        if (gimple *_d9 = get_def (valueize, _p2))
																			          {
																				    if (gassign *_a9 = dyn_cast <gassign *> (_d9))
																				      switch (gimple_assign_rhs_code (_a9))
																					{
																					CASE_CONVERT:
																					  {
																					    tree _q150 = gimple_assign_rhs1 (_a9);
																					    _q150 = do_valueize (valueize, _q150);
																					    if ((_q150 == _q50 && ! TREE_SIDE_EFFECTS (_q150)) || (operand_equal_p (_q150, _q50, 0) && types_match (_q150, _q50)))
																					      {
																						{
																						  tree captures[5] ATTRIBUTE_UNUSED = { _q50, _q31, _q30, _q21, _q80 };
																						  if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type)
)
																						    {
																						      if (!TYPE_UNSIGNED (TREE_TYPE (captures[0])) && TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
																							{
																							  {
 unsigned itype_prec = TYPE_PRECISION (TREE_TYPE (captures[0]));
 unsigned otype_prec = TYPE_PRECISION (type);
 wide_int offset = wi::uhwi (HOST_WIDE_INT_1U << (otype_prec - 1),
 itype_prec);
 wide_int limit_0 = wi::mask (otype_prec, false, itype_prec);
 wide_int limit_1 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 3,
 itype_prec);
 wide_int limit_2 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 2,
 itype_prec);
 wide_int otype_max = wi::mask (otype_prec - 1, false, otype_prec);
 wide_int itype_max = wi::mask (otype_prec - 1, false, itype_prec);
 wide_int int_cst_1 = wi::to_wide (captures[2]);
 wide_int int_cst_2 = wi::to_wide (captures[3]);
 wide_int int_cst_3 = wi::to_wide (captures[4]);
																							      if (((wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_0))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_1)))
 && wi::eq_p (int_cst_3, otype_max)
)
																								{
																								  {
																								    res_ops[0] = captures[0];
																								    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 81, __FILE__, __LINE__, false);
																								    return true;
																								  }
																								}
																							  }
																							}
																						    }
																						}
																					      }
																					    break;
																					  }
																					default:;
																					}
																			          }
																			        break;
																			      default:;
																			      }
																			  }
																		      }
																		    break;
																		  }
																		default:;
																		}
																          }
																        break;
																      default:;
																      }
																    break;
																  }
																default:;
																}
														          }
														        break;
														      default:;
														      }
														    break;
														  }
														default:;
														}
												          }
												        break;
												      default:;
												      }
												  {
												    tree _q81_pops[1];
												    if (gimple_nop_convert (_q81, _q81_pops, valueize))
												      {
													tree _q100 = _q81_pops[0];
													switch (TREE_CODE (_q100))
													  {
													  case SSA_NAME:
													    if (gimple *_d6 = get_def (valueize, _q100))
													      {
														if (gassign *_a6 = dyn_cast <gassign *> (_d6))
														  switch (gimple_assign_rhs_code (_a6))
														    {
														    case NEGATE_EXPR:
														      {
															tree _q110 = gimple_assign_rhs1 (_a6);
															_q110 = do_valueize (valueize, _q110);
															{
															  tree _q110_pops[1];
															  if (gimple_nop_convert (_q110, _q110_pops, valueize))
															    {
															      tree _q120 = _q110_pops[0];
															      switch (TREE_CODE (_q120))
															        {
																case SSA_NAME:
																  if (gimple *_d7 = get_def (valueize, _q120))
																    {
																      if (gassign *_a7 = dyn_cast <gassign *> (_d7))
																        switch (gimple_assign_rhs_code (_a7))
																	  {
																	  CASE_CONVERT:
																	    {
																	      tree _q130 = gimple_assign_rhs1 (_a7);
																	      _q130 = do_valueize (valueize, _q130);
																	      switch (TREE_CODE (_q130))
																	        {
																		case SSA_NAME:
																		  if (gimple *_d8 = get_def (valueize, _q130))
																		    {
																		      if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																		        switch (gimple_assign_rhs_code (_a8))
																			  {
																			  case LT_EXPR:
																			    {
																			      tree _q140 = gimple_assign_rhs1 (_a8);
																			      _q140 = do_valueize (valueize, _q140);
																			      tree _q141 = gimple_assign_rhs2 (_a8);
																			      _q141 = do_valueize (valueize, _q141);
																			      if ((_q140 == _q50 && ! TREE_SIDE_EFFECTS (_q140)) || (operand_equal_p (_q140, _q50, 0) && types_match (_q140, _q50)))
																				{
																				  if (integer_zerop (_q141))
																				    {
																				      switch (TREE_CODE (_p2))
																				        {
																					case SSA_NAME:
																					  if (gimple *_d9 = get_def (valueize, _p2))
																					    {
																					      if (gassign *_a9 = dyn_cast <gassign *> (_d9))
																					        switch (gimple_assign_rhs_code (_a9))
																						  {
																						  CASE_CONVERT:
																						    {
																						      tree _q170 = gimple_assign_rhs1 (_a9);
																						      _q170 = do_valueize (valueize, _q170);
																						      if ((_q170 == _q50 && ! TREE_SIDE_EFFECTS (_q170)) || (operand_equal_p (_q170, _q50, 0) && types_match (_q170, _q50)))
																							{
																							  {
																							    tree captures[5] ATTRIBUTE_UNUSED = { _q50, _q31, _q30, _q21, _q80 };
																							    if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type)
)
																							      {
																								if (!TYPE_UNSIGNED (TREE_TYPE (captures[0])) && TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
																								  {
																								    {
 unsigned itype_prec = TYPE_PRECISION (TREE_TYPE (captures[0]));
 unsigned otype_prec = TYPE_PRECISION (type);
 wide_int offset = wi::uhwi (HOST_WIDE_INT_1U << (otype_prec - 1),
 itype_prec);
 wide_int limit_0 = wi::mask (otype_prec, false, itype_prec);
 wide_int limit_1 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 3,
 itype_prec);
 wide_int limit_2 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 2,
 itype_prec);
 wide_int otype_max = wi::mask (otype_prec - 1, false, otype_prec);
 wide_int itype_max = wi::mask (otype_prec - 1, false, itype_prec);
 wide_int int_cst_1 = wi::to_wide (captures[2]);
 wide_int int_cst_2 = wi::to_wide (captures[3]);
 wide_int int_cst_3 = wi::to_wide (captures[4]);
																									if (((wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_0))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_1)))
 && wi::eq_p (int_cst_3, otype_max)
)
																									  {
																									    {
																									      res_ops[0] = captures[0];
																									      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 81, __FILE__, __LINE__, false);
																									      return true;
																									    }
																									  }
																								    }
																								  }
																							      }
																							  }
																						        }
																						      break;
																						    }
																						  default:;
																						  }
																					    }
																					  break;
																				        default:;
																				        }
																				    }
																			        }
																			      break;
																			    }
																			  default:;
																			  }
																		    }
																		  break;
																	        default:;
																	        }
																	      break;
																	    }
																	  default:;
																	  }
																    }
																  break;
															        default:;
															        }
															    }
															}
														        break;
														      }
														    default:;
														    }
													      }
													    break;
												          default:;
												          }
												      }
												  }
												    break;
												  }
											        default:;
											        }
											    {
											      tree _q80_pops[1];
											      if (gimple_nop_convert (_q80, _q80_pops, valueize))
											        {
												  tree _q90 = _q80_pops[0];
												  switch (TREE_CODE (_q90))
												    {
												    case SSA_NAME:
												      if (gimple *_d6 = get_def (valueize, _q90))
												        {
													  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
													    switch (gimple_assign_rhs_code (_a6))
													      {
													      case NEGATE_EXPR:
													        {
														  tree _q100 = gimple_assign_rhs1 (_a6);
														  _q100 = do_valueize (valueize, _q100);
														  {
														    tree _q100_pops[1];
														    if (gimple_nop_convert (_q100, _q100_pops, valueize))
														      {
															tree _q110 = _q100_pops[0];
															switch (TREE_CODE (_q110))
															  {
															  case SSA_NAME:
															    if (gimple *_d7 = get_def (valueize, _q110))
															      {
																if (gassign *_a7 = dyn_cast <gassign *> (_d7))
																  switch (gimple_assign_rhs_code (_a7))
																    {
																    CASE_CONVERT:
																      {
																	tree _q120 = gimple_assign_rhs1 (_a7);
																	_q120 = do_valueize (valueize, _q120);
																	switch (TREE_CODE (_q120))
																	  {
																	  case SSA_NAME:
																	    if (gimple *_d8 = get_def (valueize, _q120))
																	      {
																		if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																		  switch (gimple_assign_rhs_code (_a8))
																		    {
																		    case LT_EXPR:
																		      {
																			tree _q130 = gimple_assign_rhs1 (_a8);
																			_q130 = do_valueize (valueize, _q130);
																			tree _q131 = gimple_assign_rhs2 (_a8);
																			_q131 = do_valueize (valueize, _q131);
																			if ((_q130 == _q50 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q50, 0) && types_match (_q130, _q50)))
																			  {
																			    if (integer_zerop (_q131))
																			      {
																				switch (TREE_CODE (_q81))
																				  {
																				  case INTEGER_CST:
																				    {
																				      switch (TREE_CODE (_p2))
																				        {
																					case SSA_NAME:
																					  if (gimple *_d9 = get_def (valueize, _p2))
																					    {
																					      if (gassign *_a9 = dyn_cast <gassign *> (_d9))
																					        switch (gimple_assign_rhs_code (_a9))
																						  {
																						  CASE_CONVERT:
																						    {
																						      tree _q170 = gimple_assign_rhs1 (_a9);
																						      _q170 = do_valueize (valueize, _q170);
																						      if ((_q170 == _q50 && ! TREE_SIDE_EFFECTS (_q170)) || (operand_equal_p (_q170, _q50, 0) && types_match (_q170, _q50)))
																							{
																							  {
																							    tree captures[5] ATTRIBUTE_UNUSED = { _q50, _q31, _q30, _q21, _q81 };
																							    if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type)
)
																							      {
																								if (!TYPE_UNSIGNED (TREE_TYPE (captures[0])) && TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
																								  {
																								    {
 unsigned itype_prec = TYPE_PRECISION (TREE_TYPE (captures[0]));
 unsigned otype_prec = TYPE_PRECISION (type);
 wide_int offset = wi::uhwi (HOST_WIDE_INT_1U << (otype_prec - 1),
 itype_prec);
 wide_int limit_0 = wi::mask (otype_prec, false, itype_prec);
 wide_int limit_1 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 3,
 itype_prec);
 wide_int limit_2 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 2,
 itype_prec);
 wide_int otype_max = wi::mask (otype_prec - 1, false, otype_prec);
 wide_int itype_max = wi::mask (otype_prec - 1, false, itype_prec);
 wide_int int_cst_1 = wi::to_wide (captures[2]);
 wide_int int_cst_2 = wi::to_wide (captures[3]);
 wide_int int_cst_3 = wi::to_wide (captures[4]);
																									if (((wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_0))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_1)))
 && wi::eq_p (int_cst_3, otype_max)
)
																									  {
																									    {
																									      res_ops[0] = captures[0];
																									      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 81, __FILE__, __LINE__, false);
																									      return true;
																									    }
																									  }
																								    }
																								  }
																							      }
																							  }
																						        }
																						      break;
																						    }
																						  default:;
																						  }
																					    }
																					  break;
																				        default:;
																				        }
																				      break;
																				    }
																			          default:;
																			          }
																			      }
																			  }
																		        break;
																		      }
																		    default:;
																		    }
																	      }
																	    break;
																          default:;
																          }
																        break;
																      }
																    default:;
																    }
															      }
															    break;
														          default:;
														          }
														      }
														  }
													          break;
													        }
													      default:;
													      }
												        }
												      break;
												    default:;
												    }
											        }
											    }
											      break;
											    }
											  default:;
											  }
										    }
										  break;
									        default:;
									        }
									      break;
									    }
								          default:;
								          }
								        break;
								      }
								    default:;
								    }
							      }
							    break;
						          default:;
						          }
						        break;
						      }
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    case GT_EXPR:
		      {
			tree _q20 = TREE_OPERAND (_p0, 0);
			if ((TREE_CODE (_q20) == SSA_NAME
			     || is_gimple_min_invariant (_q20)))
			  {
			    _q20 = do_valueize (valueize, _q20);
			    tree _q21 = TREE_OPERAND (_p0, 1);
			    if ((TREE_CODE (_q21) == SSA_NAME
			         || is_gimple_min_invariant (_q21)))
			      {
				_q21 = do_valueize (valueize, _q21);
				switch (TREE_CODE (_q20))
				  {
				  case SSA_NAME:
				    if (gimple *_d2 = get_def (valueize, _q20))
				      {
					if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					  switch (gimple_assign_rhs_code (_a2))
					    {
					    case PLUS_EXPR:
					      {
						tree _q30 = gimple_assign_rhs1 (_a2);
						_q30 = do_valueize (valueize, _q30);
						tree _q31 = gimple_assign_rhs2 (_a2);
						_q31 = do_valueize (valueize, _q31);
						if (tree_swap_operands_p (_q30, _q31))
						  std::swap (_q30, _q31);
						switch (TREE_CODE (_q30))
						  {
						  case SSA_NAME:
						    if (gimple *_d3 = get_def (valueize, _q30))
						      {
							if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							  switch (gimple_assign_rhs_code (_a3))
							    {
							    CASE_CONVERT:
							      {
								tree _q40 = gimple_assign_rhs1 (_a3);
								_q40 = do_valueize (valueize, _q40);
								switch (TREE_CODE (_q31))
								  {
								  case INTEGER_CST:
								    {
								      switch (TREE_CODE (_q21))
								        {
									case INTEGER_CST:
									  {
									    switch (TREE_CODE (_p1))
									      {
									      case SSA_NAME:
									        if (gimple *_d4 = get_def (valueize, _p1))
									          {
										    if (gassign *_a4 = dyn_cast <gassign *> (_d4))
										      switch (gimple_assign_rhs_code (_a4))
											{
											case BIT_XOR_EXPR:
											  {
											    tree _q80 = gimple_assign_rhs1 (_a4);
											    _q80 = do_valueize (valueize, _q80);
											    tree _q81 = gimple_assign_rhs2 (_a4);
											    _q81 = do_valueize (valueize, _q81);
											    if (tree_swap_operands_p (_q80, _q81))
											      std::swap (_q80, _q81);
											    switch (TREE_CODE (_q80))
											      {
											      case SSA_NAME:
											        if (gimple *_d5 = get_def (valueize, _q80))
											          {
												    if (gassign *_a5 = dyn_cast <gassign *> (_d5))
												      switch (gimple_assign_rhs_code (_a5))
													{
													case NEGATE_EXPR:
													  {
													    tree _q90 = gimple_assign_rhs1 (_a5);
													    _q90 = do_valueize (valueize, _q90);
													    switch (TREE_CODE (_q90))
													      {
													      case SSA_NAME:
													        if (gimple *_d6 = get_def (valueize, _q90))
													          {
														    if (gassign *_a6 = dyn_cast <gassign *> (_d6))
														      switch (gimple_assign_rhs_code (_a6))
															{
															CASE_CONVERT:
															  {
															    tree _q100 = gimple_assign_rhs1 (_a6);
															    _q100 = do_valueize (valueize, _q100);
															    switch (TREE_CODE (_q100))
															      {
															      case SSA_NAME:
															        if (gimple *_d7 = get_def (valueize, _q100))
															          {
																    if (gassign *_a7 = dyn_cast <gassign *> (_d7))
																      switch (gimple_assign_rhs_code (_a7))
																	{
																	case LT_EXPR:
																	  {
																	    tree _q110 = gimple_assign_rhs1 (_a7);
																	    _q110 = do_valueize (valueize, _q110);
																	    tree _q111 = gimple_assign_rhs2 (_a7);
																	    _q111 = do_valueize (valueize, _q111);
																	    if ((_q110 == _q40 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q40, 0) && types_match (_q110, _q40)))
																	      {
																		if (integer_zerop (_q111))
																		  {
																		    switch (TREE_CODE (_q81))
																		      {
																		      case INTEGER_CST:
																		        {
																			  switch (TREE_CODE (_p2))
																			    {
																			    case SSA_NAME:
																			      if (gimple *_d8 = get_def (valueize, _p2))
																			        {
																				  if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																				    switch (gimple_assign_rhs_code (_a8))
																				      {
																				      CASE_CONVERT:
																				        {
																					  tree _q150 = gimple_assign_rhs1 (_a8);
																					  _q150 = do_valueize (valueize, _q150);
																					  if ((_q150 == _q40 && ! TREE_SIDE_EFFECTS (_q150)) || (operand_equal_p (_q150, _q40, 0) && types_match (_q150, _q40)))
																					    {
																					      {
																						tree captures[5] ATTRIBUTE_UNUSED = { _q40, _q30, _q31, _q21, _q81 };
																						if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type)
)
																						  {
																						    if (!TYPE_UNSIGNED (TREE_TYPE (captures[0])) && TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
																						      {
																							{
 unsigned itype_prec = TYPE_PRECISION (TREE_TYPE (captures[0]));
 unsigned otype_prec = TYPE_PRECISION (type);
 wide_int offset = wi::uhwi (HOST_WIDE_INT_1U << (otype_prec - 1),
 itype_prec);
 wide_int limit_0 = wi::mask (otype_prec, false, itype_prec);
 wide_int limit_1 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 3,
 itype_prec);
 wide_int limit_2 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 2,
 itype_prec);
 wide_int otype_max = wi::mask (otype_prec - 1, false, otype_prec);
 wide_int itype_max = wi::mask (otype_prec - 1, false, itype_prec);
 wide_int int_cst_1 = wi::to_wide (captures[2]);
 wide_int int_cst_2 = wi::to_wide (captures[3]);
 wide_int int_cst_3 = wi::to_wide (captures[4]);
																							    if (((wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_0))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_1)))
 && wi::eq_p (int_cst_3, otype_max)
)
																							      {
																								{
																								  res_ops[0] = captures[0];
																								  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 81, __FILE__, __LINE__, false);
																								  return true;
																								}
																							      }
																							}
																						      }
																						  }
																					      }
																					    }
																				          break;
																				        }
																				      default:;
																				      }
																			        }
																			      break;
																			    default:;
																			    }
																		          break;
																		        }
																		      default:;
																		      }
																		  }
																	      }
																	    break;
																	  }
																	default:;
																	}
															          }
															        break;
															      default:;
															      }
															    break;
															  }
															default:;
															}
													          }
													        break;
													      default:;
													      }
													    break;
													  }
													default:;
													}
											          }
											        break;
											      case INTEGER_CST:
											        {
												  switch (TREE_CODE (_q81))
												    {
												    case SSA_NAME:
												      if (gimple *_d5 = get_def (valueize, _q81))
												        {
													  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
													    switch (gimple_assign_rhs_code (_a5))
													      {
													      case NEGATE_EXPR:
													        {
														  tree _q100 = gimple_assign_rhs1 (_a5);
														  _q100 = do_valueize (valueize, _q100);
														  switch (TREE_CODE (_q100))
														    {
														    case SSA_NAME:
														      if (gimple *_d6 = get_def (valueize, _q100))
														        {
															  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
															    switch (gimple_assign_rhs_code (_a6))
															      {
															      CASE_CONVERT:
															        {
																  tree _q110 = gimple_assign_rhs1 (_a6);
																  _q110 = do_valueize (valueize, _q110);
																  switch (TREE_CODE (_q110))
																    {
																    case SSA_NAME:
																      if (gimple *_d7 = get_def (valueize, _q110))
																        {
																	  if (gassign *_a7 = dyn_cast <gassign *> (_d7))
																	    switch (gimple_assign_rhs_code (_a7))
																	      {
																	      case LT_EXPR:
																	        {
																		  tree _q120 = gimple_assign_rhs1 (_a7);
																		  _q120 = do_valueize (valueize, _q120);
																		  tree _q121 = gimple_assign_rhs2 (_a7);
																		  _q121 = do_valueize (valueize, _q121);
																		  if ((_q120 == _q40 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q40, 0) && types_match (_q120, _q40)))
																		    {
																		      if (integer_zerop (_q121))
																			{
																			  switch (TREE_CODE (_p2))
																			    {
																			    case SSA_NAME:
																			      if (gimple *_d8 = get_def (valueize, _p2))
																			        {
																				  if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																				    switch (gimple_assign_rhs_code (_a8))
																				      {
																				      CASE_CONVERT:
																				        {
																					  tree _q150 = gimple_assign_rhs1 (_a8);
																					  _q150 = do_valueize (valueize, _q150);
																					  if ((_q150 == _q40 && ! TREE_SIDE_EFFECTS (_q150)) || (operand_equal_p (_q150, _q40, 0) && types_match (_q150, _q40)))
																					    {
																					      {
																						tree captures[5] ATTRIBUTE_UNUSED = { _q40, _q30, _q31, _q21, _q80 };
																						if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type)
)
																						  {
																						    if (!TYPE_UNSIGNED (TREE_TYPE (captures[0])) && TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
																						      {
																							{
 unsigned itype_prec = TYPE_PRECISION (TREE_TYPE (captures[0]));
 unsigned otype_prec = TYPE_PRECISION (type);
 wide_int offset = wi::uhwi (HOST_WIDE_INT_1U << (otype_prec - 1),
 itype_prec);
 wide_int limit_0 = wi::mask (otype_prec, false, itype_prec);
 wide_int limit_1 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 3,
 itype_prec);
 wide_int limit_2 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 2,
 itype_prec);
 wide_int otype_max = wi::mask (otype_prec - 1, false, otype_prec);
 wide_int itype_max = wi::mask (otype_prec - 1, false, itype_prec);
 wide_int int_cst_1 = wi::to_wide (captures[2]);
 wide_int int_cst_2 = wi::to_wide (captures[3]);
 wide_int int_cst_3 = wi::to_wide (captures[4]);
																							    if (((wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_0))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_1)))
 && wi::eq_p (int_cst_3, otype_max)
)
																							      {
																								{
																								  res_ops[0] = captures[0];
																								  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 81, __FILE__, __LINE__, false);
																								  return true;
																								}
																							      }
																							}
																						      }
																						  }
																					      }
																					    }
																				          break;
																				        }
																				      default:;
																				      }
																			        }
																			      break;
																			    default:;
																			    }
																		        }
																		    }
																	          break;
																	        }
																	      default:;
																	      }
																        }
																      break;
																    default:;
																    }
															          break;
															        }
															      default:;
															      }
														        }
														      break;
														    default:;
														    }
													          break;
													        }
													      default:;
													      }
												        }
												      break;
												    default:;
												    }
												{
												  tree _q81_pops[1];
												  if (gimple_nop_convert (_q81, _q81_pops, valueize))
												    {
												      tree _q100 = _q81_pops[0];
												      switch (TREE_CODE (_q100))
												        {
													case SSA_NAME:
													  if (gimple *_d5 = get_def (valueize, _q100))
													    {
													      if (gassign *_a5 = dyn_cast <gassign *> (_d5))
													        switch (gimple_assign_rhs_code (_a5))
														  {
														  case NEGATE_EXPR:
														    {
														      tree _q110 = gimple_assign_rhs1 (_a5);
														      _q110 = do_valueize (valueize, _q110);
														      {
															tree _q110_pops[1];
															if (gimple_nop_convert (_q110, _q110_pops, valueize))
															  {
															    tree _q120 = _q110_pops[0];
															    switch (TREE_CODE (_q120))
															      {
															      case SSA_NAME:
															        if (gimple *_d6 = get_def (valueize, _q120))
															          {
																    if (gassign *_a6 = dyn_cast <gassign *> (_d6))
																      switch (gimple_assign_rhs_code (_a6))
																	{
																	CASE_CONVERT:
																	  {
																	    tree _q130 = gimple_assign_rhs1 (_a6);
																	    _q130 = do_valueize (valueize, _q130);
																	    switch (TREE_CODE (_q130))
																	      {
																	      case SSA_NAME:
																	        if (gimple *_d7 = get_def (valueize, _q130))
																	          {
																		    if (gassign *_a7 = dyn_cast <gassign *> (_d7))
																		      switch (gimple_assign_rhs_code (_a7))
																			{
																			case LT_EXPR:
																			  {
																			    tree _q140 = gimple_assign_rhs1 (_a7);
																			    _q140 = do_valueize (valueize, _q140);
																			    tree _q141 = gimple_assign_rhs2 (_a7);
																			    _q141 = do_valueize (valueize, _q141);
																			    if ((_q140 == _q40 && ! TREE_SIDE_EFFECTS (_q140)) || (operand_equal_p (_q140, _q40, 0) && types_match (_q140, _q40)))
																			      {
																				if (integer_zerop (_q141))
																				  {
																				    switch (TREE_CODE (_p2))
																				      {
																				      case SSA_NAME:
																				        if (gimple *_d8 = get_def (valueize, _p2))
																				          {
																					    if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																					      switch (gimple_assign_rhs_code (_a8))
																						{
																						CASE_CONVERT:
																						  {
																						    tree _q170 = gimple_assign_rhs1 (_a8);
																						    _q170 = do_valueize (valueize, _q170);
																						    if ((_q170 == _q40 && ! TREE_SIDE_EFFECTS (_q170)) || (operand_equal_p (_q170, _q40, 0) && types_match (_q170, _q40)))
																						      {
																							{
																							  tree captures[5] ATTRIBUTE_UNUSED = { _q40, _q30, _q31, _q21, _q80 };
																							  if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type)
)
																							    {
																							      if (!TYPE_UNSIGNED (TREE_TYPE (captures[0])) && TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
																								{
																								  {
 unsigned itype_prec = TYPE_PRECISION (TREE_TYPE (captures[0]));
 unsigned otype_prec = TYPE_PRECISION (type);
 wide_int offset = wi::uhwi (HOST_WIDE_INT_1U << (otype_prec - 1),
 itype_prec);
 wide_int limit_0 = wi::mask (otype_prec, false, itype_prec);
 wide_int limit_1 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 3,
 itype_prec);
 wide_int limit_2 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 2,
 itype_prec);
 wide_int otype_max = wi::mask (otype_prec - 1, false, otype_prec);
 wide_int itype_max = wi::mask (otype_prec - 1, false, itype_prec);
 wide_int int_cst_1 = wi::to_wide (captures[2]);
 wide_int int_cst_2 = wi::to_wide (captures[3]);
 wide_int int_cst_3 = wi::to_wide (captures[4]);
																								      if (((wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_0))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_1)))
 && wi::eq_p (int_cst_3, otype_max)
)
																									{
																									  {
																									    res_ops[0] = captures[0];
																									    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 81, __FILE__, __LINE__, false);
																									    return true;
																									  }
																									}
																								  }
																								}
																							    }
																							}
																						      }
																						    break;
																						  }
																						default:;
																						}
																				          }
																				        break;
																				      default:;
																				      }
																				  }
																			      }
																			    break;
																			  }
																			default:;
																			}
																	          }
																	        break;
																	      default:;
																	      }
																	    break;
																	  }
																	default:;
																	}
															          }
															        break;
															      default:;
															      }
															  }
														      }
														      break;
														    }
														  default:;
														  }
													    }
													  break;
												        default:;
												        }
												    }
												}
											          break;
											        }
											      default:;
											      }
											  {
											    tree _q80_pops[1];
											    if (gimple_nop_convert (_q80, _q80_pops, valueize))
											      {
												tree _q90 = _q80_pops[0];
												switch (TREE_CODE (_q90))
												  {
												  case SSA_NAME:
												    if (gimple *_d5 = get_def (valueize, _q90))
												      {
													if (gassign *_a5 = dyn_cast <gassign *> (_d5))
													  switch (gimple_assign_rhs_code (_a5))
													    {
													    case NEGATE_EXPR:
													      {
														tree _q100 = gimple_assign_rhs1 (_a5);
														_q100 = do_valueize (valueize, _q100);
														{
														  tree _q100_pops[1];
														  if (gimple_nop_convert (_q100, _q100_pops, valueize))
														    {
														      tree _q110 = _q100_pops[0];
														      switch (TREE_CODE (_q110))
														        {
															case SSA_NAME:
															  if (gimple *_d6 = get_def (valueize, _q110))
															    {
															      if (gassign *_a6 = dyn_cast <gassign *> (_d6))
															        switch (gimple_assign_rhs_code (_a6))
																  {
																  CASE_CONVERT:
																    {
																      tree _q120 = gimple_assign_rhs1 (_a6);
																      _q120 = do_valueize (valueize, _q120);
																      switch (TREE_CODE (_q120))
																        {
																	case SSA_NAME:
																	  if (gimple *_d7 = get_def (valueize, _q120))
																	    {
																	      if (gassign *_a7 = dyn_cast <gassign *> (_d7))
																	        switch (gimple_assign_rhs_code (_a7))
																		  {
																		  case LT_EXPR:
																		    {
																		      tree _q130 = gimple_assign_rhs1 (_a7);
																		      _q130 = do_valueize (valueize, _q130);
																		      tree _q131 = gimple_assign_rhs2 (_a7);
																		      _q131 = do_valueize (valueize, _q131);
																		      if ((_q130 == _q40 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q40, 0) && types_match (_q130, _q40)))
																			{
																			  if (integer_zerop (_q131))
																			    {
																			      switch (TREE_CODE (_q81))
																			        {
																				case INTEGER_CST:
																				  {
																				    switch (TREE_CODE (_p2))
																				      {
																				      case SSA_NAME:
																				        if (gimple *_d8 = get_def (valueize, _p2))
																				          {
																					    if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																					      switch (gimple_assign_rhs_code (_a8))
																						{
																						CASE_CONVERT:
																						  {
																						    tree _q170 = gimple_assign_rhs1 (_a8);
																						    _q170 = do_valueize (valueize, _q170);
																						    if ((_q170 == _q40 && ! TREE_SIDE_EFFECTS (_q170)) || (operand_equal_p (_q170, _q40, 0) && types_match (_q170, _q40)))
																						      {
																							{
																							  tree captures[5] ATTRIBUTE_UNUSED = { _q40, _q30, _q31, _q21, _q81 };
																							  if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type)
)
																							    {
																							      if (!TYPE_UNSIGNED (TREE_TYPE (captures[0])) && TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
																								{
																								  {
 unsigned itype_prec = TYPE_PRECISION (TREE_TYPE (captures[0]));
 unsigned otype_prec = TYPE_PRECISION (type);
 wide_int offset = wi::uhwi (HOST_WIDE_INT_1U << (otype_prec - 1),
 itype_prec);
 wide_int limit_0 = wi::mask (otype_prec, false, itype_prec);
 wide_int limit_1 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 3,
 itype_prec);
 wide_int limit_2 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 2,
 itype_prec);
 wide_int otype_max = wi::mask (otype_prec - 1, false, otype_prec);
 wide_int itype_max = wi::mask (otype_prec - 1, false, itype_prec);
 wide_int int_cst_1 = wi::to_wide (captures[2]);
 wide_int int_cst_2 = wi::to_wide (captures[3]);
 wide_int int_cst_3 = wi::to_wide (captures[4]);
																								      if (((wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_0))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_1)))
 && wi::eq_p (int_cst_3, otype_max)
)
																									{
																									  {
																									    res_ops[0] = captures[0];
																									    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 81, __FILE__, __LINE__, false);
																									    return true;
																									  }
																									}
																								  }
																								}
																							    }
																							}
																						      }
																						    break;
																						  }
																						default:;
																						}
																				          }
																				        break;
																				      default:;
																				      }
																				    break;
																				  }
																			        default:;
																			        }
																			    }
																		        }
																		      break;
																		    }
																		  default:;
																		  }
																	    }
																	  break;
																        default:;
																        }
																      break;
																    }
																  default:;
																  }
															    }
															  break;
														        default:;
														        }
														    }
														}
													        break;
													      }
													    default:;
													    }
												      }
												    break;
											          default:;
											          }
											      }
											  }
											    break;
											  }
											default:;
											}
									          }
									        break;
									      default:;
									      }
									    break;
									  }
								        default:;
								        }
								      break;
								    }
							          default:;
							          }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
						  case INTEGER_CST:
						    {
						      switch (TREE_CODE (_q31))
						        {
							case SSA_NAME:
							  if (gimple *_d3 = get_def (valueize, _q31))
							    {
							      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							        switch (gimple_assign_rhs_code (_a3))
								  {
								  CASE_CONVERT:
								    {
								      tree _q50 = gimple_assign_rhs1 (_a3);
								      _q50 = do_valueize (valueize, _q50);
								      switch (TREE_CODE (_q21))
								        {
									case INTEGER_CST:
									  {
									    switch (TREE_CODE (_p1))
									      {
									      case SSA_NAME:
									        if (gimple *_d4 = get_def (valueize, _p1))
									          {
										    if (gassign *_a4 = dyn_cast <gassign *> (_d4))
										      switch (gimple_assign_rhs_code (_a4))
											{
											case BIT_XOR_EXPR:
											  {
											    tree _q80 = gimple_assign_rhs1 (_a4);
											    _q80 = do_valueize (valueize, _q80);
											    tree _q81 = gimple_assign_rhs2 (_a4);
											    _q81 = do_valueize (valueize, _q81);
											    if (tree_swap_operands_p (_q80, _q81))
											      std::swap (_q80, _q81);
											    switch (TREE_CODE (_q80))
											      {
											      case SSA_NAME:
											        if (gimple *_d5 = get_def (valueize, _q80))
											          {
												    if (gassign *_a5 = dyn_cast <gassign *> (_d5))
												      switch (gimple_assign_rhs_code (_a5))
													{
													case NEGATE_EXPR:
													  {
													    tree _q90 = gimple_assign_rhs1 (_a5);
													    _q90 = do_valueize (valueize, _q90);
													    switch (TREE_CODE (_q90))
													      {
													      case SSA_NAME:
													        if (gimple *_d6 = get_def (valueize, _q90))
													          {
														    if (gassign *_a6 = dyn_cast <gassign *> (_d6))
														      switch (gimple_assign_rhs_code (_a6))
															{
															CASE_CONVERT:
															  {
															    tree _q100 = gimple_assign_rhs1 (_a6);
															    _q100 = do_valueize (valueize, _q100);
															    switch (TREE_CODE (_q100))
															      {
															      case SSA_NAME:
															        if (gimple *_d7 = get_def (valueize, _q100))
															          {
																    if (gassign *_a7 = dyn_cast <gassign *> (_d7))
																      switch (gimple_assign_rhs_code (_a7))
																	{
																	case LT_EXPR:
																	  {
																	    tree _q110 = gimple_assign_rhs1 (_a7);
																	    _q110 = do_valueize (valueize, _q110);
																	    tree _q111 = gimple_assign_rhs2 (_a7);
																	    _q111 = do_valueize (valueize, _q111);
																	    if ((_q110 == _q50 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q50, 0) && types_match (_q110, _q50)))
																	      {
																		if (integer_zerop (_q111))
																		  {
																		    switch (TREE_CODE (_q81))
																		      {
																		      case INTEGER_CST:
																		        {
																			  switch (TREE_CODE (_p2))
																			    {
																			    case SSA_NAME:
																			      if (gimple *_d8 = get_def (valueize, _p2))
																			        {
																				  if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																				    switch (gimple_assign_rhs_code (_a8))
																				      {
																				      CASE_CONVERT:
																				        {
																					  tree _q150 = gimple_assign_rhs1 (_a8);
																					  _q150 = do_valueize (valueize, _q150);
																					  if ((_q150 == _q50 && ! TREE_SIDE_EFFECTS (_q150)) || (operand_equal_p (_q150, _q50, 0) && types_match (_q150, _q50)))
																					    {
																					      {
																						tree captures[5] ATTRIBUTE_UNUSED = { _q50, _q31, _q30, _q21, _q81 };
																						if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type)
)
																						  {
																						    if (!TYPE_UNSIGNED (TREE_TYPE (captures[0])) && TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
																						      {
																							{
 unsigned itype_prec = TYPE_PRECISION (TREE_TYPE (captures[0]));
 unsigned otype_prec = TYPE_PRECISION (type);
 wide_int offset = wi::uhwi (HOST_WIDE_INT_1U << (otype_prec - 1),
 itype_prec);
 wide_int limit_0 = wi::mask (otype_prec, false, itype_prec);
 wide_int limit_1 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 3,
 itype_prec);
 wide_int limit_2 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 2,
 itype_prec);
 wide_int otype_max = wi::mask (otype_prec - 1, false, otype_prec);
 wide_int itype_max = wi::mask (otype_prec - 1, false, itype_prec);
 wide_int int_cst_1 = wi::to_wide (captures[2]);
 wide_int int_cst_2 = wi::to_wide (captures[3]);
 wide_int int_cst_3 = wi::to_wide (captures[4]);
																							    if (((wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_0))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_1)))
 && wi::eq_p (int_cst_3, otype_max)
)
																							      {
																								{
																								  res_ops[0] = captures[0];
																								  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 81, __FILE__, __LINE__, false);
																								  return true;
																								}
																							      }
																							}
																						      }
																						  }
																					      }
																					    }
																				          break;
																				        }
																				      default:;
																				      }
																			        }
																			      break;
																			    default:;
																			    }
																		          break;
																		        }
																		      default:;
																		      }
																		  }
																	      }
																	    break;
																	  }
																	default:;
																	}
															          }
															        break;
															      default:;
															      }
															    break;
															  }
															default:;
															}
													          }
													        break;
													      default:;
													      }
													    break;
													  }
													default:;
													}
											          }
											        break;
											      case INTEGER_CST:
											        {
												  switch (TREE_CODE (_q81))
												    {
												    case SSA_NAME:
												      if (gimple *_d5 = get_def (valueize, _q81))
												        {
													  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
													    switch (gimple_assign_rhs_code (_a5))
													      {
													      case NEGATE_EXPR:
													        {
														  tree _q100 = gimple_assign_rhs1 (_a5);
														  _q100 = do_valueize (valueize, _q100);
														  switch (TREE_CODE (_q100))
														    {
														    case SSA_NAME:
														      if (gimple *_d6 = get_def (valueize, _q100))
														        {
															  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
															    switch (gimple_assign_rhs_code (_a6))
															      {
															      CASE_CONVERT:
															        {
																  tree _q110 = gimple_assign_rhs1 (_a6);
																  _q110 = do_valueize (valueize, _q110);
																  switch (TREE_CODE (_q110))
																    {
																    case SSA_NAME:
																      if (gimple *_d7 = get_def (valueize, _q110))
																        {
																	  if (gassign *_a7 = dyn_cast <gassign *> (_d7))
																	    switch (gimple_assign_rhs_code (_a7))
																	      {
																	      case LT_EXPR:
																	        {
																		  tree _q120 = gimple_assign_rhs1 (_a7);
																		  _q120 = do_valueize (valueize, _q120);
																		  tree _q121 = gimple_assign_rhs2 (_a7);
																		  _q121 = do_valueize (valueize, _q121);
																		  if ((_q120 == _q50 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q50, 0) && types_match (_q120, _q50)))
																		    {
																		      if (integer_zerop (_q121))
																			{
																			  switch (TREE_CODE (_p2))
																			    {
																			    case SSA_NAME:
																			      if (gimple *_d8 = get_def (valueize, _p2))
																			        {
																				  if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																				    switch (gimple_assign_rhs_code (_a8))
																				      {
																				      CASE_CONVERT:
																				        {
																					  tree _q150 = gimple_assign_rhs1 (_a8);
																					  _q150 = do_valueize (valueize, _q150);
																					  if ((_q150 == _q50 && ! TREE_SIDE_EFFECTS (_q150)) || (operand_equal_p (_q150, _q50, 0) && types_match (_q150, _q50)))
																					    {
																					      {
																						tree captures[5] ATTRIBUTE_UNUSED = { _q50, _q31, _q30, _q21, _q80 };
																						if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type)
)
																						  {
																						    if (!TYPE_UNSIGNED (TREE_TYPE (captures[0])) && TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
																						      {
																							{
 unsigned itype_prec = TYPE_PRECISION (TREE_TYPE (captures[0]));
 unsigned otype_prec = TYPE_PRECISION (type);
 wide_int offset = wi::uhwi (HOST_WIDE_INT_1U << (otype_prec - 1),
 itype_prec);
 wide_int limit_0 = wi::mask (otype_prec, false, itype_prec);
 wide_int limit_1 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 3,
 itype_prec);
 wide_int limit_2 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 2,
 itype_prec);
 wide_int otype_max = wi::mask (otype_prec - 1, false, otype_prec);
 wide_int itype_max = wi::mask (otype_prec - 1, false, itype_prec);
 wide_int int_cst_1 = wi::to_wide (captures[2]);
 wide_int int_cst_2 = wi::to_wide (captures[3]);
 wide_int int_cst_3 = wi::to_wide (captures[4]);
																							    if (((wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_0))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_1)))
 && wi::eq_p (int_cst_3, otype_max)
)
																							      {
																								{
																								  res_ops[0] = captures[0];
																								  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 81, __FILE__, __LINE__, false);
																								  return true;
																								}
																							      }
																							}
																						      }
																						  }
																					      }
																					    }
																				          break;
																				        }
																				      default:;
																				      }
																			        }
																			      break;
																			    default:;
																			    }
																		        }
																		    }
																	          break;
																	        }
																	      default:;
																	      }
																        }
																      break;
																    default:;
																    }
															          break;
															        }
															      default:;
															      }
														        }
														      break;
														    default:;
														    }
													          break;
													        }
													      default:;
													      }
												        }
												      break;
												    default:;
												    }
												{
												  tree _q81_pops[1];
												  if (gimple_nop_convert (_q81, _q81_pops, valueize))
												    {
												      tree _q100 = _q81_pops[0];
												      switch (TREE_CODE (_q100))
												        {
													case SSA_NAME:
													  if (gimple *_d5 = get_def (valueize, _q100))
													    {
													      if (gassign *_a5 = dyn_cast <gassign *> (_d5))
													        switch (gimple_assign_rhs_code (_a5))
														  {
														  case NEGATE_EXPR:
														    {
														      tree _q110 = gimple_assign_rhs1 (_a5);
														      _q110 = do_valueize (valueize, _q110);
														      {
															tree _q110_pops[1];
															if (gimple_nop_convert (_q110, _q110_pops, valueize))
															  {
															    tree _q120 = _q110_pops[0];
															    switch (TREE_CODE (_q120))
															      {
															      case SSA_NAME:
															        if (gimple *_d6 = get_def (valueize, _q120))
															          {
																    if (gassign *_a6 = dyn_cast <gassign *> (_d6))
																      switch (gimple_assign_rhs_code (_a6))
																	{
																	CASE_CONVERT:
																	  {
																	    tree _q130 = gimple_assign_rhs1 (_a6);
																	    _q130 = do_valueize (valueize, _q130);
																	    switch (TREE_CODE (_q130))
																	      {
																	      case SSA_NAME:
																	        if (gimple *_d7 = get_def (valueize, _q130))
																	          {
																		    if (gassign *_a7 = dyn_cast <gassign *> (_d7))
																		      switch (gimple_assign_rhs_code (_a7))
																			{
																			case LT_EXPR:
																			  {
																			    tree _q140 = gimple_assign_rhs1 (_a7);
																			    _q140 = do_valueize (valueize, _q140);
																			    tree _q141 = gimple_assign_rhs2 (_a7);
																			    _q141 = do_valueize (valueize, _q141);
																			    if ((_q140 == _q50 && ! TREE_SIDE_EFFECTS (_q140)) || (operand_equal_p (_q140, _q50, 0) && types_match (_q140, _q50)))
																			      {
																				if (integer_zerop (_q141))
																				  {
																				    switch (TREE_CODE (_p2))
																				      {
																				      case SSA_NAME:
																				        if (gimple *_d8 = get_def (valueize, _p2))
																				          {
																					    if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																					      switch (gimple_assign_rhs_code (_a8))
																						{
																						CASE_CONVERT:
																						  {
																						    tree _q170 = gimple_assign_rhs1 (_a8);
																						    _q170 = do_valueize (valueize, _q170);
																						    if ((_q170 == _q50 && ! TREE_SIDE_EFFECTS (_q170)) || (operand_equal_p (_q170, _q50, 0) && types_match (_q170, _q50)))
																						      {
																							{
																							  tree captures[5] ATTRIBUTE_UNUSED = { _q50, _q31, _q30, _q21, _q80 };
																							  if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type)
)
																							    {
																							      if (!TYPE_UNSIGNED (TREE_TYPE (captures[0])) && TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
																								{
																								  {
 unsigned itype_prec = TYPE_PRECISION (TREE_TYPE (captures[0]));
 unsigned otype_prec = TYPE_PRECISION (type);
 wide_int offset = wi::uhwi (HOST_WIDE_INT_1U << (otype_prec - 1),
 itype_prec);
 wide_int limit_0 = wi::mask (otype_prec, false, itype_prec);
 wide_int limit_1 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 3,
 itype_prec);
 wide_int limit_2 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 2,
 itype_prec);
 wide_int otype_max = wi::mask (otype_prec - 1, false, otype_prec);
 wide_int itype_max = wi::mask (otype_prec - 1, false, itype_prec);
 wide_int int_cst_1 = wi::to_wide (captures[2]);
 wide_int int_cst_2 = wi::to_wide (captures[3]);
 wide_int int_cst_3 = wi::to_wide (captures[4]);
																								      if (((wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_0))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_1)))
 && wi::eq_p (int_cst_3, otype_max)
)
																									{
																									  {
																									    res_ops[0] = captures[0];
																									    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 81, __FILE__, __LINE__, false);
																									    return true;
																									  }
																									}
																								  }
																								}
																							    }
																							}
																						      }
																						    break;
																						  }
																						default:;
																						}
																				          }
																				        break;
																				      default:;
																				      }
																				  }
																			      }
																			    break;
																			  }
																			default:;
																			}
																	          }
																	        break;
																	      default:;
																	      }
																	    break;
																	  }
																	default:;
																	}
															          }
															        break;
															      default:;
															      }
															  }
														      }
														      break;
														    }
														  default:;
														  }
													    }
													  break;
												        default:;
												        }
												    }
												}
											          break;
											        }
											      default:;
											      }
											  {
											    tree _q80_pops[1];
											    if (gimple_nop_convert (_q80, _q80_pops, valueize))
											      {
												tree _q90 = _q80_pops[0];
												switch (TREE_CODE (_q90))
												  {
												  case SSA_NAME:
												    if (gimple *_d5 = get_def (valueize, _q90))
												      {
													if (gassign *_a5 = dyn_cast <gassign *> (_d5))
													  switch (gimple_assign_rhs_code (_a5))
													    {
													    case NEGATE_EXPR:
													      {
														tree _q100 = gimple_assign_rhs1 (_a5);
														_q100 = do_valueize (valueize, _q100);
														{
														  tree _q100_pops[1];
														  if (gimple_nop_convert (_q100, _q100_pops, valueize))
														    {
														      tree _q110 = _q100_pops[0];
														      switch (TREE_CODE (_q110))
														        {
															case SSA_NAME:
															  if (gimple *_d6 = get_def (valueize, _q110))
															    {
															      if (gassign *_a6 = dyn_cast <gassign *> (_d6))
															        switch (gimple_assign_rhs_code (_a6))
																  {
																  CASE_CONVERT:
																    {
																      tree _q120 = gimple_assign_rhs1 (_a6);
																      _q120 = do_valueize (valueize, _q120);
																      switch (TREE_CODE (_q120))
																        {
																	case SSA_NAME:
																	  if (gimple *_d7 = get_def (valueize, _q120))
																	    {
																	      if (gassign *_a7 = dyn_cast <gassign *> (_d7))
																	        switch (gimple_assign_rhs_code (_a7))
																		  {
																		  case LT_EXPR:
																		    {
																		      tree _q130 = gimple_assign_rhs1 (_a7);
																		      _q130 = do_valueize (valueize, _q130);
																		      tree _q131 = gimple_assign_rhs2 (_a7);
																		      _q131 = do_valueize (valueize, _q131);
																		      if ((_q130 == _q50 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q50, 0) && types_match (_q130, _q50)))
																			{
																			  if (integer_zerop (_q131))
																			    {
																			      switch (TREE_CODE (_q81))
																			        {
																				case INTEGER_CST:
																				  {
																				    switch (TREE_CODE (_p2))
																				      {
																				      case SSA_NAME:
																				        if (gimple *_d8 = get_def (valueize, _p2))
																				          {
																					    if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																					      switch (gimple_assign_rhs_code (_a8))
																						{
																						CASE_CONVERT:
																						  {
																						    tree _q170 = gimple_assign_rhs1 (_a8);
																						    _q170 = do_valueize (valueize, _q170);
																						    if ((_q170 == _q50 && ! TREE_SIDE_EFFECTS (_q170)) || (operand_equal_p (_q170, _q50, 0) && types_match (_q170, _q50)))
																						      {
																							{
																							  tree captures[5] ATTRIBUTE_UNUSED = { _q50, _q31, _q30, _q21, _q81 };
																							  if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type)
)
																							    {
																							      if (!TYPE_UNSIGNED (TREE_TYPE (captures[0])) && TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
																								{
																								  {
 unsigned itype_prec = TYPE_PRECISION (TREE_TYPE (captures[0]));
 unsigned otype_prec = TYPE_PRECISION (type);
 wide_int offset = wi::uhwi (HOST_WIDE_INT_1U << (otype_prec - 1),
 itype_prec);
 wide_int limit_0 = wi::mask (otype_prec, false, itype_prec);
 wide_int limit_1 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 3,
 itype_prec);
 wide_int limit_2 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 2,
 itype_prec);
 wide_int otype_max = wi::mask (otype_prec - 1, false, otype_prec);
 wide_int itype_max = wi::mask (otype_prec - 1, false, itype_prec);
 wide_int int_cst_1 = wi::to_wide (captures[2]);
 wide_int int_cst_2 = wi::to_wide (captures[3]);
 wide_int int_cst_3 = wi::to_wide (captures[4]);
																								      if (((wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_0))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_1)))
 && wi::eq_p (int_cst_3, otype_max)
)
																									{
																									  {
																									    res_ops[0] = captures[0];
																									    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 81, __FILE__, __LINE__, false);
																									    return true;
																									  }
																									}
																								  }
																								}
																							    }
																							}
																						      }
																						    break;
																						  }
																						default:;
																						}
																				          }
																				        break;
																				      default:;
																				      }
																				    break;
																				  }
																			        default:;
																			        }
																			    }
																		        }
																		      break;
																		    }
																		  default:;
																		  }
																	    }
																	  break;
																        default:;
																        }
																      break;
																    }
																  default:;
																  }
															    }
															  break;
														        default:;
														        }
														    }
														}
													        break;
													      }
													    default:;
													    }
												      }
												    break;
											          default:;
											          }
											      }
											  }
											    break;
											  }
											default:;
											}
									          }
									        break;
									      default:;
									      }
									    break;
									  }
								        default:;
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						      break;
						    }
					          default:;
					          }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
			      }
			  }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
	  else if (gphi *_a1 = dyn_cast <gphi *> (_d1))
	    {
	      basic_block _b1 = gimple_bb (_a1);
	      tree _p1, _p2;
	      gcond *_cond_1 = match_cond_with_binary_phi (_a1, &_p1, &_p2);
	      if (_cond_1)
		{
		  tree _cond_lhs_1 = gimple_cond_lhs (_cond_1);
		  tree _cond_rhs_1 = gimple_cond_rhs (_cond_1);
		  tree _p0 = build2 (gimple_cond_code (_cond_1), boolean_type_node, _cond_lhs_1, _cond_rhs_1);
		  switch (TREE_CODE (_p0))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p0))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case GT_EXPR:
			        {
				  tree _q20 = gimple_assign_rhs1 (_a2);
				  _q20 = do_valueize (valueize, _q20);
				  tree _q21 = gimple_assign_rhs2 (_a2);
				  _q21 = do_valueize (valueize, _q21);
				  switch (TREE_CODE (_q20))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q20))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case PLUS_EXPR:
					        {
						  tree _q30 = gimple_assign_rhs1 (_a3);
						  _q30 = do_valueize (valueize, _q30);
						  tree _q31 = gimple_assign_rhs2 (_a3);
						  _q31 = do_valueize (valueize, _q31);
						  if (tree_swap_operands_p (_q30, _q31))
						    std::swap (_q30, _q31);
						  switch (TREE_CODE (_q30))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q30))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      CASE_CONVERT:
							        {
								  tree _q40 = gimple_assign_rhs1 (_a4);
								  _q40 = do_valueize (valueize, _q40);
								  switch (TREE_CODE (_q31))
								    {
								    case INTEGER_CST:
								      {
									switch (TREE_CODE (_q21))
									  {
									  case INTEGER_CST:
									    {
									      switch (TREE_CODE (_p1))
									        {
										case SSA_NAME:
										  if (gimple *_d5 = get_def (valueize, _p1))
										    {
										      if (gassign *_a5 = dyn_cast <gassign *> (_d5))
										        switch (gimple_assign_rhs_code (_a5))
											  {
											  case BIT_XOR_EXPR:
											    {
											      tree _q80 = gimple_assign_rhs1 (_a5);
											      _q80 = do_valueize (valueize, _q80);
											      tree _q81 = gimple_assign_rhs2 (_a5);
											      _q81 = do_valueize (valueize, _q81);
											      if (tree_swap_operands_p (_q80, _q81))
											        std::swap (_q80, _q81);
											      switch (TREE_CODE (_q80))
											        {
												case SSA_NAME:
												  if (gimple *_d6 = get_def (valueize, _q80))
												    {
												      if (gassign *_a6 = dyn_cast <gassign *> (_d6))
												        switch (gimple_assign_rhs_code (_a6))
													  {
													  case NEGATE_EXPR:
													    {
													      tree _q90 = gimple_assign_rhs1 (_a6);
													      _q90 = do_valueize (valueize, _q90);
													      switch (TREE_CODE (_q90))
													        {
														case SSA_NAME:
														  if (gimple *_d7 = get_def (valueize, _q90))
														    {
														      if (gassign *_a7 = dyn_cast <gassign *> (_d7))
														        switch (gimple_assign_rhs_code (_a7))
															  {
															  CASE_CONVERT:
															    {
															      tree _q100 = gimple_assign_rhs1 (_a7);
															      _q100 = do_valueize (valueize, _q100);
															      switch (TREE_CODE (_q100))
															        {
																case SSA_NAME:
																  if (gimple *_d8 = get_def (valueize, _q100))
																    {
																      if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																        switch (gimple_assign_rhs_code (_a8))
																	  {
																	  case LT_EXPR:
																	    {
																	      tree _q110 = gimple_assign_rhs1 (_a8);
																	      _q110 = do_valueize (valueize, _q110);
																	      tree _q111 = gimple_assign_rhs2 (_a8);
																	      _q111 = do_valueize (valueize, _q111);
																	      if ((_q110 == _q40 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q40, 0) && types_match (_q110, _q40)))
																		{
																		  if (integer_zerop (_q111))
																		    {
																		      switch (TREE_CODE (_q81))
																		        {
																			case INTEGER_CST:
																			  {
																			    switch (TREE_CODE (_p2))
																			      {
																			      case SSA_NAME:
																			        if (gimple *_d9 = get_def (valueize, _p2))
																			          {
																				    if (gassign *_a9 = dyn_cast <gassign *> (_d9))
																				      switch (gimple_assign_rhs_code (_a9))
																					{
																					CASE_CONVERT:
																					  {
																					    tree _q150 = gimple_assign_rhs1 (_a9);
																					    _q150 = do_valueize (valueize, _q150);
																					    if ((_q150 == _q40 && ! TREE_SIDE_EFFECTS (_q150)) || (operand_equal_p (_q150, _q40, 0) && types_match (_q150, _q40)))
																					      {
																						{
																						  tree captures[5] ATTRIBUTE_UNUSED = { _q40, _q30, _q31, _q21, _q81 };
																						  if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type)
)
																						    {
																						      if (!TYPE_UNSIGNED (TREE_TYPE (captures[0])) && TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
																							{
																							  {
 unsigned itype_prec = TYPE_PRECISION (TREE_TYPE (captures[0]));
 unsigned otype_prec = TYPE_PRECISION (type);
 wide_int offset = wi::uhwi (HOST_WIDE_INT_1U << (otype_prec - 1),
 itype_prec);
 wide_int limit_0 = wi::mask (otype_prec, false, itype_prec);
 wide_int limit_1 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 3,
 itype_prec);
 wide_int limit_2 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 2,
 itype_prec);
 wide_int otype_max = wi::mask (otype_prec - 1, false, otype_prec);
 wide_int itype_max = wi::mask (otype_prec - 1, false, itype_prec);
 wide_int int_cst_1 = wi::to_wide (captures[2]);
 wide_int int_cst_2 = wi::to_wide (captures[3]);
 wide_int int_cst_3 = wi::to_wide (captures[4]);
																							      if (((wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_0))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_1)))
 && wi::eq_p (int_cst_3, otype_max)
)
																								{
																								  {
																								    res_ops[0] = captures[0];
																								    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 81, __FILE__, __LINE__, false);
																								    return true;
																								  }
																								}
																							  }
																							}
																						    }
																						}
																					      }
																					    break;
																					  }
																					default:;
																					}
																			          }
																			        break;
																			      default:;
																			      }
																			    break;
																			  }
																		        default:;
																		        }
																		    }
																	        }
																	      break;
																	    }
																	  default:;
																	  }
																    }
																  break;
															        default:;
															        }
															      break;
															    }
															  default:;
															  }
														    }
														  break;
													        default:;
													        }
													      break;
													    }
													  default:;
													  }
												    }
												  break;
												case INTEGER_CST:
												  {
												    switch (TREE_CODE (_q81))
												      {
												      case SSA_NAME:
												        if (gimple *_d6 = get_def (valueize, _q81))
												          {
													    if (gassign *_a6 = dyn_cast <gassign *> (_d6))
													      switch (gimple_assign_rhs_code (_a6))
														{
														case NEGATE_EXPR:
														  {
														    tree _q100 = gimple_assign_rhs1 (_a6);
														    _q100 = do_valueize (valueize, _q100);
														    switch (TREE_CODE (_q100))
														      {
														      case SSA_NAME:
														        if (gimple *_d7 = get_def (valueize, _q100))
														          {
															    if (gassign *_a7 = dyn_cast <gassign *> (_d7))
															      switch (gimple_assign_rhs_code (_a7))
																{
																CASE_CONVERT:
																  {
																    tree _q110 = gimple_assign_rhs1 (_a7);
																    _q110 = do_valueize (valueize, _q110);
																    switch (TREE_CODE (_q110))
																      {
																      case SSA_NAME:
																        if (gimple *_d8 = get_def (valueize, _q110))
																          {
																	    if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																	      switch (gimple_assign_rhs_code (_a8))
																		{
																		case LT_EXPR:
																		  {
																		    tree _q120 = gimple_assign_rhs1 (_a8);
																		    _q120 = do_valueize (valueize, _q120);
																		    tree _q121 = gimple_assign_rhs2 (_a8);
																		    _q121 = do_valueize (valueize, _q121);
																		    if ((_q120 == _q40 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q40, 0) && types_match (_q120, _q40)))
																		      {
																			if (integer_zerop (_q121))
																			  {
																			    switch (TREE_CODE (_p2))
																			      {
																			      case SSA_NAME:
																			        if (gimple *_d9 = get_def (valueize, _p2))
																			          {
																				    if (gassign *_a9 = dyn_cast <gassign *> (_d9))
																				      switch (gimple_assign_rhs_code (_a9))
																					{
																					CASE_CONVERT:
																					  {
																					    tree _q150 = gimple_assign_rhs1 (_a9);
																					    _q150 = do_valueize (valueize, _q150);
																					    if ((_q150 == _q40 && ! TREE_SIDE_EFFECTS (_q150)) || (operand_equal_p (_q150, _q40, 0) && types_match (_q150, _q40)))
																					      {
																						{
																						  tree captures[5] ATTRIBUTE_UNUSED = { _q40, _q30, _q31, _q21, _q80 };
																						  if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type)
)
																						    {
																						      if (!TYPE_UNSIGNED (TREE_TYPE (captures[0])) && TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
																							{
																							  {
 unsigned itype_prec = TYPE_PRECISION (TREE_TYPE (captures[0]));
 unsigned otype_prec = TYPE_PRECISION (type);
 wide_int offset = wi::uhwi (HOST_WIDE_INT_1U << (otype_prec - 1),
 itype_prec);
 wide_int limit_0 = wi::mask (otype_prec, false, itype_prec);
 wide_int limit_1 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 3,
 itype_prec);
 wide_int limit_2 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 2,
 itype_prec);
 wide_int otype_max = wi::mask (otype_prec - 1, false, otype_prec);
 wide_int itype_max = wi::mask (otype_prec - 1, false, itype_prec);
 wide_int int_cst_1 = wi::to_wide (captures[2]);
 wide_int int_cst_2 = wi::to_wide (captures[3]);
 wide_int int_cst_3 = wi::to_wide (captures[4]);
																							      if (((wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_0))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_1)))
 && wi::eq_p (int_cst_3, otype_max)
)
																								{
																								  {
																								    res_ops[0] = captures[0];
																								    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 81, __FILE__, __LINE__, false);
																								    return true;
																								  }
																								}
																							  }
																							}
																						    }
																						}
																					      }
																					    break;
																					  }
																					default:;
																					}
																			          }
																			        break;
																			      default:;
																			      }
																			  }
																		      }
																		    break;
																		  }
																		default:;
																		}
																          }
																        break;
																      default:;
																      }
																    break;
																  }
																default:;
																}
														          }
														        break;
														      default:;
														      }
														    break;
														  }
														default:;
														}
												          }
												        break;
												      default:;
												      }
												  {
												    tree _q81_pops[1];
												    if (gimple_nop_convert (_q81, _q81_pops, valueize))
												      {
													tree _q100 = _q81_pops[0];
													switch (TREE_CODE (_q100))
													  {
													  case SSA_NAME:
													    if (gimple *_d6 = get_def (valueize, _q100))
													      {
														if (gassign *_a6 = dyn_cast <gassign *> (_d6))
														  switch (gimple_assign_rhs_code (_a6))
														    {
														    case NEGATE_EXPR:
														      {
															tree _q110 = gimple_assign_rhs1 (_a6);
															_q110 = do_valueize (valueize, _q110);
															{
															  tree _q110_pops[1];
															  if (gimple_nop_convert (_q110, _q110_pops, valueize))
															    {
															      tree _q120 = _q110_pops[0];
															      switch (TREE_CODE (_q120))
															        {
																case SSA_NAME:
																  if (gimple *_d7 = get_def (valueize, _q120))
																    {
																      if (gassign *_a7 = dyn_cast <gassign *> (_d7))
																        switch (gimple_assign_rhs_code (_a7))
																	  {
																	  CASE_CONVERT:
																	    {
																	      tree _q130 = gimple_assign_rhs1 (_a7);
																	      _q130 = do_valueize (valueize, _q130);
																	      switch (TREE_CODE (_q130))
																	        {
																		case SSA_NAME:
																		  if (gimple *_d8 = get_def (valueize, _q130))
																		    {
																		      if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																		        switch (gimple_assign_rhs_code (_a8))
																			  {
																			  case LT_EXPR:
																			    {
																			      tree _q140 = gimple_assign_rhs1 (_a8);
																			      _q140 = do_valueize (valueize, _q140);
																			      tree _q141 = gimple_assign_rhs2 (_a8);
																			      _q141 = do_valueize (valueize, _q141);
																			      if ((_q140 == _q40 && ! TREE_SIDE_EFFECTS (_q140)) || (operand_equal_p (_q140, _q40, 0) && types_match (_q140, _q40)))
																				{
																				  if (integer_zerop (_q141))
																				    {
																				      switch (TREE_CODE (_p2))
																				        {
																					case SSA_NAME:
																					  if (gimple *_d9 = get_def (valueize, _p2))
																					    {
																					      if (gassign *_a9 = dyn_cast <gassign *> (_d9))
																					        switch (gimple_assign_rhs_code (_a9))
																						  {
																						  CASE_CONVERT:
																						    {
																						      tree _q170 = gimple_assign_rhs1 (_a9);
																						      _q170 = do_valueize (valueize, _q170);
																						      if ((_q170 == _q40 && ! TREE_SIDE_EFFECTS (_q170)) || (operand_equal_p (_q170, _q40, 0) && types_match (_q170, _q40)))
																							{
																							  {
																							    tree captures[5] ATTRIBUTE_UNUSED = { _q40, _q30, _q31, _q21, _q80 };
																							    if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type)
)
																							      {
																								if (!TYPE_UNSIGNED (TREE_TYPE (captures[0])) && TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
																								  {
																								    {
 unsigned itype_prec = TYPE_PRECISION (TREE_TYPE (captures[0]));
 unsigned otype_prec = TYPE_PRECISION (type);
 wide_int offset = wi::uhwi (HOST_WIDE_INT_1U << (otype_prec - 1),
 itype_prec);
 wide_int limit_0 = wi::mask (otype_prec, false, itype_prec);
 wide_int limit_1 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 3,
 itype_prec);
 wide_int limit_2 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 2,
 itype_prec);
 wide_int otype_max = wi::mask (otype_prec - 1, false, otype_prec);
 wide_int itype_max = wi::mask (otype_prec - 1, false, itype_prec);
 wide_int int_cst_1 = wi::to_wide (captures[2]);
 wide_int int_cst_2 = wi::to_wide (captures[3]);
 wide_int int_cst_3 = wi::to_wide (captures[4]);
																									if (((wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_0))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_1)))
 && wi::eq_p (int_cst_3, otype_max)
)
																									  {
																									    {
																									      res_ops[0] = captures[0];
																									      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 81, __FILE__, __LINE__, false);
																									      return true;
																									    }
																									  }
																								    }
																								  }
																							      }
																							  }
																						        }
																						      break;
																						    }
																						  default:;
																						  }
																					    }
																					  break;
																				        default:;
																				        }
																				    }
																			        }
																			      break;
																			    }
																			  default:;
																			  }
																		    }
																		  break;
																	        default:;
																	        }
																	      break;
																	    }
																	  default:;
																	  }
																    }
																  break;
															        default:;
															        }
															    }
															}
														        break;
														      }
														    default:;
														    }
													      }
													    break;
												          default:;
												          }
												      }
												  }
												    break;
												  }
											        default:;
											        }
											    {
											      tree _q80_pops[1];
											      if (gimple_nop_convert (_q80, _q80_pops, valueize))
											        {
												  tree _q90 = _q80_pops[0];
												  switch (TREE_CODE (_q90))
												    {
												    case SSA_NAME:
												      if (gimple *_d6 = get_def (valueize, _q90))
												        {
													  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
													    switch (gimple_assign_rhs_code (_a6))
													      {
													      case NEGATE_EXPR:
													        {
														  tree _q100 = gimple_assign_rhs1 (_a6);
														  _q100 = do_valueize (valueize, _q100);
														  {
														    tree _q100_pops[1];
														    if (gimple_nop_convert (_q100, _q100_pops, valueize))
														      {
															tree _q110 = _q100_pops[0];
															switch (TREE_CODE (_q110))
															  {
															  case SSA_NAME:
															    if (gimple *_d7 = get_def (valueize, _q110))
															      {
																if (gassign *_a7 = dyn_cast <gassign *> (_d7))
																  switch (gimple_assign_rhs_code (_a7))
																    {
																    CASE_CONVERT:
																      {
																	tree _q120 = gimple_assign_rhs1 (_a7);
																	_q120 = do_valueize (valueize, _q120);
																	switch (TREE_CODE (_q120))
																	  {
																	  case SSA_NAME:
																	    if (gimple *_d8 = get_def (valueize, _q120))
																	      {
																		if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																		  switch (gimple_assign_rhs_code (_a8))
																		    {
																		    case LT_EXPR:
																		      {
																			tree _q130 = gimple_assign_rhs1 (_a8);
																			_q130 = do_valueize (valueize, _q130);
																			tree _q131 = gimple_assign_rhs2 (_a8);
																			_q131 = do_valueize (valueize, _q131);
																			if ((_q130 == _q40 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q40, 0) && types_match (_q130, _q40)))
																			  {
																			    if (integer_zerop (_q131))
																			      {
																				switch (TREE_CODE (_q81))
																				  {
																				  case INTEGER_CST:
																				    {
																				      switch (TREE_CODE (_p2))
																				        {
																					case SSA_NAME:
																					  if (gimple *_d9 = get_def (valueize, _p2))
																					    {
																					      if (gassign *_a9 = dyn_cast <gassign *> (_d9))
																					        switch (gimple_assign_rhs_code (_a9))
																						  {
																						  CASE_CONVERT:
																						    {
																						      tree _q170 = gimple_assign_rhs1 (_a9);
																						      _q170 = do_valueize (valueize, _q170);
																						      if ((_q170 == _q40 && ! TREE_SIDE_EFFECTS (_q170)) || (operand_equal_p (_q170, _q40, 0) && types_match (_q170, _q40)))
																							{
																							  {
																							    tree captures[5] ATTRIBUTE_UNUSED = { _q40, _q30, _q31, _q21, _q81 };
																							    if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type)
)
																							      {
																								if (!TYPE_UNSIGNED (TREE_TYPE (captures[0])) && TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
																								  {
																								    {
 unsigned itype_prec = TYPE_PRECISION (TREE_TYPE (captures[0]));
 unsigned otype_prec = TYPE_PRECISION (type);
 wide_int offset = wi::uhwi (HOST_WIDE_INT_1U << (otype_prec - 1),
 itype_prec);
 wide_int limit_0 = wi::mask (otype_prec, false, itype_prec);
 wide_int limit_1 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 3,
 itype_prec);
 wide_int limit_2 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 2,
 itype_prec);
 wide_int otype_max = wi::mask (otype_prec - 1, false, otype_prec);
 wide_int itype_max = wi::mask (otype_prec - 1, false, itype_prec);
 wide_int int_cst_1 = wi::to_wide (captures[2]);
 wide_int int_cst_2 = wi::to_wide (captures[3]);
 wide_int int_cst_3 = wi::to_wide (captures[4]);
																									if (((wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_0))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_1)))
 && wi::eq_p (int_cst_3, otype_max)
)
																									  {
																									    {
																									      res_ops[0] = captures[0];
																									      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 81, __FILE__, __LINE__, false);
																									      return true;
																									    }
																									  }
																								    }
																								  }
																							      }
																							  }
																						        }
																						      break;
																						    }
																						  default:;
																						  }
																					    }
																					  break;
																				        default:;
																				        }
																				      break;
																				    }
																			          default:;
																			          }
																			      }
																			  }
																		        break;
																		      }
																		    default:;
																		    }
																	      }
																	    break;
																          default:;
																          }
																        break;
																      }
																    default:;
																    }
															      }
															    break;
														          default:;
														          }
														      }
														  }
													          break;
													        }
													      default:;
													      }
												        }
												      break;
												    default:;
												    }
											        }
											    }
											      break;
											    }
											  default:;
											  }
										    }
										  break;
									        default:;
									        }
									      break;
									    }
								          default:;
								          }
								        break;
								      }
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    case INTEGER_CST:
						      {
							switch (TREE_CODE (_q31))
							  {
							  case SSA_NAME:
							    if (gimple *_d4 = get_def (valueize, _q31))
							      {
								if (gassign *_a4 = dyn_cast <gassign *> (_d4))
								  switch (gimple_assign_rhs_code (_a4))
								    {
								    CASE_CONVERT:
								      {
									tree _q50 = gimple_assign_rhs1 (_a4);
									_q50 = do_valueize (valueize, _q50);
									switch (TREE_CODE (_q21))
									  {
									  case INTEGER_CST:
									    {
									      switch (TREE_CODE (_p1))
									        {
										case SSA_NAME:
										  if (gimple *_d5 = get_def (valueize, _p1))
										    {
										      if (gassign *_a5 = dyn_cast <gassign *> (_d5))
										        switch (gimple_assign_rhs_code (_a5))
											  {
											  case BIT_XOR_EXPR:
											    {
											      tree _q80 = gimple_assign_rhs1 (_a5);
											      _q80 = do_valueize (valueize, _q80);
											      tree _q81 = gimple_assign_rhs2 (_a5);
											      _q81 = do_valueize (valueize, _q81);
											      if (tree_swap_operands_p (_q80, _q81))
											        std::swap (_q80, _q81);
											      switch (TREE_CODE (_q80))
											        {
												case SSA_NAME:
												  if (gimple *_d6 = get_def (valueize, _q80))
												    {
												      if (gassign *_a6 = dyn_cast <gassign *> (_d6))
												        switch (gimple_assign_rhs_code (_a6))
													  {
													  case NEGATE_EXPR:
													    {
													      tree _q90 = gimple_assign_rhs1 (_a6);
													      _q90 = do_valueize (valueize, _q90);
													      switch (TREE_CODE (_q90))
													        {
														case SSA_NAME:
														  if (gimple *_d7 = get_def (valueize, _q90))
														    {
														      if (gassign *_a7 = dyn_cast <gassign *> (_d7))
														        switch (gimple_assign_rhs_code (_a7))
															  {
															  CASE_CONVERT:
															    {
															      tree _q100 = gimple_assign_rhs1 (_a7);
															      _q100 = do_valueize (valueize, _q100);
															      switch (TREE_CODE (_q100))
															        {
																case SSA_NAME:
																  if (gimple *_d8 = get_def (valueize, _q100))
																    {
																      if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																        switch (gimple_assign_rhs_code (_a8))
																	  {
																	  case LT_EXPR:
																	    {
																	      tree _q110 = gimple_assign_rhs1 (_a8);
																	      _q110 = do_valueize (valueize, _q110);
																	      tree _q111 = gimple_assign_rhs2 (_a8);
																	      _q111 = do_valueize (valueize, _q111);
																	      if ((_q110 == _q50 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q50, 0) && types_match (_q110, _q50)))
																		{
																		  if (integer_zerop (_q111))
																		    {
																		      switch (TREE_CODE (_q81))
																		        {
																			case INTEGER_CST:
																			  {
																			    switch (TREE_CODE (_p2))
																			      {
																			      case SSA_NAME:
																			        if (gimple *_d9 = get_def (valueize, _p2))
																			          {
																				    if (gassign *_a9 = dyn_cast <gassign *> (_d9))
																				      switch (gimple_assign_rhs_code (_a9))
																					{
																					CASE_CONVERT:
																					  {
																					    tree _q150 = gimple_assign_rhs1 (_a9);
																					    _q150 = do_valueize (valueize, _q150);
																					    if ((_q150 == _q50 && ! TREE_SIDE_EFFECTS (_q150)) || (operand_equal_p (_q150, _q50, 0) && types_match (_q150, _q50)))
																					      {
																						{
																						  tree captures[5] ATTRIBUTE_UNUSED = { _q50, _q31, _q30, _q21, _q81 };
																						  if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type)
)
																						    {
																						      if (!TYPE_UNSIGNED (TREE_TYPE (captures[0])) && TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
																							{
																							  {
 unsigned itype_prec = TYPE_PRECISION (TREE_TYPE (captures[0]));
 unsigned otype_prec = TYPE_PRECISION (type);
 wide_int offset = wi::uhwi (HOST_WIDE_INT_1U << (otype_prec - 1),
 itype_prec);
 wide_int limit_0 = wi::mask (otype_prec, false, itype_prec);
 wide_int limit_1 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 3,
 itype_prec);
 wide_int limit_2 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 2,
 itype_prec);
 wide_int otype_max = wi::mask (otype_prec - 1, false, otype_prec);
 wide_int itype_max = wi::mask (otype_prec - 1, false, itype_prec);
 wide_int int_cst_1 = wi::to_wide (captures[2]);
 wide_int int_cst_2 = wi::to_wide (captures[3]);
 wide_int int_cst_3 = wi::to_wide (captures[4]);
																							      if (((wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_0))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_1)))
 && wi::eq_p (int_cst_3, otype_max)
)
																								{
																								  {
																								    res_ops[0] = captures[0];
																								    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 81, __FILE__, __LINE__, false);
																								    return true;
																								  }
																								}
																							  }
																							}
																						    }
																						}
																					      }
																					    break;
																					  }
																					default:;
																					}
																			          }
																			        break;
																			      default:;
																			      }
																			    break;
																			  }
																		        default:;
																		        }
																		    }
																	        }
																	      break;
																	    }
																	  default:;
																	  }
																    }
																  break;
															        default:;
															        }
															      break;
															    }
															  default:;
															  }
														    }
														  break;
													        default:;
													        }
													      break;
													    }
													  default:;
													  }
												    }
												  break;
												case INTEGER_CST:
												  {
												    switch (TREE_CODE (_q81))
												      {
												      case SSA_NAME:
												        if (gimple *_d6 = get_def (valueize, _q81))
												          {
													    if (gassign *_a6 = dyn_cast <gassign *> (_d6))
													      switch (gimple_assign_rhs_code (_a6))
														{
														case NEGATE_EXPR:
														  {
														    tree _q100 = gimple_assign_rhs1 (_a6);
														    _q100 = do_valueize (valueize, _q100);
														    switch (TREE_CODE (_q100))
														      {
														      case SSA_NAME:
														        if (gimple *_d7 = get_def (valueize, _q100))
														          {
															    if (gassign *_a7 = dyn_cast <gassign *> (_d7))
															      switch (gimple_assign_rhs_code (_a7))
																{
																CASE_CONVERT:
																  {
																    tree _q110 = gimple_assign_rhs1 (_a7);
																    _q110 = do_valueize (valueize, _q110);
																    switch (TREE_CODE (_q110))
																      {
																      case SSA_NAME:
																        if (gimple *_d8 = get_def (valueize, _q110))
																          {
																	    if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																	      switch (gimple_assign_rhs_code (_a8))
																		{
																		case LT_EXPR:
																		  {
																		    tree _q120 = gimple_assign_rhs1 (_a8);
																		    _q120 = do_valueize (valueize, _q120);
																		    tree _q121 = gimple_assign_rhs2 (_a8);
																		    _q121 = do_valueize (valueize, _q121);
																		    if ((_q120 == _q50 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q50, 0) && types_match (_q120, _q50)))
																		      {
																			if (integer_zerop (_q121))
																			  {
																			    switch (TREE_CODE (_p2))
																			      {
																			      case SSA_NAME:
																			        if (gimple *_d9 = get_def (valueize, _p2))
																			          {
																				    if (gassign *_a9 = dyn_cast <gassign *> (_d9))
																				      switch (gimple_assign_rhs_code (_a9))
																					{
																					CASE_CONVERT:
																					  {
																					    tree _q150 = gimple_assign_rhs1 (_a9);
																					    _q150 = do_valueize (valueize, _q150);
																					    if ((_q150 == _q50 && ! TREE_SIDE_EFFECTS (_q150)) || (operand_equal_p (_q150, _q50, 0) && types_match (_q150, _q50)))
																					      {
																						{
																						  tree captures[5] ATTRIBUTE_UNUSED = { _q50, _q31, _q30, _q21, _q80 };
																						  if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type)
)
																						    {
																						      if (!TYPE_UNSIGNED (TREE_TYPE (captures[0])) && TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
																							{
																							  {
 unsigned itype_prec = TYPE_PRECISION (TREE_TYPE (captures[0]));
 unsigned otype_prec = TYPE_PRECISION (type);
 wide_int offset = wi::uhwi (HOST_WIDE_INT_1U << (otype_prec - 1),
 itype_prec);
 wide_int limit_0 = wi::mask (otype_prec, false, itype_prec);
 wide_int limit_1 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 3,
 itype_prec);
 wide_int limit_2 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 2,
 itype_prec);
 wide_int otype_max = wi::mask (otype_prec - 1, false, otype_prec);
 wide_int itype_max = wi::mask (otype_prec - 1, false, itype_prec);
 wide_int int_cst_1 = wi::to_wide (captures[2]);
 wide_int int_cst_2 = wi::to_wide (captures[3]);
 wide_int int_cst_3 = wi::to_wide (captures[4]);
																							      if (((wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_0))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_1)))
 && wi::eq_p (int_cst_3, otype_max)
)
																								{
																								  {
																								    res_ops[0] = captures[0];
																								    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 81, __FILE__, __LINE__, false);
																								    return true;
																								  }
																								}
																							  }
																							}
																						    }
																						}
																					      }
																					    break;
																					  }
																					default:;
																					}
																			          }
																			        break;
																			      default:;
																			      }
																			  }
																		      }
																		    break;
																		  }
																		default:;
																		}
																          }
																        break;
																      default:;
																      }
																    break;
																  }
																default:;
																}
														          }
														        break;
														      default:;
														      }
														    break;
														  }
														default:;
														}
												          }
												        break;
												      default:;
												      }
												  {
												    tree _q81_pops[1];
												    if (gimple_nop_convert (_q81, _q81_pops, valueize))
												      {
													tree _q100 = _q81_pops[0];
													switch (TREE_CODE (_q100))
													  {
													  case SSA_NAME:
													    if (gimple *_d6 = get_def (valueize, _q100))
													      {
														if (gassign *_a6 = dyn_cast <gassign *> (_d6))
														  switch (gimple_assign_rhs_code (_a6))
														    {
														    case NEGATE_EXPR:
														      {
															tree _q110 = gimple_assign_rhs1 (_a6);
															_q110 = do_valueize (valueize, _q110);
															{
															  tree _q110_pops[1];
															  if (gimple_nop_convert (_q110, _q110_pops, valueize))
															    {
															      tree _q120 = _q110_pops[0];
															      switch (TREE_CODE (_q120))
															        {
																case SSA_NAME:
																  if (gimple *_d7 = get_def (valueize, _q120))
																    {
																      if (gassign *_a7 = dyn_cast <gassign *> (_d7))
																        switch (gimple_assign_rhs_code (_a7))
																	  {
																	  CASE_CONVERT:
																	    {
																	      tree _q130 = gimple_assign_rhs1 (_a7);
																	      _q130 = do_valueize (valueize, _q130);
																	      switch (TREE_CODE (_q130))
																	        {
																		case SSA_NAME:
																		  if (gimple *_d8 = get_def (valueize, _q130))
																		    {
																		      if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																		        switch (gimple_assign_rhs_code (_a8))
																			  {
																			  case LT_EXPR:
																			    {
																			      tree _q140 = gimple_assign_rhs1 (_a8);
																			      _q140 = do_valueize (valueize, _q140);
																			      tree _q141 = gimple_assign_rhs2 (_a8);
																			      _q141 = do_valueize (valueize, _q141);
																			      if ((_q140 == _q50 && ! TREE_SIDE_EFFECTS (_q140)) || (operand_equal_p (_q140, _q50, 0) && types_match (_q140, _q50)))
																				{
																				  if (integer_zerop (_q141))
																				    {
																				      switch (TREE_CODE (_p2))
																				        {
																					case SSA_NAME:
																					  if (gimple *_d9 = get_def (valueize, _p2))
																					    {
																					      if (gassign *_a9 = dyn_cast <gassign *> (_d9))
																					        switch (gimple_assign_rhs_code (_a9))
																						  {
																						  CASE_CONVERT:
																						    {
																						      tree _q170 = gimple_assign_rhs1 (_a9);
																						      _q170 = do_valueize (valueize, _q170);
																						      if ((_q170 == _q50 && ! TREE_SIDE_EFFECTS (_q170)) || (operand_equal_p (_q170, _q50, 0) && types_match (_q170, _q50)))
																							{
																							  {
																							    tree captures[5] ATTRIBUTE_UNUSED = { _q50, _q31, _q30, _q21, _q80 };
																							    if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type)
)
																							      {
																								if (!TYPE_UNSIGNED (TREE_TYPE (captures[0])) && TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
																								  {
																								    {
 unsigned itype_prec = TYPE_PRECISION (TREE_TYPE (captures[0]));
 unsigned otype_prec = TYPE_PRECISION (type);
 wide_int offset = wi::uhwi (HOST_WIDE_INT_1U << (otype_prec - 1),
 itype_prec);
 wide_int limit_0 = wi::mask (otype_prec, false, itype_prec);
 wide_int limit_1 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 3,
 itype_prec);
 wide_int limit_2 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 2,
 itype_prec);
 wide_int otype_max = wi::mask (otype_prec - 1, false, otype_prec);
 wide_int itype_max = wi::mask (otype_prec - 1, false, itype_prec);
 wide_int int_cst_1 = wi::to_wide (captures[2]);
 wide_int int_cst_2 = wi::to_wide (captures[3]);
 wide_int int_cst_3 = wi::to_wide (captures[4]);
																									if (((wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_0))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_1)))
 && wi::eq_p (int_cst_3, otype_max)
)
																									  {
																									    {
																									      res_ops[0] = captures[0];
																									      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 81, __FILE__, __LINE__, false);
																									      return true;
																									    }
																									  }
																								    }
																								  }
																							      }
																							  }
																						        }
																						      break;
																						    }
																						  default:;
																						  }
																					    }
																					  break;
																				        default:;
																				        }
																				    }
																			        }
																			      break;
																			    }
																			  default:;
																			  }
																		    }
																		  break;
																	        default:;
																	        }
																	      break;
																	    }
																	  default:;
																	  }
																    }
																  break;
															        default:;
															        }
															    }
															}
														        break;
														      }
														    default:;
														    }
													      }
													    break;
												          default:;
												          }
												      }
												  }
												    break;
												  }
											        default:;
											        }
											    {
											      tree _q80_pops[1];
											      if (gimple_nop_convert (_q80, _q80_pops, valueize))
											        {
												  tree _q90 = _q80_pops[0];
												  switch (TREE_CODE (_q90))
												    {
												    case SSA_NAME:
												      if (gimple *_d6 = get_def (valueize, _q90))
												        {
													  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
													    switch (gimple_assign_rhs_code (_a6))
													      {
													      case NEGATE_EXPR:
													        {
														  tree _q100 = gimple_assign_rhs1 (_a6);
														  _q100 = do_valueize (valueize, _q100);
														  {
														    tree _q100_pops[1];
														    if (gimple_nop_convert (_q100, _q100_pops, valueize))
														      {
															tree _q110 = _q100_pops[0];
															switch (TREE_CODE (_q110))
															  {
															  case SSA_NAME:
															    if (gimple *_d7 = get_def (valueize, _q110))
															      {
																if (gassign *_a7 = dyn_cast <gassign *> (_d7))
																  switch (gimple_assign_rhs_code (_a7))
																    {
																    CASE_CONVERT:
																      {
																	tree _q120 = gimple_assign_rhs1 (_a7);
																	_q120 = do_valueize (valueize, _q120);
																	switch (TREE_CODE (_q120))
																	  {
																	  case SSA_NAME:
																	    if (gimple *_d8 = get_def (valueize, _q120))
																	      {
																		if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																		  switch (gimple_assign_rhs_code (_a8))
																		    {
																		    case LT_EXPR:
																		      {
																			tree _q130 = gimple_assign_rhs1 (_a8);
																			_q130 = do_valueize (valueize, _q130);
																			tree _q131 = gimple_assign_rhs2 (_a8);
																			_q131 = do_valueize (valueize, _q131);
																			if ((_q130 == _q50 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q50, 0) && types_match (_q130, _q50)))
																			  {
																			    if (integer_zerop (_q131))
																			      {
																				switch (TREE_CODE (_q81))
																				  {
																				  case INTEGER_CST:
																				    {
																				      switch (TREE_CODE (_p2))
																				        {
																					case SSA_NAME:
																					  if (gimple *_d9 = get_def (valueize, _p2))
																					    {
																					      if (gassign *_a9 = dyn_cast <gassign *> (_d9))
																					        switch (gimple_assign_rhs_code (_a9))
																						  {
																						  CASE_CONVERT:
																						    {
																						      tree _q170 = gimple_assign_rhs1 (_a9);
																						      _q170 = do_valueize (valueize, _q170);
																						      if ((_q170 == _q50 && ! TREE_SIDE_EFFECTS (_q170)) || (operand_equal_p (_q170, _q50, 0) && types_match (_q170, _q50)))
																							{
																							  {
																							    tree captures[5] ATTRIBUTE_UNUSED = { _q50, _q31, _q30, _q21, _q81 };
																							    if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type)
)
																							      {
																								if (!TYPE_UNSIGNED (TREE_TYPE (captures[0])) && TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
																								  {
																								    {
 unsigned itype_prec = TYPE_PRECISION (TREE_TYPE (captures[0]));
 unsigned otype_prec = TYPE_PRECISION (type);
 wide_int offset = wi::uhwi (HOST_WIDE_INT_1U << (otype_prec - 1),
 itype_prec);
 wide_int limit_0 = wi::mask (otype_prec, false, itype_prec);
 wide_int limit_1 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 3,
 itype_prec);
 wide_int limit_2 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 2,
 itype_prec);
 wide_int otype_max = wi::mask (otype_prec - 1, false, otype_prec);
 wide_int itype_max = wi::mask (otype_prec - 1, false, itype_prec);
 wide_int int_cst_1 = wi::to_wide (captures[2]);
 wide_int int_cst_2 = wi::to_wide (captures[3]);
 wide_int int_cst_3 = wi::to_wide (captures[4]);
																									if (((wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_0))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_1)))
 && wi::eq_p (int_cst_3, otype_max)
)
																									  {
																									    {
																									      res_ops[0] = captures[0];
																									      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 81, __FILE__, __LINE__, false);
																									      return true;
																									    }
																									  }
																								    }
																								  }
																							      }
																							  }
																						        }
																						      break;
																						    }
																						  default:;
																						  }
																					    }
																					  break;
																				        default:;
																				        }
																				      break;
																				    }
																			          default:;
																			          }
																			      }
																			  }
																		        break;
																		      }
																		    default:;
																		    }
																	      }
																	    break;
																          default:;
																          }
																        break;
																      }
																    default:;
																    }
															      }
															    break;
														          default:;
														          }
														      }
														  }
													          break;
													        }
													      default:;
													      }
												        }
												      break;
												    default:;
												    }
											        }
											    }
											      break;
											    }
											  default:;
											  }
										    }
										  break;
									        default:;
									        }
									      break;
									    }
								          default:;
								          }
								        break;
								      }
								    default:;
								    }
							      }
							    break;
						          default:;
						          }
						        break;
						      }
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    case GT_EXPR:
		      {
			tree _q20 = TREE_OPERAND (_p0, 0);
			if ((TREE_CODE (_q20) == SSA_NAME
			     || is_gimple_min_invariant (_q20)))
			  {
			    _q20 = do_valueize (valueize, _q20);
			    tree _q21 = TREE_OPERAND (_p0, 1);
			    if ((TREE_CODE (_q21) == SSA_NAME
			         || is_gimple_min_invariant (_q21)))
			      {
				_q21 = do_valueize (valueize, _q21);
				switch (TREE_CODE (_q20))
				  {
				  case SSA_NAME:
				    if (gimple *_d2 = get_def (valueize, _q20))
				      {
					if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					  switch (gimple_assign_rhs_code (_a2))
					    {
					    case PLUS_EXPR:
					      {
						tree _q30 = gimple_assign_rhs1 (_a2);
						_q30 = do_valueize (valueize, _q30);
						tree _q31 = gimple_assign_rhs2 (_a2);
						_q31 = do_valueize (valueize, _q31);
						if (tree_swap_operands_p (_q30, _q31))
						  std::swap (_q30, _q31);
						switch (TREE_CODE (_q30))
						  {
						  case SSA_NAME:
						    if (gimple *_d3 = get_def (valueize, _q30))
						      {
							if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							  switch (gimple_assign_rhs_code (_a3))
							    {
							    CASE_CONVERT:
							      {
								tree _q40 = gimple_assign_rhs1 (_a3);
								_q40 = do_valueize (valueize, _q40);
								switch (TREE_CODE (_q31))
								  {
								  case INTEGER_CST:
								    {
								      switch (TREE_CODE (_q21))
								        {
									case INTEGER_CST:
									  {
									    switch (TREE_CODE (_p1))
									      {
									      case SSA_NAME:
									        if (gimple *_d4 = get_def (valueize, _p1))
									          {
										    if (gassign *_a4 = dyn_cast <gassign *> (_d4))
										      switch (gimple_assign_rhs_code (_a4))
											{
											case BIT_XOR_EXPR:
											  {
											    tree _q80 = gimple_assign_rhs1 (_a4);
											    _q80 = do_valueize (valueize, _q80);
											    tree _q81 = gimple_assign_rhs2 (_a4);
											    _q81 = do_valueize (valueize, _q81);
											    if (tree_swap_operands_p (_q80, _q81))
											      std::swap (_q80, _q81);
											    switch (TREE_CODE (_q80))
											      {
											      case SSA_NAME:
											        if (gimple *_d5 = get_def (valueize, _q80))
											          {
												    if (gassign *_a5 = dyn_cast <gassign *> (_d5))
												      switch (gimple_assign_rhs_code (_a5))
													{
													case NEGATE_EXPR:
													  {
													    tree _q90 = gimple_assign_rhs1 (_a5);
													    _q90 = do_valueize (valueize, _q90);
													    switch (TREE_CODE (_q90))
													      {
													      case SSA_NAME:
													        if (gimple *_d6 = get_def (valueize, _q90))
													          {
														    if (gassign *_a6 = dyn_cast <gassign *> (_d6))
														      switch (gimple_assign_rhs_code (_a6))
															{
															CASE_CONVERT:
															  {
															    tree _q100 = gimple_assign_rhs1 (_a6);
															    _q100 = do_valueize (valueize, _q100);
															    switch (TREE_CODE (_q100))
															      {
															      case SSA_NAME:
															        if (gimple *_d7 = get_def (valueize, _q100))
															          {
																    if (gassign *_a7 = dyn_cast <gassign *> (_d7))
																      switch (gimple_assign_rhs_code (_a7))
																	{
																	case LT_EXPR:
																	  {
																	    tree _q110 = gimple_assign_rhs1 (_a7);
																	    _q110 = do_valueize (valueize, _q110);
																	    tree _q111 = gimple_assign_rhs2 (_a7);
																	    _q111 = do_valueize (valueize, _q111);
																	    if ((_q110 == _q40 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q40, 0) && types_match (_q110, _q40)))
																	      {
																		if (integer_zerop (_q111))
																		  {
																		    switch (TREE_CODE (_q81))
																		      {
																		      case INTEGER_CST:
																		        {
																			  switch (TREE_CODE (_p2))
																			    {
																			    case SSA_NAME:
																			      if (gimple *_d8 = get_def (valueize, _p2))
																			        {
																				  if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																				    switch (gimple_assign_rhs_code (_a8))
																				      {
																				      CASE_CONVERT:
																				        {
																					  tree _q150 = gimple_assign_rhs1 (_a8);
																					  _q150 = do_valueize (valueize, _q150);
																					  if ((_q150 == _q40 && ! TREE_SIDE_EFFECTS (_q150)) || (operand_equal_p (_q150, _q40, 0) && types_match (_q150, _q40)))
																					    {
																					      {
																						tree captures[5] ATTRIBUTE_UNUSED = { _q40, _q30, _q31, _q21, _q81 };
																						if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type)
)
																						  {
																						    if (!TYPE_UNSIGNED (TREE_TYPE (captures[0])) && TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
																						      {
																							{
 unsigned itype_prec = TYPE_PRECISION (TREE_TYPE (captures[0]));
 unsigned otype_prec = TYPE_PRECISION (type);
 wide_int offset = wi::uhwi (HOST_WIDE_INT_1U << (otype_prec - 1),
 itype_prec);
 wide_int limit_0 = wi::mask (otype_prec, false, itype_prec);
 wide_int limit_1 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 3,
 itype_prec);
 wide_int limit_2 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 2,
 itype_prec);
 wide_int otype_max = wi::mask (otype_prec - 1, false, otype_prec);
 wide_int itype_max = wi::mask (otype_prec - 1, false, itype_prec);
 wide_int int_cst_1 = wi::to_wide (captures[2]);
 wide_int int_cst_2 = wi::to_wide (captures[3]);
 wide_int int_cst_3 = wi::to_wide (captures[4]);
																							    if (((wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_0))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_1)))
 && wi::eq_p (int_cst_3, otype_max)
)
																							      {
																								{
																								  res_ops[0] = captures[0];
																								  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 81, __FILE__, __LINE__, false);
																								  return true;
																								}
																							      }
																							}
																						      }
																						  }
																					      }
																					    }
																				          break;
																				        }
																				      default:;
																				      }
																			        }
																			      break;
																			    default:;
																			    }
																		          break;
																		        }
																		      default:;
																		      }
																		  }
																	      }
																	    break;
																	  }
																	default:;
																	}
															          }
															        break;
															      default:;
															      }
															    break;
															  }
															default:;
															}
													          }
													        break;
													      default:;
													      }
													    break;
													  }
													default:;
													}
											          }
											        break;
											      case INTEGER_CST:
											        {
												  switch (TREE_CODE (_q81))
												    {
												    case SSA_NAME:
												      if (gimple *_d5 = get_def (valueize, _q81))
												        {
													  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
													    switch (gimple_assign_rhs_code (_a5))
													      {
													      case NEGATE_EXPR:
													        {
														  tree _q100 = gimple_assign_rhs1 (_a5);
														  _q100 = do_valueize (valueize, _q100);
														  switch (TREE_CODE (_q100))
														    {
														    case SSA_NAME:
														      if (gimple *_d6 = get_def (valueize, _q100))
														        {
															  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
															    switch (gimple_assign_rhs_code (_a6))
															      {
															      CASE_CONVERT:
															        {
																  tree _q110 = gimple_assign_rhs1 (_a6);
																  _q110 = do_valueize (valueize, _q110);
																  switch (TREE_CODE (_q110))
																    {
																    case SSA_NAME:
																      if (gimple *_d7 = get_def (valueize, _q110))
																        {
																	  if (gassign *_a7 = dyn_cast <gassign *> (_d7))
																	    switch (gimple_assign_rhs_code (_a7))
																	      {
																	      case LT_EXPR:
																	        {
																		  tree _q120 = gimple_assign_rhs1 (_a7);
																		  _q120 = do_valueize (valueize, _q120);
																		  tree _q121 = gimple_assign_rhs2 (_a7);
																		  _q121 = do_valueize (valueize, _q121);
																		  if ((_q120 == _q40 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q40, 0) && types_match (_q120, _q40)))
																		    {
																		      if (integer_zerop (_q121))
																			{
																			  switch (TREE_CODE (_p2))
																			    {
																			    case SSA_NAME:
																			      if (gimple *_d8 = get_def (valueize, _p2))
																			        {
																				  if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																				    switch (gimple_assign_rhs_code (_a8))
																				      {
																				      CASE_CONVERT:
																				        {
																					  tree _q150 = gimple_assign_rhs1 (_a8);
																					  _q150 = do_valueize (valueize, _q150);
																					  if ((_q150 == _q40 && ! TREE_SIDE_EFFECTS (_q150)) || (operand_equal_p (_q150, _q40, 0) && types_match (_q150, _q40)))
																					    {
																					      {
																						tree captures[5] ATTRIBUTE_UNUSED = { _q40, _q30, _q31, _q21, _q80 };
																						if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type)
)
																						  {
																						    if (!TYPE_UNSIGNED (TREE_TYPE (captures[0])) && TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
																						      {
																							{
 unsigned itype_prec = TYPE_PRECISION (TREE_TYPE (captures[0]));
 unsigned otype_prec = TYPE_PRECISION (type);
 wide_int offset = wi::uhwi (HOST_WIDE_INT_1U << (otype_prec - 1),
 itype_prec);
 wide_int limit_0 = wi::mask (otype_prec, false, itype_prec);
 wide_int limit_1 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 3,
 itype_prec);
 wide_int limit_2 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 2,
 itype_prec);
 wide_int otype_max = wi::mask (otype_prec - 1, false, otype_prec);
 wide_int itype_max = wi::mask (otype_prec - 1, false, itype_prec);
 wide_int int_cst_1 = wi::to_wide (captures[2]);
 wide_int int_cst_2 = wi::to_wide (captures[3]);
 wide_int int_cst_3 = wi::to_wide (captures[4]);
																							    if (((wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_0))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_1)))
 && wi::eq_p (int_cst_3, otype_max)
)
																							      {
																								{
																								  res_ops[0] = captures[0];
																								  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 81, __FILE__, __LINE__, false);
																								  return true;
																								}
																							      }
																							}
																						      }
																						  }
																					      }
																					    }
																				          break;
																				        }
																				      default:;
																				      }
																			        }
																			      break;
																			    default:;
																			    }
																		        }
																		    }
																	          break;
																	        }
																	      default:;
																	      }
																        }
																      break;
																    default:;
																    }
															          break;
															        }
															      default:;
															      }
														        }
														      break;
														    default:;
														    }
													          break;
													        }
													      default:;
													      }
												        }
												      break;
												    default:;
												    }
												{
												  tree _q81_pops[1];
												  if (gimple_nop_convert (_q81, _q81_pops, valueize))
												    {
												      tree _q100 = _q81_pops[0];
												      switch (TREE_CODE (_q100))
												        {
													case SSA_NAME:
													  if (gimple *_d5 = get_def (valueize, _q100))
													    {
													      if (gassign *_a5 = dyn_cast <gassign *> (_d5))
													        switch (gimple_assign_rhs_code (_a5))
														  {
														  case NEGATE_EXPR:
														    {
														      tree _q110 = gimple_assign_rhs1 (_a5);
														      _q110 = do_valueize (valueize, _q110);
														      {
															tree _q110_pops[1];
															if (gimple_nop_convert (_q110, _q110_pops, valueize))
															  {
															    tree _q120 = _q110_pops[0];
															    switch (TREE_CODE (_q120))
															      {
															      case SSA_NAME:
															        if (gimple *_d6 = get_def (valueize, _q120))
															          {
																    if (gassign *_a6 = dyn_cast <gassign *> (_d6))
																      switch (gimple_assign_rhs_code (_a6))
																	{
																	CASE_CONVERT:
																	  {
																	    tree _q130 = gimple_assign_rhs1 (_a6);
																	    _q130 = do_valueize (valueize, _q130);
																	    switch (TREE_CODE (_q130))
																	      {
																	      case SSA_NAME:
																	        if (gimple *_d7 = get_def (valueize, _q130))
																	          {
																		    if (gassign *_a7 = dyn_cast <gassign *> (_d7))
																		      switch (gimple_assign_rhs_code (_a7))
																			{
																			case LT_EXPR:
																			  {
																			    tree _q140 = gimple_assign_rhs1 (_a7);
																			    _q140 = do_valueize (valueize, _q140);
																			    tree _q141 = gimple_assign_rhs2 (_a7);
																			    _q141 = do_valueize (valueize, _q141);
																			    if ((_q140 == _q40 && ! TREE_SIDE_EFFECTS (_q140)) || (operand_equal_p (_q140, _q40, 0) && types_match (_q140, _q40)))
																			      {
																				if (integer_zerop (_q141))
																				  {
																				    switch (TREE_CODE (_p2))
																				      {
																				      case SSA_NAME:
																				        if (gimple *_d8 = get_def (valueize, _p2))
																				          {
																					    if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																					      switch (gimple_assign_rhs_code (_a8))
																						{
																						CASE_CONVERT:
																						  {
																						    tree _q170 = gimple_assign_rhs1 (_a8);
																						    _q170 = do_valueize (valueize, _q170);
																						    if ((_q170 == _q40 && ! TREE_SIDE_EFFECTS (_q170)) || (operand_equal_p (_q170, _q40, 0) && types_match (_q170, _q40)))
																						      {
																							{
																							  tree captures[5] ATTRIBUTE_UNUSED = { _q40, _q30, _q31, _q21, _q80 };
																							  if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type)
)
																							    {
																							      if (!TYPE_UNSIGNED (TREE_TYPE (captures[0])) && TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
																								{
																								  {
 unsigned itype_prec = TYPE_PRECISION (TREE_TYPE (captures[0]));
 unsigned otype_prec = TYPE_PRECISION (type);
 wide_int offset = wi::uhwi (HOST_WIDE_INT_1U << (otype_prec - 1),
 itype_prec);
 wide_int limit_0 = wi::mask (otype_prec, false, itype_prec);
 wide_int limit_1 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 3,
 itype_prec);
 wide_int limit_2 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 2,
 itype_prec);
 wide_int otype_max = wi::mask (otype_prec - 1, false, otype_prec);
 wide_int itype_max = wi::mask (otype_prec - 1, false, itype_prec);
 wide_int int_cst_1 = wi::to_wide (captures[2]);
 wide_int int_cst_2 = wi::to_wide (captures[3]);
 wide_int int_cst_3 = wi::to_wide (captures[4]);
																								      if (((wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_0))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_1)))
 && wi::eq_p (int_cst_3, otype_max)
)
																									{
																									  {
																									    res_ops[0] = captures[0];
																									    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 81, __FILE__, __LINE__, false);
																									    return true;
																									  }
																									}
																								  }
																								}
																							    }
																							}
																						      }
																						    break;
																						  }
																						default:;
																						}
																				          }
																				        break;
																				      default:;
																				      }
																				  }
																			      }
																			    break;
																			  }
																			default:;
																			}
																	          }
																	        break;
																	      default:;
																	      }
																	    break;
																	  }
																	default:;
																	}
															          }
															        break;
															      default:;
															      }
															  }
														      }
														      break;
														    }
														  default:;
														  }
													    }
													  break;
												        default:;
												        }
												    }
												}
											          break;
											        }
											      default:;
											      }
											  {
											    tree _q80_pops[1];
											    if (gimple_nop_convert (_q80, _q80_pops, valueize))
											      {
												tree _q90 = _q80_pops[0];
												switch (TREE_CODE (_q90))
												  {
												  case SSA_NAME:
												    if (gimple *_d5 = get_def (valueize, _q90))
												      {
													if (gassign *_a5 = dyn_cast <gassign *> (_d5))
													  switch (gimple_assign_rhs_code (_a5))
													    {
													    case NEGATE_EXPR:
													      {
														tree _q100 = gimple_assign_rhs1 (_a5);
														_q100 = do_valueize (valueize, _q100);
														{
														  tree _q100_pops[1];
														  if (gimple_nop_convert (_q100, _q100_pops, valueize))
														    {
														      tree _q110 = _q100_pops[0];
														      switch (TREE_CODE (_q110))
														        {
															case SSA_NAME:
															  if (gimple *_d6 = get_def (valueize, _q110))
															    {
															      if (gassign *_a6 = dyn_cast <gassign *> (_d6))
															        switch (gimple_assign_rhs_code (_a6))
																  {
																  CASE_CONVERT:
																    {
																      tree _q120 = gimple_assign_rhs1 (_a6);
																      _q120 = do_valueize (valueize, _q120);
																      switch (TREE_CODE (_q120))
																        {
																	case SSA_NAME:
																	  if (gimple *_d7 = get_def (valueize, _q120))
																	    {
																	      if (gassign *_a7 = dyn_cast <gassign *> (_d7))
																	        switch (gimple_assign_rhs_code (_a7))
																		  {
																		  case LT_EXPR:
																		    {
																		      tree _q130 = gimple_assign_rhs1 (_a7);
																		      _q130 = do_valueize (valueize, _q130);
																		      tree _q131 = gimple_assign_rhs2 (_a7);
																		      _q131 = do_valueize (valueize, _q131);
																		      if ((_q130 == _q40 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q40, 0) && types_match (_q130, _q40)))
																			{
																			  if (integer_zerop (_q131))
																			    {
																			      switch (TREE_CODE (_q81))
																			        {
																				case INTEGER_CST:
																				  {
																				    switch (TREE_CODE (_p2))
																				      {
																				      case SSA_NAME:
																				        if (gimple *_d8 = get_def (valueize, _p2))
																				          {
																					    if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																					      switch (gimple_assign_rhs_code (_a8))
																						{
																						CASE_CONVERT:
																						  {
																						    tree _q170 = gimple_assign_rhs1 (_a8);
																						    _q170 = do_valueize (valueize, _q170);
																						    if ((_q170 == _q40 && ! TREE_SIDE_EFFECTS (_q170)) || (operand_equal_p (_q170, _q40, 0) && types_match (_q170, _q40)))
																						      {
																							{
																							  tree captures[5] ATTRIBUTE_UNUSED = { _q40, _q30, _q31, _q21, _q81 };
																							  if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type)
)
																							    {
																							      if (!TYPE_UNSIGNED (TREE_TYPE (captures[0])) && TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
																								{
																								  {
 unsigned itype_prec = TYPE_PRECISION (TREE_TYPE (captures[0]));
 unsigned otype_prec = TYPE_PRECISION (type);
 wide_int offset = wi::uhwi (HOST_WIDE_INT_1U << (otype_prec - 1),
 itype_prec);
 wide_int limit_0 = wi::mask (otype_prec, false, itype_prec);
 wide_int limit_1 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 3,
 itype_prec);
 wide_int limit_2 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 2,
 itype_prec);
 wide_int otype_max = wi::mask (otype_prec - 1, false, otype_prec);
 wide_int itype_max = wi::mask (otype_prec - 1, false, itype_prec);
 wide_int int_cst_1 = wi::to_wide (captures[2]);
 wide_int int_cst_2 = wi::to_wide (captures[3]);
 wide_int int_cst_3 = wi::to_wide (captures[4]);
																								      if (((wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_0))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_1)))
 && wi::eq_p (int_cst_3, otype_max)
)
																									{
																									  {
																									    res_ops[0] = captures[0];
																									    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 81, __FILE__, __LINE__, false);
																									    return true;
																									  }
																									}
																								  }
																								}
																							    }
																							}
																						      }
																						    break;
																						  }
																						default:;
																						}
																				          }
																				        break;
																				      default:;
																				      }
																				    break;
																				  }
																			        default:;
																			        }
																			    }
																		        }
																		      break;
																		    }
																		  default:;
																		  }
																	    }
																	  break;
																        default:;
																        }
																      break;
																    }
																  default:;
																  }
															    }
															  break;
														        default:;
														        }
														    }
														}
													        break;
													      }
													    default:;
													    }
												      }
												    break;
											          default:;
											          }
											      }
											  }
											    break;
											  }
											default:;
											}
									          }
									        break;
									      default:;
									      }
									    break;
									  }
								        default:;
								        }
								      break;
								    }
							          default:;
							          }
							        break;
							      }
							    default:;
							    }
						      }
						    break;
						  case INTEGER_CST:
						    {
						      switch (TREE_CODE (_q31))
						        {
							case SSA_NAME:
							  if (gimple *_d3 = get_def (valueize, _q31))
							    {
							      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							        switch (gimple_assign_rhs_code (_a3))
								  {
								  CASE_CONVERT:
								    {
								      tree _q50 = gimple_assign_rhs1 (_a3);
								      _q50 = do_valueize (valueize, _q50);
								      switch (TREE_CODE (_q21))
								        {
									case INTEGER_CST:
									  {
									    switch (TREE_CODE (_p1))
									      {
									      case SSA_NAME:
									        if (gimple *_d4 = get_def (valueize, _p1))
									          {
										    if (gassign *_a4 = dyn_cast <gassign *> (_d4))
										      switch (gimple_assign_rhs_code (_a4))
											{
											case BIT_XOR_EXPR:
											  {
											    tree _q80 = gimple_assign_rhs1 (_a4);
											    _q80 = do_valueize (valueize, _q80);
											    tree _q81 = gimple_assign_rhs2 (_a4);
											    _q81 = do_valueize (valueize, _q81);
											    if (tree_swap_operands_p (_q80, _q81))
											      std::swap (_q80, _q81);
											    switch (TREE_CODE (_q80))
											      {
											      case SSA_NAME:
											        if (gimple *_d5 = get_def (valueize, _q80))
											          {
												    if (gassign *_a5 = dyn_cast <gassign *> (_d5))
												      switch (gimple_assign_rhs_code (_a5))
													{
													case NEGATE_EXPR:
													  {
													    tree _q90 = gimple_assign_rhs1 (_a5);
													    _q90 = do_valueize (valueize, _q90);
													    switch (TREE_CODE (_q90))
													      {
													      case SSA_NAME:
													        if (gimple *_d6 = get_def (valueize, _q90))
													          {
														    if (gassign *_a6 = dyn_cast <gassign *> (_d6))
														      switch (gimple_assign_rhs_code (_a6))
															{
															CASE_CONVERT:
															  {
															    tree _q100 = gimple_assign_rhs1 (_a6);
															    _q100 = do_valueize (valueize, _q100);
															    switch (TREE_CODE (_q100))
															      {
															      case SSA_NAME:
															        if (gimple *_d7 = get_def (valueize, _q100))
															          {
																    if (gassign *_a7 = dyn_cast <gassign *> (_d7))
																      switch (gimple_assign_rhs_code (_a7))
																	{
																	case LT_EXPR:
																	  {
																	    tree _q110 = gimple_assign_rhs1 (_a7);
																	    _q110 = do_valueize (valueize, _q110);
																	    tree _q111 = gimple_assign_rhs2 (_a7);
																	    _q111 = do_valueize (valueize, _q111);
																	    if ((_q110 == _q50 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q50, 0) && types_match (_q110, _q50)))
																	      {
																		if (integer_zerop (_q111))
																		  {
																		    switch (TREE_CODE (_q81))
																		      {
																		      case INTEGER_CST:
																		        {
																			  switch (TREE_CODE (_p2))
																			    {
																			    case SSA_NAME:
																			      if (gimple *_d8 = get_def (valueize, _p2))
																			        {
																				  if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																				    switch (gimple_assign_rhs_code (_a8))
																				      {
																				      CASE_CONVERT:
																				        {
																					  tree _q150 = gimple_assign_rhs1 (_a8);
																					  _q150 = do_valueize (valueize, _q150);
																					  if ((_q150 == _q50 && ! TREE_SIDE_EFFECTS (_q150)) || (operand_equal_p (_q150, _q50, 0) && types_match (_q150, _q50)))
																					    {
																					      {
																						tree captures[5] ATTRIBUTE_UNUSED = { _q50, _q31, _q30, _q21, _q81 };
																						if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type)
)
																						  {
																						    if (!TYPE_UNSIGNED (TREE_TYPE (captures[0])) && TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
																						      {
																							{
 unsigned itype_prec = TYPE_PRECISION (TREE_TYPE (captures[0]));
 unsigned otype_prec = TYPE_PRECISION (type);
 wide_int offset = wi::uhwi (HOST_WIDE_INT_1U << (otype_prec - 1),
 itype_prec);
 wide_int limit_0 = wi::mask (otype_prec, false, itype_prec);
 wide_int limit_1 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 3,
 itype_prec);
 wide_int limit_2 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 2,
 itype_prec);
 wide_int otype_max = wi::mask (otype_prec - 1, false, otype_prec);
 wide_int itype_max = wi::mask (otype_prec - 1, false, itype_prec);
 wide_int int_cst_1 = wi::to_wide (captures[2]);
 wide_int int_cst_2 = wi::to_wide (captures[3]);
 wide_int int_cst_3 = wi::to_wide (captures[4]);
																							    if (((wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_0))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_1)))
 && wi::eq_p (int_cst_3, otype_max)
)
																							      {
																								{
																								  res_ops[0] = captures[0];
																								  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 81, __FILE__, __LINE__, false);
																								  return true;
																								}
																							      }
																							}
																						      }
																						  }
																					      }
																					    }
																				          break;
																				        }
																				      default:;
																				      }
																			        }
																			      break;
																			    default:;
																			    }
																		          break;
																		        }
																		      default:;
																		      }
																		  }
																	      }
																	    break;
																	  }
																	default:;
																	}
															          }
															        break;
															      default:;
															      }
															    break;
															  }
															default:;
															}
													          }
													        break;
													      default:;
													      }
													    break;
													  }
													default:;
													}
											          }
											        break;
											      case INTEGER_CST:
											        {
												  switch (TREE_CODE (_q81))
												    {
												    case SSA_NAME:
												      if (gimple *_d5 = get_def (valueize, _q81))
												        {
													  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
													    switch (gimple_assign_rhs_code (_a5))
													      {
													      case NEGATE_EXPR:
													        {
														  tree _q100 = gimple_assign_rhs1 (_a5);
														  _q100 = do_valueize (valueize, _q100);
														  switch (TREE_CODE (_q100))
														    {
														    case SSA_NAME:
														      if (gimple *_d6 = get_def (valueize, _q100))
														        {
															  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
															    switch (gimple_assign_rhs_code (_a6))
															      {
															      CASE_CONVERT:
															        {
																  tree _q110 = gimple_assign_rhs1 (_a6);
																  _q110 = do_valueize (valueize, _q110);
																  switch (TREE_CODE (_q110))
																    {
																    case SSA_NAME:
																      if (gimple *_d7 = get_def (valueize, _q110))
																        {
																	  if (gassign *_a7 = dyn_cast <gassign *> (_d7))
																	    switch (gimple_assign_rhs_code (_a7))
																	      {
																	      case LT_EXPR:
																	        {
																		  tree _q120 = gimple_assign_rhs1 (_a7);
																		  _q120 = do_valueize (valueize, _q120);
																		  tree _q121 = gimple_assign_rhs2 (_a7);
																		  _q121 = do_valueize (valueize, _q121);
																		  if ((_q120 == _q50 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q50, 0) && types_match (_q120, _q50)))
																		    {
																		      if (integer_zerop (_q121))
																			{
																			  switch (TREE_CODE (_p2))
																			    {
																			    case SSA_NAME:
																			      if (gimple *_d8 = get_def (valueize, _p2))
																			        {
																				  if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																				    switch (gimple_assign_rhs_code (_a8))
																				      {
																				      CASE_CONVERT:
																				        {
																					  tree _q150 = gimple_assign_rhs1 (_a8);
																					  _q150 = do_valueize (valueize, _q150);
																					  if ((_q150 == _q50 && ! TREE_SIDE_EFFECTS (_q150)) || (operand_equal_p (_q150, _q50, 0) && types_match (_q150, _q50)))
																					    {
																					      {
																						tree captures[5] ATTRIBUTE_UNUSED = { _q50, _q31, _q30, _q21, _q80 };
																						if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type)
)
																						  {
																						    if (!TYPE_UNSIGNED (TREE_TYPE (captures[0])) && TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
																						      {
																							{
 unsigned itype_prec = TYPE_PRECISION (TREE_TYPE (captures[0]));
 unsigned otype_prec = TYPE_PRECISION (type);
 wide_int offset = wi::uhwi (HOST_WIDE_INT_1U << (otype_prec - 1),
 itype_prec);
 wide_int limit_0 = wi::mask (otype_prec, false, itype_prec);
 wide_int limit_1 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 3,
 itype_prec);
 wide_int limit_2 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 2,
 itype_prec);
 wide_int otype_max = wi::mask (otype_prec - 1, false, otype_prec);
 wide_int itype_max = wi::mask (otype_prec - 1, false, itype_prec);
 wide_int int_cst_1 = wi::to_wide (captures[2]);
 wide_int int_cst_2 = wi::to_wide (captures[3]);
 wide_int int_cst_3 = wi::to_wide (captures[4]);
																							    if (((wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_0))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_1)))
 && wi::eq_p (int_cst_3, otype_max)
)
																							      {
																								{
																								  res_ops[0] = captures[0];
																								  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 81, __FILE__, __LINE__, false);
																								  return true;
																								}
																							      }
																							}
																						      }
																						  }
																					      }
																					    }
																				          break;
																				        }
																				      default:;
																				      }
																			        }
																			      break;
																			    default:;
																			    }
																		        }
																		    }
																	          break;
																	        }
																	      default:;
																	      }
																        }
																      break;
																    default:;
																    }
															          break;
															        }
															      default:;
															      }
														        }
														      break;
														    default:;
														    }
													          break;
													        }
													      default:;
													      }
												        }
												      break;
												    default:;
												    }
												{
												  tree _q81_pops[1];
												  if (gimple_nop_convert (_q81, _q81_pops, valueize))
												    {
												      tree _q100 = _q81_pops[0];
												      switch (TREE_CODE (_q100))
												        {
													case SSA_NAME:
													  if (gimple *_d5 = get_def (valueize, _q100))
													    {
													      if (gassign *_a5 = dyn_cast <gassign *> (_d5))
													        switch (gimple_assign_rhs_code (_a5))
														  {
														  case NEGATE_EXPR:
														    {
														      tree _q110 = gimple_assign_rhs1 (_a5);
														      _q110 = do_valueize (valueize, _q110);
														      {
															tree _q110_pops[1];
															if (gimple_nop_convert (_q110, _q110_pops, valueize))
															  {
															    tree _q120 = _q110_pops[0];
															    switch (TREE_CODE (_q120))
															      {
															      case SSA_NAME:
															        if (gimple *_d6 = get_def (valueize, _q120))
															          {
																    if (gassign *_a6 = dyn_cast <gassign *> (_d6))
																      switch (gimple_assign_rhs_code (_a6))
																	{
																	CASE_CONVERT:
																	  {
																	    tree _q130 = gimple_assign_rhs1 (_a6);
																	    _q130 = do_valueize (valueize, _q130);
																	    switch (TREE_CODE (_q130))
																	      {
																	      case SSA_NAME:
																	        if (gimple *_d7 = get_def (valueize, _q130))
																	          {
																		    if (gassign *_a7 = dyn_cast <gassign *> (_d7))
																		      switch (gimple_assign_rhs_code (_a7))
																			{
																			case LT_EXPR:
																			  {
																			    tree _q140 = gimple_assign_rhs1 (_a7);
																			    _q140 = do_valueize (valueize, _q140);
																			    tree _q141 = gimple_assign_rhs2 (_a7);
																			    _q141 = do_valueize (valueize, _q141);
																			    if ((_q140 == _q50 && ! TREE_SIDE_EFFECTS (_q140)) || (operand_equal_p (_q140, _q50, 0) && types_match (_q140, _q50)))
																			      {
																				if (integer_zerop (_q141))
																				  {
																				    switch (TREE_CODE (_p2))
																				      {
																				      case SSA_NAME:
																				        if (gimple *_d8 = get_def (valueize, _p2))
																				          {
																					    if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																					      switch (gimple_assign_rhs_code (_a8))
																						{
																						CASE_CONVERT:
																						  {
																						    tree _q170 = gimple_assign_rhs1 (_a8);
																						    _q170 = do_valueize (valueize, _q170);
																						    if ((_q170 == _q50 && ! TREE_SIDE_EFFECTS (_q170)) || (operand_equal_p (_q170, _q50, 0) && types_match (_q170, _q50)))
																						      {
																							{
																							  tree captures[5] ATTRIBUTE_UNUSED = { _q50, _q31, _q30, _q21, _q80 };
																							  if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type)
)
																							    {
																							      if (!TYPE_UNSIGNED (TREE_TYPE (captures[0])) && TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
																								{
																								  {
 unsigned itype_prec = TYPE_PRECISION (TREE_TYPE (captures[0]));
 unsigned otype_prec = TYPE_PRECISION (type);
 wide_int offset = wi::uhwi (HOST_WIDE_INT_1U << (otype_prec - 1),
 itype_prec);
 wide_int limit_0 = wi::mask (otype_prec, false, itype_prec);
 wide_int limit_1 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 3,
 itype_prec);
 wide_int limit_2 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 2,
 itype_prec);
 wide_int otype_max = wi::mask (otype_prec - 1, false, otype_prec);
 wide_int itype_max = wi::mask (otype_prec - 1, false, itype_prec);
 wide_int int_cst_1 = wi::to_wide (captures[2]);
 wide_int int_cst_2 = wi::to_wide (captures[3]);
 wide_int int_cst_3 = wi::to_wide (captures[4]);
																								      if (((wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_0))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_1)))
 && wi::eq_p (int_cst_3, otype_max)
)
																									{
																									  {
																									    res_ops[0] = captures[0];
																									    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 81, __FILE__, __LINE__, false);
																									    return true;
																									  }
																									}
																								  }
																								}
																							    }
																							}
																						      }
																						    break;
																						  }
																						default:;
																						}
																				          }
																				        break;
																				      default:;
																				      }
																				  }
																			      }
																			    break;
																			  }
																			default:;
																			}
																	          }
																	        break;
																	      default:;
																	      }
																	    break;
																	  }
																	default:;
																	}
															          }
															        break;
															      default:;
															      }
															  }
														      }
														      break;
														    }
														  default:;
														  }
													    }
													  break;
												        default:;
												        }
												    }
												}
											          break;
											        }
											      default:;
											      }
											  {
											    tree _q80_pops[1];
											    if (gimple_nop_convert (_q80, _q80_pops, valueize))
											      {
												tree _q90 = _q80_pops[0];
												switch (TREE_CODE (_q90))
												  {
												  case SSA_NAME:
												    if (gimple *_d5 = get_def (valueize, _q90))
												      {
													if (gassign *_a5 = dyn_cast <gassign *> (_d5))
													  switch (gimple_assign_rhs_code (_a5))
													    {
													    case NEGATE_EXPR:
													      {
														tree _q100 = gimple_assign_rhs1 (_a5);
														_q100 = do_valueize (valueize, _q100);
														{
														  tree _q100_pops[1];
														  if (gimple_nop_convert (_q100, _q100_pops, valueize))
														    {
														      tree _q110 = _q100_pops[0];
														      switch (TREE_CODE (_q110))
														        {
															case SSA_NAME:
															  if (gimple *_d6 = get_def (valueize, _q110))
															    {
															      if (gassign *_a6 = dyn_cast <gassign *> (_d6))
															        switch (gimple_assign_rhs_code (_a6))
																  {
																  CASE_CONVERT:
																    {
																      tree _q120 = gimple_assign_rhs1 (_a6);
																      _q120 = do_valueize (valueize, _q120);
																      switch (TREE_CODE (_q120))
																        {
																	case SSA_NAME:
																	  if (gimple *_d7 = get_def (valueize, _q120))
																	    {
																	      if (gassign *_a7 = dyn_cast <gassign *> (_d7))
																	        switch (gimple_assign_rhs_code (_a7))
																		  {
																		  case LT_EXPR:
																		    {
																		      tree _q130 = gimple_assign_rhs1 (_a7);
																		      _q130 = do_valueize (valueize, _q130);
																		      tree _q131 = gimple_assign_rhs2 (_a7);
																		      _q131 = do_valueize (valueize, _q131);
																		      if ((_q130 == _q50 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q50, 0) && types_match (_q130, _q50)))
																			{
																			  if (integer_zerop (_q131))
																			    {
																			      switch (TREE_CODE (_q81))
																			        {
																				case INTEGER_CST:
																				  {
																				    switch (TREE_CODE (_p2))
																				      {
																				      case SSA_NAME:
																				        if (gimple *_d8 = get_def (valueize, _p2))
																				          {
																					    if (gassign *_a8 = dyn_cast <gassign *> (_d8))
																					      switch (gimple_assign_rhs_code (_a8))
																						{
																						CASE_CONVERT:
																						  {
																						    tree _q170 = gimple_assign_rhs1 (_a8);
																						    _q170 = do_valueize (valueize, _q170);
																						    if ((_q170 == _q50 && ! TREE_SIDE_EFFECTS (_q170)) || (operand_equal_p (_q170, _q50, 0) && types_match (_q170, _q50)))
																						      {
																							{
																							  tree captures[5] ATTRIBUTE_UNUSED = { _q50, _q31, _q30, _q21, _q81 };
																							  if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type)
)
																							    {
																							      if (!TYPE_UNSIGNED (TREE_TYPE (captures[0])) && TYPE_UNSIGNED (TREE_TYPE (captures[1]))
)
																								{
																								  {
 unsigned itype_prec = TYPE_PRECISION (TREE_TYPE (captures[0]));
 unsigned otype_prec = TYPE_PRECISION (type);
 wide_int offset = wi::uhwi (HOST_WIDE_INT_1U << (otype_prec - 1),
 itype_prec);
 wide_int limit_0 = wi::mask (otype_prec, false, itype_prec);
 wide_int limit_1 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 3,
 itype_prec);
 wide_int limit_2 = wi::uhwi ((HOST_WIDE_INT_1U << otype_prec) - 2,
 itype_prec);
 wide_int otype_max = wi::mask (otype_prec - 1, false, otype_prec);
 wide_int itype_max = wi::mask (otype_prec - 1, false, itype_prec);
 wide_int int_cst_1 = wi::to_wide (captures[2]);
 wide_int int_cst_2 = wi::to_wide (captures[3]);
 wide_int int_cst_3 = wi::to_wide (captures[4]);
																								      if (((wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_0))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, offset) && wi::eq_p (int_cst_2, limit_2))
 || (wi::eq_p (int_cst_1, itype_max) && wi::eq_p (int_cst_2, limit_1)))
 && wi::eq_p (int_cst_3, otype_max)
)
																									{
																									  {
																									    res_ops[0] = captures[0];
																									    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 81, __FILE__, __LINE__, false);
																									    return true;
																									  }
																									}
																								  }
																								}
																							    }
																							}
																						      }
																						    break;
																						  }
																						default:;
																						}
																				          }
																				        break;
																				      default:;
																				      }
																				    break;
																				  }
																			        default:;
																			        }
																			    }
																		        }
																		      break;
																		    }
																		  default:;
																		  }
																	    }
																	  break;
																        default:;
																        }
																      break;
																    }
																  default:;
																  }
															    }
															  break;
														        default:;
														        }
														    }
														}
													        break;
													      }
													    default:;
													    }
												      }
												    break;
											          default:;
											          }
											      }
											  }
											    break;
											  }
											default:;
											}
									          }
									        break;
									      default:;
									      }
									    break;
									  }
								        default:;
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						      break;
						    }
					          default:;
					          }
					        break;
					      }
					    default:;
					    }
				      }
				    break;
			          default:;
			          }
			      }
			  }
		        break;
		      }
		    default:;
		    }
		}
	    }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_604 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const combined_fn ARG_UNUSED (FMIN_ALL))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (flag_finite_math_only
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1513;
      {
	res_op->set_op (MIN_EXPR, type, 2);
	res_op->ops[0] = captures[0];
	res_op->ops[1] = captures[1];
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 843, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1513:;
    }
  return false;
}

bool
gimple_simplify_609 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (tree_nop_conversion_p (TREE_TYPE (captures[0]), type)
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1521;
      {
	res_op->set_op (NOP_EXPR, type, 1);
	res_op->ops[0] = captures[0];
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 851, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1521:;
    }
  return false;
}

bool
gimple_simplify_616 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  gimple_seq *lseq = seq;
  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1528;
  {
    tree tem;
    tem = captures[2];
    res_op->set_value (tem);
    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 784, __FILE__, __LINE__, true);
    return true;
  }
next_after_fail1528:;
  return false;
}

bool
gimple_simplify_621 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const combined_fn ARG_UNUSED (uncond_op),
 const combined_fn ARG_UNUSED (cond_op))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  {
 tree op_type = TREE_TYPE (captures[1]);
      if (vectorized_internal_fn_supported_p (as_internal_fn (cond_op), op_type)
 && is_truth_type_for (op_type, TREE_TYPE (captures[0]))
 && single_use (captures[1])
)
	{
	  gimple_seq *lseq = seq;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1533;
	  {
	    res_op->set_op (VIEW_CONVERT_EXPR, type, 1);
	    {
	      tree _o1[5], _r1;
	      _o1[0] = captures[0];
	      _o1[1] = captures[2];
	      _o1[2] = captures[3];
	      _o1[3] = captures[4];
	      {
		tree _o2[1], _r2;
		_o2[0] = captures[5];
		gimple_match_op tem_op (res_op->cond.any_else (), VIEW_CONVERT_EXPR, op_type, _o2[0]);
		tem_op.resimplify (lseq, valueize);
		_r2 = maybe_push_res_to_seq (&tem_op, lseq);
		if (!_r2) goto next_after_fail1533;
		_o1[4] = _r2;
	      }
	      gimple_match_op tem_op (res_op->cond.any_else (), cond_op, TREE_TYPE (_o1[1]), _o1[0], _o1[1], _o1[2], _o1[3], _o1[4]);
	      tem_op.resimplify (lseq, valueize);
	      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	      if (!_r1) goto next_after_fail1533;
	      res_op->ops[0] = _r1;
	    }
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 858, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail1533:;
	}
  }
  return false;
}

bool
gimple_simplify_630 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const combined_fn ARG_UNUSED (cond_len_op))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  {
 tree op_type = TREE_TYPE (captures[6]);
      if (inverse_conditions_p (captures[0], captures[2])
 && element_precision (type) == element_precision (op_type)
)
	{
	  gimple_seq *lseq = seq;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1542;
	  {
	    res_op->set_op (VIEW_CONVERT_EXPR, type, 1);
	    {
	      tree _o1[7], _r1;
	      _o1[0] = captures[2];
	      _o1[1] = captures[3];
	      _o1[2] = captures[4];
	      _o1[3] = captures[5];
	      {
		tree _o2[1], _r2;
		_o2[0] = captures[1];
		gimple_match_op tem_op (res_op->cond.any_else (), VIEW_CONVERT_EXPR, op_type, _o2[0]);
		tem_op.resimplify (lseq, valueize);
		_r2 = maybe_push_res_to_seq (&tem_op, lseq);
		if (!_r2) goto next_after_fail1542;
		_o1[4] = _r2;
	      }
	      _o1[5] = captures[7];
	      _o1[6] = captures[8];
	      gimple_match_op tem_op (res_op->cond.any_else (), cond_len_op, TREE_TYPE (_o1[1]), _o1[0], _o1[1], _o1[2], _o1[3], _o1[4], _o1[5], _o1[6]);
	      tem_op.resimplify (lseq, valueize);
	      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	      if (!_r1) goto next_after_fail1542;
	      res_op->ops[0] = _r1;
	    }
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 867, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail1542:;
	}
  }
  return false;
}

bool
gimple_simplify_644 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const combined_fn ARG_UNUSED (fns))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  gimple_seq *lseq = seq;
  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1556;
  {
    res_op->set_op (fns, type, 1);
    res_op->ops[0] = captures[0];
    res_op->resimplify (lseq, valueize);
    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 881, __FILE__, __LINE__, true);
    return true;
  }
next_after_fail1556:;
  return false;
}

bool
gimple_simplify_648 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const combined_fn ARG_UNUSED (floors),
 const combined_fn ARG_UNUSED (truncs))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (canonicalize_math_p ()
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1560;
      {
	res_op->set_op (truncs, type, 1);
	res_op->ops[0] = captures[0];
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 885, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1560:;
    }
  return false;
}

bool
gimple_simplify_655 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const combined_fn ARG_UNUSED (ifn),
 const combined_fn ARG_UNUSED (lfn),
 const combined_fn ARG_UNUSED (llfn))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (canonicalize_math_p ()
)
    {
      if (TYPE_PRECISION (integer_type_node)
 == TYPE_PRECISION (long_integer_type_node)
)
	{
	  gimple_seq *lseq = seq;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1567;
	  {
	    res_op->set_op (lfn, type, 1);
	    res_op->ops[0] = captures[0];
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 892, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail1567:;
	}
    }
  return false;
}

bool
gimple_simplify_663 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (canonicalize_math_after_vectorization_p ()
)
    {
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1575;
      {
	res_op->set_op (CFN_FNMS, type, 3);
	res_op->ops[0] = captures[0];
	res_op->ops[1] = captures[1];
	res_op->ops[2] = captures[2];
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 900, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1575:;
    }
  return false;
}

bool
gimple_simplify_671 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const combined_fn ARG_UNUSED (ctz))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  {
 tree t = TREE_TYPE (captures[0]);
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1583;
      {
	res_op->set_op (ctz, type, 1);
	{
	  tree _o1[1], _r1;
	  _o1[0] = captures[1];
	  if (t != TREE_TYPE (_o1[0])
	      && !useless_type_conversion_p (t, TREE_TYPE (_o1[0])))
	    {
	      gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, t, _o1[0]);
	      tem_op.resimplify (lseq, valueize);
	      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	      if (!_r1) goto next_after_fail1583;
	    }
	  else
	    _r1 = _o1[0];
	  res_op->ops[0] = _r1;
	}
	res_op->resimplify (lseq, valueize);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 906, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1583:;
  }
  return false;
}

bool
gimple_simplify_680 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const combined_fn ARG_UNUSED (PARITY))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  gimple_seq *lseq = seq;
  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1597;
  {
    res_op->set_op (PARITY, type, 1);
    res_op->ops[0] = captures[0];
    res_op->resimplify (lseq, valueize);
    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 917, __FILE__, __LINE__, true);
    return true;
  }
next_after_fail1597:;
  return false;
}

bool
gimple_simplify_682 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const enum tree_code ARG_UNUSED (rot),
 const combined_fn ARG_UNUSED (parity))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (INTEGRAL_TYPE_P (TREE_TYPE (captures[0]))
 && INTEGRAL_TYPE_P (TREE_TYPE (captures[1]))
 && (
1
 || !TREE_SIDE_EFFECTS (captures[3]))
 && TYPE_PRECISION (TREE_TYPE (captures[0]))
 >= TYPE_PRECISION (TREE_TYPE (captures[1]))
)
    {
      {
 tree type0 = TREE_TYPE (captures[0]);
	  gimple_seq *lseq = seq;
	  if (lseq
	      && (!single_use (captures[1])))
	    lseq = NULL;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1599;
	  {
	    res_op->set_op (parity, type, 1);
	    {
	      tree _o1[1], _r1;
	      _o1[0] = captures[2];
	      if (type0 != TREE_TYPE (_o1[0])
	          && !useless_type_conversion_p (type0, TREE_TYPE (_o1[0])))
		{
		  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, type0, _o1[0]);
		  tem_op.resimplify (lseq, valueize);
		  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
		  if (!_r1) goto next_after_fail1599;
	        }
	      else
	        _r1 = _o1[0];
	      res_op->ops[0] = _r1;
	    }
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 919, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail1599:;
      }
    }
  return false;
}

bool
gimple_simplify_689 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 const tree ARG_UNUSED (type), tree *ARG_UNUSED (captures),
 const combined_fn ARG_UNUSED (uncond_op),
 const combined_fn ARG_UNUSED (cond_op))
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  {
 tree op_type = TREE_TYPE (captures[2]);
      if (vectorized_internal_fn_supported_p (as_internal_fn (cond_op), op_type)
 && is_truth_type_for (op_type, TREE_TYPE (captures[0]))
 && single_use (captures[2])
)
	{
	  gimple_seq *lseq = seq;
	  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1610;
	  {
	    res_op->set_op (VIEW_CONVERT_EXPR, type, 1);
	    {
	      tree _o1[7], _r1;
	      {
		tree _o2[1], _r2;
		_o2[0] = captures[0];
		gimple_match_op tem_op (res_op->cond.any_else (), BIT_NOT_EXPR, TREE_TYPE (_o2[0]), _o2[0]);
		tem_op.resimplify (lseq, valueize);
		_r2 = maybe_push_res_to_seq (&tem_op, lseq);
		if (!_r2) goto next_after_fail1610;
		_o1[0] = _r2;
	      }
	      _o1[1] = captures[3];
	      _o1[2] = captures[4];
	      _o1[3] = captures[5];
	      {
		tree _o2[1], _r2;
		_o2[0] = captures[1];
		gimple_match_op tem_op (res_op->cond.any_else (), VIEW_CONVERT_EXPR, op_type, _o2[0]);
		tem_op.resimplify (lseq, valueize);
		_r2 = maybe_push_res_to_seq (&tem_op, lseq);
		if (!_r2) goto next_after_fail1610;
		_o1[4] = _r2;
	      }
	      _o1[5] = captures[6];
	      _o1[6] = captures[7];
	      gimple_match_op tem_op (res_op->cond.any_else (), cond_op, TREE_TYPE (_o1[1]), _o1[0], _o1[1], _o1[2], _o1[3], _o1[4], _o1[5], _o1[6]);
	      tem_op.resimplify (lseq, valueize);
	      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
	      if (!_r1) goto next_after_fail1610;
	      res_op->ops[0] = _r1;
	    }
	    res_op->resimplify (lseq, valueize);
	    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 928, __FILE__, __LINE__, true);
	    return true;
	  }
next_after_fail1610:;
	}
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_COSL (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case NEGATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  {
		    tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		    const combined_fn coss = CFN_BUILT_IN_COSL;
		    gimple_seq *lseq = seq;
		    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1647;
		    {
		      res_op->set_op (coss, type, 1);
		      res_op->ops[0] = captures[0];
		      res_op->resimplify (lseq, valueize);
		      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 954, __FILE__, __LINE__, true);
		      return true;
		    }
next_after_fail1647:;
		  }
	          break;
	        }
	      case ABS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  {
		    tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		    const combined_fn coss = CFN_BUILT_IN_COSL;
		    gimple_seq *lseq = seq;
		    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1648;
		    {
		      res_op->set_op (coss, type, 1);
		      res_op->ops[0] = captures[0];
		      res_op->resimplify (lseq, valueize);
		      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 954, __FILE__, __LINE__, true);
		      return true;
		    }
next_after_fail1648:;
		  }
	          break;
	        }
	      default:;
	      }
	  else if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_COPYSIGN:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    tree _q21 = gimple_call_arg (_c1, 1);
		    _q21 = do_valueize (valueize, _q21);
		    {
		      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		      if (gimple_simplify_423 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_COPYSIGN, CFN_BUILT_IN_COSL))
		        return true;
		    }
	          }
	        break;
	      case CFN_BUILT_IN_COPYSIGNF:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    tree _q21 = gimple_call_arg (_c1, 1);
		    _q21 = do_valueize (valueize, _q21);
		    {
		      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		      if (gimple_simplify_423 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_COPYSIGNF, CFN_BUILT_IN_COSL))
		        return true;
		    }
	          }
	        break;
	      case CFN_BUILT_IN_COPYSIGNL:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    tree _q21 = gimple_call_arg (_c1, 1);
		    _q21 = do_valueize (valueize, _q21);
		    {
		      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		      if (gimple_simplify_423 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_COPYSIGNL, CFN_BUILT_IN_COSL))
		        return true;
		    }
	          }
	        break;
	      case CFN_BUILT_IN_ATANL:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q20 };
		      if (gimple_simplify_424 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_COSL, CFN_BUILT_IN_ATANL, CFN_BUILT_IN_SQRTL, CFN_BUILT_IN_COPYSIGNL))
		        return true;
		    }
	          }
	        break;
	      case CFN_COPYSIGN:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    tree _q21 = gimple_call_arg (_c1, 1);
		    _q21 = do_valueize (valueize, _q21);
		    {
		      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		      if (gimple_simplify_423 (res_op, seq, valueize, type, captures, CFN_COPYSIGN, CFN_BUILT_IN_COSL))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_CCOSF (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case NEGATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  {
		    tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		    gimple_seq *lseq = seq;
		    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1672;
		    {
		      res_op->set_op (CFN_BUILT_IN_CCOSF, type, 1);
		      res_op->ops[0] = captures[0];
		      res_op->resimplify (lseq, valueize);
		      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 966, __FILE__, __LINE__, true);
		      return true;
		    }
next_after_fail1672:;
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_CCOSHF (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case NEGATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  {
		    tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		    gimple_seq *lseq = seq;
		    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1675;
		    {
		      res_op->set_op (CFN_BUILT_IN_CCOSHF, type, 1);
		      res_op->ops[0] = captures[0];
		      res_op->resimplify (lseq, valueize);
		      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 966, __FILE__, __LINE__, true);
		      return true;
		    }
next_after_fail1675:;
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_CABS (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case CONJ_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  {
		    tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		    gimple_seq *lseq = seq;
		    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1683;
		    {
		      res_op->set_op (CFN_BUILT_IN_CABS, type, 1);
		      res_op->ops[0] = captures[0];
		      res_op->resimplify (lseq, valueize);
		      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 967, __FILE__, __LINE__, true);
		      return true;
		    }
next_after_fail1683:;
		  }
	          break;
	        }
	      case NEGATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  {
		    tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		    gimple_seq *lseq = seq;
		    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1684;
		    {
		      res_op->set_op (CFN_BUILT_IN_CABS, type, 1);
		      res_op->ops[0] = captures[0];
		      res_op->resimplify (lseq, valueize);
		      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 967, __FILE__, __LINE__, true);
		      return true;
		    }
next_after_fail1684:;
		  }
	          break;
	        }
	      case COMPLEX_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (real_zerop (_q21))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
			gimple_seq *lseq = seq;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1685;
			{
			  res_op->set_op (ABS_EXPR, type, 1);
			  res_op->ops[0] = captures[0];
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 968, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail1685:;
		      }
		    }
		  if (real_zerop (_q20))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q21, _q20 };
			gimple_seq *lseq = seq;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1686;
			{
			  res_op->set_op (ABS_EXPR, type, 1);
			  res_op->ops[0] = captures[0];
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 968, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail1686:;
		      }
		    }
		  if ((_q21 == _q20 && ! TREE_SIDE_EFFECTS (_q21)) || (operand_equal_p (_q21, _q20, 0) && types_match (_q21, _q20)))
		    {
		      {
			tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
			if (flag_unsafe_math_optimizations && canonicalize_math_p ()
)
			  {
			    gimple_seq *lseq = seq;
			    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1687;
			    {
			      res_op->set_op (MULT_EXPR, type, 2);
			      {
				tree _o1[1], _r1;
				_o1[0] = captures[0];
				gimple_match_op tem_op (res_op->cond.any_else (), ABS_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
				tem_op.resimplify (lseq, valueize);
				_r1 = maybe_push_res_to_seq (&tem_op, lseq);
				if (!_r1) goto next_after_fail1687;
				res_op->ops[0] = _r1;
			      }
			      res_op->ops[1] =  build_real_truncate (type, dconst_sqrt2 ());
			      res_op->resimplify (lseq, valueize);
			      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 969, __FILE__, __LINE__, true);
			      return true;
			    }
next_after_fail1687:;
			  }
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_PAREN_EXPR (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case PAREN_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q20 };
		    gimple_seq *lseq = seq;
		    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1743;
		    {
		      tree tem;
		      tem = captures[0];
		      res_op->set_value (tem);
		      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 987, __FILE__, __LINE__, true);
		      return true;
		    }
next_after_fail1743:;
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
if (CONSTANT_CLASS_P (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      gimple_seq *lseq = seq;
      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1744;
      {
	tree tem;
	tem = captures[0];
	res_op->set_value (tem);
	if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 988, __FILE__, __LINE__, true);
	return true;
      }
next_after_fail1744:;
    }
  }
  return false;
}

bool
gimple_simplify_IMAGPART_EXPR (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case COMPLEX_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		    gimple_seq *lseq = seq;
		    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1758;
		    {
		      tree tem;
		      tem = captures[1];
		      res_op->set_value (tem);
		      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 993, __FILE__, __LINE__, true);
		      return true;
		    }
next_after_fail1758:;
		  }
	          break;
	        }
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case CONJ_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  {
				    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q30 };
				    gimple_seq *lseq = seq;
				    if (lseq
				        && (!single_use (captures[0])
				            || !single_use (captures[1])))
				      lseq = NULL;
				    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1759;
				    {
				      res_op->set_op (NOP_EXPR, type, 1);
				      {
					tree _o1[1], _r1;
					{
					  tree _o2[1], _r2;
					  _o2[0] = captures[2];
					  gimple_match_op tem_op (res_op->cond.any_else (), IMAGPART_EXPR, TREE_TYPE (TREE_TYPE (_o2[0])), _o2[0]);
					  tem_op.resimplify (lseq, valueize);
					  _r2 = maybe_push_res_to_seq (&tem_op, lseq);
					  if (!_r2) goto next_after_fail1759;
					  _o1[0] = _r2;
					}
					gimple_match_op tem_op (res_op->cond.any_else (), NEGATE_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
					tem_op.resimplify (lseq, valueize);
					_r1 = maybe_push_res_to_seq (&tem_op, lseq);
					if (!_r1) goto next_after_fail1759;
					res_op->ops[0] = _r1;
				      }
				      res_op->resimplify (lseq, valueize);
				      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 994, __FILE__, __LINE__, true);
				      return true;
				    }
next_after_fail1759:;
				  }
			          break;
			        }
			      case PLUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  {
				    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31 };
				    const enum tree_code op = PLUS_EXPR;
				    gimple_seq *lseq = seq;
				    if (lseq
				        && (!single_use (captures[0])
				            || !single_use (captures[1])))
				      lseq = NULL;
				    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1760;
				    {
				      res_op->set_op (NOP_EXPR, type, 1);
				      {
					tree _o1[2], _r1;
					{
					  tree _o2[1], _r2;
					  _o2[0] = captures[2];
					  gimple_match_op tem_op (res_op->cond.any_else (), IMAGPART_EXPR, TREE_TYPE (TREE_TYPE (_o2[0])), _o2[0]);
					  tem_op.resimplify (lseq, valueize);
					  _r2 = maybe_push_res_to_seq (&tem_op, lseq);
					  if (!_r2) goto next_after_fail1760;
					  _o1[0] = _r2;
					}
					{
					  tree _o2[1], _r2;
					  _o2[0] = captures[3];
					  gimple_match_op tem_op (res_op->cond.any_else (), IMAGPART_EXPR, TREE_TYPE (TREE_TYPE (_o2[0])), _o2[0]);
					  tem_op.resimplify (lseq, valueize);
					  _r2 = maybe_push_res_to_seq (&tem_op, lseq);
					  if (!_r2) goto next_after_fail1760;
					  _o1[1] = _r2;
					}
					gimple_match_op tem_op (res_op->cond.any_else (), op, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
					tem_op.resimplify (lseq, valueize);
					_r1 = maybe_push_res_to_seq (&tem_op, lseq);
					if (!_r1) goto next_after_fail1760;
					res_op->ops[0] = _r1;
				      }
				      res_op->resimplify (lseq, valueize);
				      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 991, __FILE__, __LINE__, true);
				      return true;
				    }
next_after_fail1760:;
				  }
			          break;
			        }
			      case MINUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  {
				    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31 };
				    const enum tree_code op = MINUS_EXPR;
				    gimple_seq *lseq = seq;
				    if (lseq
				        && (!single_use (captures[0])
				            || !single_use (captures[1])))
				      lseq = NULL;
				    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1761;
				    {
				      res_op->set_op (NOP_EXPR, type, 1);
				      {
					tree _o1[2], _r1;
					{
					  tree _o2[1], _r2;
					  _o2[0] = captures[2];
					  gimple_match_op tem_op (res_op->cond.any_else (), IMAGPART_EXPR, TREE_TYPE (TREE_TYPE (_o2[0])), _o2[0]);
					  tem_op.resimplify (lseq, valueize);
					  _r2 = maybe_push_res_to_seq (&tem_op, lseq);
					  if (!_r2) goto next_after_fail1761;
					  _o1[0] = _r2;
					}
					{
					  tree _o2[1], _r2;
					  _o2[0] = captures[3];
					  gimple_match_op tem_op (res_op->cond.any_else (), IMAGPART_EXPR, TREE_TYPE (TREE_TYPE (_o2[0])), _o2[0]);
					  tem_op.resimplify (lseq, valueize);
					  _r2 = maybe_push_res_to_seq (&tem_op, lseq);
					  if (!_r2) goto next_after_fail1761;
					  _o1[1] = _r2;
					}
					gimple_match_op tem_op (res_op->cond.any_else (), op, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
					tem_op.resimplify (lseq, valueize);
					_r1 = maybe_push_res_to_seq (&tem_op, lseq);
					if (!_r1) goto next_after_fail1761;
					res_op->ops[0] = _r1;
				      }
				      res_op->resimplify (lseq, valueize);
				      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 991, __FILE__, __LINE__, true);
				      return true;
				    }
next_after_fail1761:;
				  }
			          break;
			        }
			      default:;
			      }
			  else if (gcall *_c2 = dyn_cast <gcall *> (_d2))
			    switch (gimple_call_combined_fn (_c2))
			      {
			      case CFN_BUILT_IN_CEXPIF:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    {
				      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q30 };
				      gimple_seq *lseq = seq;
				      if (lseq
				          && (!single_use (captures[0])
				              || !single_use (captures[1])))
				        lseq = NULL;
				      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1762;
				      {
					res_op->set_op (NOP_EXPR, type, 1);
					{
					  tree _o1[1], _r1;
					  _o1[0] = captures[2];
					  gimple_match_op tem_op (res_op->cond.any_else (), CFN_BUILT_IN_SINF, TREE_TYPE (_o1[0]), _o1[0]);
					  tem_op.resimplify (lseq, valueize);
					  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
					  if (!_r1) goto next_after_fail1762;
					  res_op->ops[0] = _r1;
					}
					res_op->resimplify (lseq, valueize);
					if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 995, __FILE__, __LINE__, true);
					return true;
				      }
next_after_fail1762:;
				    }
			          }
			        break;
			      case CFN_BUILT_IN_CEXPIL:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    {
				      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q30 };
				      gimple_seq *lseq = seq;
				      if (lseq
				          && (!single_use (captures[0])
				              || !single_use (captures[1])))
				        lseq = NULL;
				      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1763;
				      {
					res_op->set_op (NOP_EXPR, type, 1);
					{
					  tree _o1[1], _r1;
					  _o1[0] = captures[2];
					  gimple_match_op tem_op (res_op->cond.any_else (), CFN_BUILT_IN_SINL, TREE_TYPE (_o1[0]), _o1[0]);
					  tem_op.resimplify (lseq, valueize);
					  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
					  if (!_r1) goto next_after_fail1763;
					  res_op->ops[0] = _r1;
					}
					res_op->resimplify (lseq, valueize);
					if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 995, __FILE__, __LINE__, true);
					return true;
				      }
next_after_fail1763:;
				    }
			          }
			        break;
			      case CFN_BUILT_IN_CEXPI:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    {
				      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q30 };
				      gimple_seq *lseq = seq;
				      if (lseq
				          && (!single_use (captures[0])
				              || !single_use (captures[1])))
				        lseq = NULL;
				      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1764;
				      {
					res_op->set_op (NOP_EXPR, type, 1);
					{
					  tree _o1[1], _r1;
					  _o1[0] = captures[2];
					  gimple_match_op tem_op (res_op->cond.any_else (), CFN_BUILT_IN_SIN, TREE_TYPE (_o1[0]), _o1[0]);
					  tem_op.resimplify (lseq, valueize);
					  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
					  if (!_r1) goto next_after_fail1764;
					  res_op->ops[0] = _r1;
					}
					res_op->resimplify (lseq, valueize);
					if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 995, __FILE__, __LINE__, true);
					return true;
				      }
next_after_fail1764:;
				    }
			          }
			        break;
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case CONJ_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  {
		    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p0, _q20 };
		    gimple_seq *lseq = seq;
		    if (lseq
		        && (!single_use (captures[0])
		            || !single_use (captures[1])))
		      lseq = NULL;
		    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1765;
		    {
		      res_op->set_op (NOP_EXPR, type, 1);
		      {
			tree _o1[1], _r1;
			{
			  tree _o2[1], _r2;
			  _o2[0] = captures[2];
			  gimple_match_op tem_op (res_op->cond.any_else (), IMAGPART_EXPR, TREE_TYPE (TREE_TYPE (_o2[0])), _o2[0]);
			  tem_op.resimplify (lseq, valueize);
			  _r2 = maybe_push_res_to_seq (&tem_op, lseq);
			  if (!_r2) goto next_after_fail1765;
			  _o1[0] = _r2;
			}
			gimple_match_op tem_op (res_op->cond.any_else (), NEGATE_EXPR, TREE_TYPE (_o1[0]), _o1[0]);
			tem_op.resimplify (lseq, valueize);
			_r1 = maybe_push_res_to_seq (&tem_op, lseq);
			if (!_r1) goto next_after_fail1765;
			res_op->ops[0] = _r1;
		      }
		      res_op->resimplify (lseq, valueize);
		      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 994, __FILE__, __LINE__, true);
		      return true;
		    }
next_after_fail1765:;
		  }
	          break;
	        }
	      case PLUS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  {
		    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q21 };
		    const enum tree_code op = PLUS_EXPR;
		    gimple_seq *lseq = seq;
		    if (lseq
		        && (!single_use (captures[0])
		            || !single_use (captures[1])))
		      lseq = NULL;
		    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1766;
		    {
		      res_op->set_op (NOP_EXPR, type, 1);
		      {
			tree _o1[2], _r1;
			{
			  tree _o2[1], _r2;
			  _o2[0] = captures[2];
			  gimple_match_op tem_op (res_op->cond.any_else (), IMAGPART_EXPR, TREE_TYPE (TREE_TYPE (_o2[0])), _o2[0]);
			  tem_op.resimplify (lseq, valueize);
			  _r2 = maybe_push_res_to_seq (&tem_op, lseq);
			  if (!_r2) goto next_after_fail1766;
			  _o1[0] = _r2;
			}
			{
			  tree _o2[1], _r2;
			  _o2[0] = captures[3];
			  gimple_match_op tem_op (res_op->cond.any_else (), IMAGPART_EXPR, TREE_TYPE (TREE_TYPE (_o2[0])), _o2[0]);
			  tem_op.resimplify (lseq, valueize);
			  _r2 = maybe_push_res_to_seq (&tem_op, lseq);
			  if (!_r2) goto next_after_fail1766;
			  _o1[1] = _r2;
			}
			gimple_match_op tem_op (res_op->cond.any_else (), op, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			tem_op.resimplify (lseq, valueize);
			_r1 = maybe_push_res_to_seq (&tem_op, lseq);
			if (!_r1) goto next_after_fail1766;
			res_op->ops[0] = _r1;
		      }
		      res_op->resimplify (lseq, valueize);
		      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 991, __FILE__, __LINE__, true);
		      return true;
		    }
next_after_fail1766:;
		  }
	          break;
	        }
	      case MINUS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q21 };
		    const enum tree_code op = MINUS_EXPR;
		    gimple_seq *lseq = seq;
		    if (lseq
		        && (!single_use (captures[0])
		            || !single_use (captures[1])))
		      lseq = NULL;
		    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1767;
		    {
		      res_op->set_op (NOP_EXPR, type, 1);
		      {
			tree _o1[2], _r1;
			{
			  tree _o2[1], _r2;
			  _o2[0] = captures[2];
			  gimple_match_op tem_op (res_op->cond.any_else (), IMAGPART_EXPR, TREE_TYPE (TREE_TYPE (_o2[0])), _o2[0]);
			  tem_op.resimplify (lseq, valueize);
			  _r2 = maybe_push_res_to_seq (&tem_op, lseq);
			  if (!_r2) goto next_after_fail1767;
			  _o1[0] = _r2;
			}
			{
			  tree _o2[1], _r2;
			  _o2[0] = captures[3];
			  gimple_match_op tem_op (res_op->cond.any_else (), IMAGPART_EXPR, TREE_TYPE (TREE_TYPE (_o2[0])), _o2[0]);
			  tem_op.resimplify (lseq, valueize);
			  _r2 = maybe_push_res_to_seq (&tem_op, lseq);
			  if (!_r2) goto next_after_fail1767;
			  _o1[1] = _r2;
			}
			gimple_match_op tem_op (res_op->cond.any_else (), op, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			tem_op.resimplify (lseq, valueize);
			_r1 = maybe_push_res_to_seq (&tem_op, lseq);
			if (!_r1) goto next_after_fail1767;
			res_op->ops[0] = _r1;
		      }
		      res_op->resimplify (lseq, valueize);
		      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 991, __FILE__, __LINE__, true);
		      return true;
		    }
next_after_fail1767:;
		  }
	          break;
	        }
	      default:;
	      }
	  else if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_MUL_OVERFLOW:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    tree _q21 = gimple_call_arg (_c1, 1);
		    _q21 = do_valueize (valueize, _q21);
		    if (tree_swap_operands_p (_q20, _q21))
		      std::swap (_q20, _q21);
		    if (integer_nonzerop (_q21))
		      {
			{
			  tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			  if (gimple_simplify_608 (res_op, seq, valueize, type, captures))
			    return true;
			}
		      }
		    if (integer_nonzerop (_q20))
		      {
			{
			  tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q21, _q20 };
			  if (gimple_simplify_608 (res_op, seq, valueize, type, captures))
			    return true;
			}
		      }
	          }
	        break;
	      case CFN_BUILT_IN_CEXPIF:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p0, _q20 };
		      gimple_seq *lseq = seq;
		      if (lseq
		          && (!single_use (captures[0])
		              || !single_use (captures[1])))
		        lseq = NULL;
		      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1768;
		      {
			res_op->set_op (NOP_EXPR, type, 1);
			{
			  tree _o1[1], _r1;
			  _o1[0] = captures[2];
			  gimple_match_op tem_op (res_op->cond.any_else (), CFN_BUILT_IN_SINF, TREE_TYPE (_o1[0]), _o1[0]);
			  tem_op.resimplify (lseq, valueize);
			  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
			  if (!_r1) goto next_after_fail1768;
			  res_op->ops[0] = _r1;
			}
			res_op->resimplify (lseq, valueize);
			if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 995, __FILE__, __LINE__, true);
			return true;
		      }
next_after_fail1768:;
		    }
	          }
	        break;
	      case CFN_BUILT_IN_CEXPIL:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p0, _q20 };
		      gimple_seq *lseq = seq;
		      if (lseq
		          && (!single_use (captures[0])
		              || !single_use (captures[1])))
		        lseq = NULL;
		      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1769;
		      {
			res_op->set_op (NOP_EXPR, type, 1);
			{
			  tree _o1[1], _r1;
			  _o1[0] = captures[2];
			  gimple_match_op tem_op (res_op->cond.any_else (), CFN_BUILT_IN_SINL, TREE_TYPE (_o1[0]), _o1[0]);
			  tem_op.resimplify (lseq, valueize);
			  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
			  if (!_r1) goto next_after_fail1769;
			  res_op->ops[0] = _r1;
			}
			res_op->resimplify (lseq, valueize);
			if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 995, __FILE__, __LINE__, true);
			return true;
		      }
next_after_fail1769:;
		    }
	          }
	        break;
	      case CFN_BUILT_IN_CEXPI:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p0, _q20 };
		      gimple_seq *lseq = seq;
		      if (lseq
		          && (!single_use (captures[0])
		              || !single_use (captures[1])))
		        lseq = NULL;
		      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1770;
		      {
			res_op->set_op (NOP_EXPR, type, 1);
			{
			  tree _o1[1], _r1;
			  _o1[0] = captures[2];
			  gimple_match_op tem_op (res_op->cond.any_else (), CFN_BUILT_IN_SIN, TREE_TYPE (_o1[0]), _o1[0]);
			  tem_op.resimplify (lseq, valueize);
			  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
			  if (!_r1) goto next_after_fail1770;
			  res_op->ops[0] = _r1;
			}
			res_op->resimplify (lseq, valueize);
			if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 995, __FILE__, __LINE__, true);
			return true;
		      }
next_after_fail1770:;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_LOG2L (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case RDIV_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case REAL_CST:
		      {
			{
			  tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			  if (gimple_simplify_639 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_LOG2L))
			    return true;
			}
		        break;
		      }
		    default:;
		    }
		if (real_onep (_q20))
		  {
		    {
		      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
		      if (gimple_simplify_638 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_LOG2L))
		        return true;
		    }
		  }
	          break;
	        }
	      default:;
	      }
	  else if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_SQRTL:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (flag_unsafe_math_optimizations
)
			{
			  if (SCALAR_FLOAT_TYPE_P (type)
)
			    {
			      {
 tree x;
 switch (CFN_BUILT_IN_SQRTL)
 {
 CASE_CFN_SQRT:
 x = build_real (type, dconsthalf);
 break;
 CASE_CFN_CBRT:
 x = build_real_truncate (type, dconst_third ());
 break;
 default:
 gcc_unreachable ();
 }
				  gimple_seq *lseq = seq;
				  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1807;
				  {
				    res_op->set_op (MULT_EXPR, type, 2);
				    res_op->ops[0] =  x;
				    {
				      tree _o1[1], _r1;
				      _o1[0] = captures[0];
				      gimple_match_op tem_op (res_op->cond.any_else (), CFN_BUILT_IN_LOG2L, TREE_TYPE (_o1[0]), _o1[0]);
				      tem_op.resimplify (lseq, valueize);
				      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
				      if (!_r1) goto next_after_fail1807;
				      res_op->ops[1] = _r1;
				    }
				    res_op->resimplify (lseq, valueize);
				    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 997, __FILE__, __LINE__, true);
				    return true;
				  }
next_after_fail1807:;
			      }
			    }
			}
		    }
	          }
	        break;
	      case CFN_BUILT_IN_EXP10L:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (flag_unsafe_math_optimizations
)
			{
			  if (SCALAR_FLOAT_TYPE_P (type)
)
			    {
			      {
 tree x;
 switch (CFN_BUILT_IN_EXP10L)
 {
 CASE_CFN_EXP:
 x = build_real_truncate (type, dconst_e ());
 break;
 CASE_CFN_EXP2:
 x = build_real (type, dconst2);
 break;
 CASE_CFN_EXP10:
 CASE_CFN_POW10:
 {
 REAL_VALUE_TYPE dconst10;
 real_from_integer (&dconst10, VOIDmode, 10, SIGNED);
 x = build_real (type, dconst10);
 }
 break;
 default:
 gcc_unreachable ();
 }
				  gimple_seq *lseq = seq;
				  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1808;
				  {
				    res_op->set_op (MULT_EXPR, type, 2);
				    {
				      tree _o1[1], _r1;
				      _o1[0] =  x;
				      gimple_match_op tem_op (res_op->cond.any_else (), CFN_BUILT_IN_LOG2L, TREE_TYPE (_o1[0]), _o1[0]);
				      tem_op.resimplify (lseq, valueize);
				      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
				      if (!_r1) goto next_after_fail1808;
				      res_op->ops[0] = _r1;
				    }
				    res_op->ops[1] = captures[0];
				    res_op->resimplify (lseq, valueize);
				    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 998, __FILE__, __LINE__, true);
				    return true;
				  }
next_after_fail1808:;
			      }
			    }
			}
		    }
	          }
	        break;
	      case CFN_BUILT_IN_EXPL:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (flag_unsafe_math_optimizations
)
			{
			  if (SCALAR_FLOAT_TYPE_P (type)
)
			    {
			      {
 tree x;
 switch (CFN_BUILT_IN_EXPL)
 {
 CASE_CFN_EXP:
 x = build_real_truncate (type, dconst_e ());
 break;
 CASE_CFN_EXP2:
 x = build_real (type, dconst2);
 break;
 CASE_CFN_EXP10:
 CASE_CFN_POW10:
 {
 REAL_VALUE_TYPE dconst10;
 real_from_integer (&dconst10, VOIDmode, 10, SIGNED);
 x = build_real (type, dconst10);
 }
 break;
 default:
 gcc_unreachable ();
 }
				  gimple_seq *lseq = seq;
				  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1809;
				  {
				    res_op->set_op (MULT_EXPR, type, 2);
				    {
				      tree _o1[1], _r1;
				      _o1[0] =  x;
				      gimple_match_op tem_op (res_op->cond.any_else (), CFN_BUILT_IN_LOG2L, TREE_TYPE (_o1[0]), _o1[0]);
				      tem_op.resimplify (lseq, valueize);
				      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
				      if (!_r1) goto next_after_fail1809;
				      res_op->ops[0] = _r1;
				    }
				    res_op->ops[1] = captures[0];
				    res_op->resimplify (lseq, valueize);
				    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 998, __FILE__, __LINE__, true);
				    return true;
				  }
next_after_fail1809:;
			      }
			    }
			}
		    }
	          }
	        break;
	      case CFN_BUILT_IN_POWL:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    tree _q21 = gimple_call_arg (_c1, 1);
		    _q21 = do_valueize (valueize, _q21);
		    {
		      tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
		      if (gimple_simplify_640 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_LOG2L, CFN_BUILT_IN_POWL))
		        return true;
		    }
	          }
	        break;
	      case CFN_BUILT_IN_POW10L:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (flag_unsafe_math_optimizations
)
			{
			  if (SCALAR_FLOAT_TYPE_P (type)
)
			    {
			      {
 tree x;
 switch (CFN_BUILT_IN_POW10L)
 {
 CASE_CFN_EXP:
 x = build_real_truncate (type, dconst_e ());
 break;
 CASE_CFN_EXP2:
 x = build_real (type, dconst2);
 break;
 CASE_CFN_EXP10:
 CASE_CFN_POW10:
 {
 REAL_VALUE_TYPE dconst10;
 real_from_integer (&dconst10, VOIDmode, 10, SIGNED);
 x = build_real (type, dconst10);
 }
 break;
 default:
 gcc_unreachable ();
 }
				  gimple_seq *lseq = seq;
				  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1810;
				  {
				    res_op->set_op (MULT_EXPR, type, 2);
				    {
				      tree _o1[1], _r1;
				      _o1[0] =  x;
				      gimple_match_op tem_op (res_op->cond.any_else (), CFN_BUILT_IN_LOG2L, TREE_TYPE (_o1[0]), _o1[0]);
				      tem_op.resimplify (lseq, valueize);
				      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
				      if (!_r1) goto next_after_fail1810;
				      res_op->ops[0] = _r1;
				    }
				    res_op->ops[1] = captures[0];
				    res_op->resimplify (lseq, valueize);
				    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 998, __FILE__, __LINE__, true);
				    return true;
				  }
next_after_fail1810:;
			      }
			    }
			}
		    }
	          }
	        break;
	      case CFN_BUILT_IN_CBRTL:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (flag_unsafe_math_optimizations
)
			{
			  if (SCALAR_FLOAT_TYPE_P (type)
)
			    {
			      {
 tree x;
 switch (CFN_BUILT_IN_CBRTL)
 {
 CASE_CFN_SQRT:
 x = build_real (type, dconsthalf);
 break;
 CASE_CFN_CBRT:
 x = build_real_truncate (type, dconst_third ());
 break;
 default:
 gcc_unreachable ();
 }
				  gimple_seq *lseq = seq;
				  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1811;
				  {
				    res_op->set_op (MULT_EXPR, type, 2);
				    res_op->ops[0] =  x;
				    {
				      tree _o1[1], _r1;
				      _o1[0] = captures[0];
				      gimple_match_op tem_op (res_op->cond.any_else (), CFN_BUILT_IN_LOG2L, TREE_TYPE (_o1[0]), _o1[0]);
				      tem_op.resimplify (lseq, valueize);
				      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
				      if (!_r1) goto next_after_fail1811;
				      res_op->ops[1] = _r1;
				    }
				    res_op->resimplify (lseq, valueize);
				    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 997, __FILE__, __LINE__, true);
				    return true;
				  }
next_after_fail1811:;
			      }
			    }
			}
		    }
	          }
	        break;
	      case CFN_BUILT_IN_EXP2L:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (flag_unsafe_math_optimizations
)
			{
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1812;
			  {
			    tree tem;
			    tem = captures[0];
			    res_op->set_value (tem);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 999, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail1812:;
			}
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_EXPL (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_LOGL:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (flag_unsafe_math_optimizations
)
			{
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1841;
			  {
			    tree tem;
			    tem = captures[0];
			    res_op->set_value (tem);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1000, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail1841:;
			}
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_EXP2 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_LOG2:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (flag_unsafe_math_optimizations
)
			{
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1844;
			  {
			    tree tem;
			    tem = captures[0];
			    res_op->set_value (tem);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1000, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail1844:;
			}
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_EXP10F (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_LOG10F:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (flag_unsafe_math_optimizations
)
			{
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1847;
			  {
			    tree tem;
			    tem = captures[0];
			    res_op->set_value (tem);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1000, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail1847:;
			}
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_POW10 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_LOG10:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (flag_unsafe_math_optimizations
)
			{
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1852;
			  {
			    tree tem;
			    tem = captures[0];
			    res_op->set_value (tem);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1000, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail1852:;
			}
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_CBRTF (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_SQRTF:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (flag_unsafe_math_optimizations && canonicalize_math_p ()
)
			{
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1880;
			  {
			    res_op->set_op (CFN_BUILT_IN_POWF, type, 2);
			    res_op->ops[0] = captures[0];
			    res_op->ops[1] =  build_real_truncate (type, dconst_sixth ());
			    res_op->resimplify (lseq, valueize);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1005, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail1880:;
			}
		    }
	          }
	        break;
	      case CFN_BUILT_IN_EXP10F:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (flag_unsafe_math_optimizations
)
			{
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1881;
			  {
			    res_op->set_op (CFN_BUILT_IN_EXP10F, type, 1);
			    {
			      tree _o1[2], _r1;
			      _o1[0] = captures[0];
			      _o1[1] =  build_real_truncate (type, dconst_third ());
			      gimple_match_op tem_op (res_op->cond.any_else (), MULT_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			      tem_op.resimplify (lseq, valueize);
			      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
			      if (!_r1) goto next_after_fail1881;
			      res_op->ops[0] = _r1;
			    }
			    res_op->resimplify (lseq, valueize);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1006, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail1881:;
			}
		    }
	          }
	        break;
	      case CFN_BUILT_IN_EXPF:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (flag_unsafe_math_optimizations
)
			{
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1882;
			  {
			    res_op->set_op (CFN_BUILT_IN_EXPF, type, 1);
			    {
			      tree _o1[2], _r1;
			      _o1[0] = captures[0];
			      _o1[1] =  build_real_truncate (type, dconst_third ());
			      gimple_match_op tem_op (res_op->cond.any_else (), MULT_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			      tem_op.resimplify (lseq, valueize);
			      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
			      if (!_r1) goto next_after_fail1882;
			      res_op->ops[0] = _r1;
			    }
			    res_op->resimplify (lseq, valueize);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1006, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail1882:;
			}
		    }
	          }
	        break;
	      case CFN_BUILT_IN_POWF:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    tree _q21 = gimple_call_arg (_c1, 1);
		    _q21 = do_valueize (valueize, _q21);
		    if (tree_expr_nonnegative_p (_q20))
		      {
			{
			  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
			  if (flag_unsafe_math_optimizations && canonicalize_math_p ()
)
			    {
			      gimple_seq *lseq = seq;
			      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1883;
			      {
				res_op->set_op (CFN_BUILT_IN_POWF, type, 2);
				res_op->ops[0] = captures[0];
				{
				  tree _o1[2], _r1;
				  _o1[0] = captures[1];
				  _o1[1] =  build_real_truncate (type, dconst_third ());
				  gimple_match_op tem_op (res_op->cond.any_else (), MULT_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
				  tem_op.resimplify (lseq, valueize);
				  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
				  if (!_r1) goto next_after_fail1883;
				  res_op->ops[1] = _r1;
				}
				res_op->resimplify (lseq, valueize);
				if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1007, __FILE__, __LINE__, true);
				return true;
			      }
next_after_fail1883:;
			    }
			}
		      }
	          }
	        break;
	      case CFN_BUILT_IN_POW10F:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (flag_unsafe_math_optimizations
)
			{
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1884;
			  {
			    res_op->set_op (CFN_BUILT_IN_POW10F, type, 1);
			    {
			      tree _o1[2], _r1;
			      _o1[0] = captures[0];
			      _o1[1] =  build_real_truncate (type, dconst_third ());
			      gimple_match_op tem_op (res_op->cond.any_else (), MULT_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			      tem_op.resimplify (lseq, valueize);
			      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
			      if (!_r1) goto next_after_fail1884;
			      res_op->ops[0] = _r1;
			    }
			    res_op->resimplify (lseq, valueize);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1006, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail1884:;
			}
		    }
	          }
	        break;
	      case CFN_BUILT_IN_CBRTF:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    if (tree_expr_nonnegative_p (_q20))
		      {
			{
			  tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
			  if (flag_unsafe_math_optimizations && canonicalize_math_p ()
)
			    {
			      gimple_seq *lseq = seq;
			      if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1885;
			      {
				res_op->set_op (CFN_BUILT_IN_POWF, type, 2);
				res_op->ops[0] = captures[0];
				res_op->ops[1] =  build_real_truncate (type, dconst_ninth ());
				res_op->resimplify (lseq, valueize);
				if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1008, __FILE__, __LINE__, true);
				return true;
			      }
next_after_fail1885:;
			    }
			}
		      }
	          }
	        break;
	      case CFN_BUILT_IN_EXP2F:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (flag_unsafe_math_optimizations
)
			{
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1886;
			  {
			    res_op->set_op (CFN_BUILT_IN_EXP2F, type, 1);
			    {
			      tree _o1[2], _r1;
			      _o1[0] = captures[0];
			      _o1[1] =  build_real_truncate (type, dconst_third ());
			      gimple_match_op tem_op (res_op->cond.any_else (), MULT_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			      tem_op.resimplify (lseq, valueize);
			      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
			      if (!_r1) goto next_after_fail1886;
			      res_op->ops[0] = _r1;
			    }
			    res_op->resimplify (lseq, valueize);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1006, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail1886:;
			}
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_TRUNCF (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_TRUNCF:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (gimple_simplify_644 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_TRUNCF))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_645 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_TRUNCF))
        return true;
    }
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_TRUNCF64X (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_TRUNCF64X:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (gimple_simplify_644 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_TRUNCF64X))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_645 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_TRUNCF64X))
        return true;
    }
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_FLOORF64 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_FLOORF64:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (gimple_simplify_644 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FLOORF64))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_645 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FLOORF64))
        return true;
    }
  }
if (tree_expr_nonnegative_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_648 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FLOORF64, CFN_BUILT_IN_TRUNCF64))
        return true;
    }
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_CEIL (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  if (gimple_float_value_p (_q20, valueize))
		    {
		      {
			tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
			if (gimple_simplify_646 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CEIL, CFN_BUILT_IN_CEILF))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
	  else if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_CEIL:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (gimple_simplify_644 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CEIL))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_645 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CEIL))
        return true;
    }
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_ROUNDF (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_ROUNDF:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (gimple_simplify_644 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_ROUNDF))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_645 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_ROUNDF))
        return true;
    }
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_ROUNDF64X (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_ROUNDF64X:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (gimple_simplify_644 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_ROUNDF64X))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_645 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_ROUNDF64X))
        return true;
    }
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_NEARBYINTF32 (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_NEARBYINTF32:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (gimple_simplify_644 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_NEARBYINTF32))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_645 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_NEARBYINTF32))
        return true;
    }
  }
  return false;
}

bool
gimple_simplify_CFN_NEARBYINT (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_NEARBYINT:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (gimple_simplify_644 (res_op, seq, valueize, type, captures, CFN_NEARBYINT))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_645 (res_op, seq, valueize, type, captures, CFN_NEARBYINT))
        return true;
    }
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_RINTF32X (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_RINTF32X:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		      if (gimple_simplify_644 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_RINTF32X))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_645 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_RINTF32X))
        return true;
    }
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_IFLOORL (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  if (gimple_double_value_p (_q20, valueize))
		    {
		      {
			tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
			if (gimple_simplify_651 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_IFLOORL, CFN_BUILT_IN_IFLOOR))
			  return true;
		      }
		    }
		  if (gimple_float_value_p (_q20, valueize))
		    {
		      {
			tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
			if (gimple_simplify_652 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_IFLOORL, CFN_BUILT_IN_IFLOORF))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
if (tree_expr_nonnegative_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_653 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_IFLOORL))
        return true;
    }
  }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_654 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_IFLOORL))
        return true;
    }
  }
  {
    tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
    if (gimple_simplify_655 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_IFLOORL, CFN_BUILT_IN_LFLOORL, CFN_BUILT_IN_LLFLOORL))
      return true;
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_IROUNDL (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  if (gimple_double_value_p (_q20, valueize))
		    {
		      {
			tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
			if (gimple_simplify_651 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_IROUNDL, CFN_BUILT_IN_IROUND))
			  return true;
		      }
		    }
		  if (gimple_float_value_p (_q20, valueize))
		    {
		      {
			tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
			if (gimple_simplify_652 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_IROUNDL, CFN_BUILT_IN_IROUNDF))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_654 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_IROUNDL))
        return true;
    }
  }
  {
    tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
    if (gimple_simplify_655 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_IROUNDL, CFN_BUILT_IN_LROUNDL, CFN_BUILT_IN_LLROUNDL))
      return true;
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_ICEIL (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  if (gimple_float_value_p (_q20, valueize))
		    {
		      {
			tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
			if (gimple_simplify_652 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_ICEIL, CFN_BUILT_IN_ICEILF))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_654 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_ICEIL))
        return true;
    }
  }
  {
    tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
    if (gimple_simplify_655 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_ICEIL, CFN_BUILT_IN_LCEIL, CFN_BUILT_IN_LLCEIL))
      return true;
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_LLRINT (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  if (gimple_float_value_p (_q20, valueize))
		    {
		      {
			tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
			if (gimple_simplify_652 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_LLRINT, CFN_BUILT_IN_LLRINTF))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
if (integer_valued_real_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_657 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_LLRINT))
        return true;
    }
  }
  {
    tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
    if (gimple_simplify_656 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_IRINT, CFN_BUILT_IN_LRINT, CFN_BUILT_IN_LLRINT))
      return true;
  }
  return false;
}

bool
gimple_simplify_CFN_LCEIL (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (integer_valued_real_p (_p0))
    {
      {
	tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
	if (gimple_simplify_654 (res_op, seq, valueize, type, captures, CFN_LCEIL))
	  return true;
      }
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_LROUNDF (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (integer_valued_real_p (_p0))
    {
      {
	tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
	if (gimple_simplify_654 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_LROUNDF))
	  return true;
      }
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_LRINTF (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (integer_valued_real_p (_p0))
    {
      {
	tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
	if (gimple_simplify_657 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_LRINTF))
	  return true;
      }
    }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_SIGNBIT (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (tree_expr_nonnegative_p (_p0))
    {
      {
	tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
	if (gimple_simplify_658 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_SIGNBIT))
	  return true;
      }
    }
  {
    tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
    if (gimple_simplify_659 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_SIGNBIT))
      return true;
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_CTZLL (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case NEGATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q20 };
		    if (gimple_simplify_671 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZLL))
		      return true;
		  }
	          break;
	        }
	      case ABS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q20 };
		    if (gimple_simplify_672 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZLL))
		      return true;
		  }
	          break;
	        }
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q20 };
		    if (gimple_simplify_673 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZLL))
		      return true;
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
{
  tree _p0_pops[1];
  if (gimple_nop_convert (_p0, _p0_pops, valueize))
    {
      tree _q20 = _p0_pops[0];
      switch (TREE_CODE (_q20))
        {
	case SSA_NAME:
	  if (gimple *_d1 = get_def (valueize, _q20))
	    {
	      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	        switch (gimple_assign_rhs_code (_a1))
		  {
		  case NEGATE_EXPR:
		    {
		      tree _q30 = gimple_assign_rhs1 (_a1);
		      _q30 = do_valueize (valueize, _q30);
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q30 };
			if (gimple_simplify_669 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZLL))
			  return true;
		      }
		      break;
		    }
		  case ABS_EXPR:
		    {
		      tree _q30 = gimple_assign_rhs1 (_a1);
		      _q30 = do_valueize (valueize, _q30);
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q30 };
			if (gimple_simplify_670 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_CTZLL))
			  return true;
		      }
		      break;
		    }
		  default:;
		  }
	    }
	  break;
        default:;
        }
    }
}
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_PARITY (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case BIT_NOT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  {
		    tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		    if (gimple_simplify_680 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITY))
		      return true;
		  }
	          break;
	        }
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case LROTATE_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  {
				    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31 };
				    if (gimple_simplify_682 (res_op, seq, valueize, type, captures, LROTATE_EXPR, CFN_BUILT_IN_PARITY))
				      return true;
				  }
			          break;
			        }
			      case RROTATE_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  {
				    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31 };
				    if (gimple_simplify_682 (res_op, seq, valueize, type, captures, RROTATE_EXPR, CFN_BUILT_IN_PARITY))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
			  else if (gcall *_c2 = dyn_cast <gcall *> (_d2))
			    switch (gimple_call_combined_fn (_c2))
			      {
			      case CFN_BUILT_IN_BSWAP128:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    {
				      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q30 };
				      if (gimple_simplify_681 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP128, CFN_BUILT_IN_PARITY))
				        return true;
				    }
			          }
			        break;
			      case CFN_BUILT_IN_BSWAP16:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    {
				      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q30 };
				      if (gimple_simplify_681 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP16, CFN_BUILT_IN_PARITY))
				        return true;
				    }
			          }
			        break;
			      case CFN_BUILT_IN_BSWAP32:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    {
				      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q30 };
				      if (gimple_simplify_681 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP32, CFN_BUILT_IN_PARITY))
				        return true;
				    }
			          }
			        break;
			      case CFN_BUILT_IN_BSWAP64:
			        if (gimple_call_num_args (_c2) == 1)
			          {
				    tree _q30 = gimple_call_arg (_c2, 0);
				    _q30 = do_valueize (valueize, _q30);
				    {
				      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q30 };
				      if (gimple_simplify_681 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP64, CFN_BUILT_IN_PARITY))
				        return true;
				    }
			          }
			        break;
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q20 };
		    if (gimple_simplify_683 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITY))
		      return true;
		  }
	          break;
	        }
	      case LROTATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q21 };
		    if (gimple_simplify_685 (res_op, seq, valueize, type, captures, LROTATE_EXPR, CFN_BUILT_IN_PARITY))
		      return true;
		  }
	          break;
	        }
	      case RROTATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  {
		    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q21 };
		    if (gimple_simplify_685 (res_op, seq, valueize, type, captures, RROTATE_EXPR, CFN_BUILT_IN_PARITY))
		      return true;
		  }
	          break;
	        }
	      default:;
	      }
	  else if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_BUILT_IN_BSWAP128:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p0, _q20 };
		      if (gimple_simplify_684 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP128, CFN_BUILT_IN_PARITY))
		        return true;
		    }
	          }
	        break;
	      case CFN_BUILT_IN_BSWAP16:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p0, _q20 };
		      if (gimple_simplify_684 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP16, CFN_BUILT_IN_PARITY))
		        return true;
		    }
	          }
	        break;
	      case CFN_BUILT_IN_BSWAP32:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p0, _q20 };
		      if (gimple_simplify_684 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP32, CFN_BUILT_IN_PARITY))
		        return true;
		    }
	          }
	        break;
	      case CFN_BUILT_IN_BSWAP64:
	        if (gimple_call_num_args (_c1) == 1)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    {
		      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p0, _q20 };
		      if (gimple_simplify_684 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_BSWAP64, CFN_BUILT_IN_PARITY))
		        return true;
		    }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
  {
    tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
    if (gimple_simplify_679 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_PARITY))
      return true;
  }
  return false;
}

bool
gimple_simplify_CFN_BUILT_IN_FFSIMAX (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  {
		    tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q20 };
		    if (gimple_simplify_687 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFSIMAX))
		      return true;
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
if (tree_expr_nonzero_p (_p0))
  {
    {
      tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
      if (gimple_simplify_686 (res_op, seq, valueize, type, captures, CFN_BUILT_IN_FFSIMAX, CFN_BUILT_IN_CTZIMAX))
        return true;
    }
  }
  return false;
}

bool
gimple_simplify_CFN_REDUC_FMAX (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gcall *_c1 = dyn_cast <gcall *> (_d1))
	    switch (gimple_call_combined_fn (_c1))
	      {
	      case CFN_FMAX:
	        if (gimple_call_num_args (_c1) == 2)
	          {
		    tree _q20 = gimple_call_arg (_c1, 0);
		    _q20 = do_valueize (valueize, _q20);
		    tree _q21 = gimple_call_arg (_c1, 1);
		    _q21 = do_valueize (valueize, _q21);
		    switch (TREE_CODE (_q21))
		      {
		      case VECTOR_CST:
		        {
			  {
			    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
			    gimple_seq *lseq = seq;
			    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1918;
			    {
			      res_op->set_op (CFN_FMAX, type, 2);
			      {
				tree _o1[1], _r1;
				_o1[0] = captures[0];
				gimple_match_op tem_op (res_op->cond.any_else (), CFN_REDUC_FMAX, type, _o1[0]);
				tem_op.resimplify (lseq, valueize);
				_r1 = maybe_push_res_to_seq (&tem_op, lseq);
				if (!_r1) goto next_after_fail1918;
				res_op->ops[0] = _r1;
			      }
			      {
				tree _o1[1], _r1;
				_o1[0] = captures[1];
				gimple_match_op tem_op (res_op->cond.any_else (), CFN_REDUC_FMAX, type, _o1[0]);
				tem_op.resimplify (lseq, valueize);
				_r1 = maybe_push_res_to_seq (&tem_op, lseq);
				if (!_r1) goto next_after_fail1918;
				res_op->ops[1] = _r1;
			      }
			      res_op->resimplify (lseq, valueize);
			      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1013, __FILE__, __LINE__, true);
			      return true;
			    }
next_after_fail1918:;
			  }
		          break;
		        }
		      default:;
		      }
	          }
	        break;
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_CFN_REDUC_AND (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case BIT_AND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case VECTOR_CST:
		      {
			{
			  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
			  gimple_seq *lseq = seq;
			  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail1920;
			  {
			    res_op->set_op (BIT_AND_EXPR, type, 2);
			    {
			      tree _o1[1], _r1;
			      _o1[0] = captures[0];
			      gimple_match_op tem_op (res_op->cond.any_else (), CFN_REDUC_AND, type, _o1[0]);
			      tem_op.resimplify (lseq, valueize);
			      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
			      if (!_r1) goto next_after_fail1920;
			      res_op->ops[0] = _r1;
			    }
			    {
			      tree _o1[1], _r1;
			      _o1[0] = captures[1];
			      gimple_match_op tem_op (res_op->cond.any_else (), CFN_REDUC_AND, type, _o1[0]);
			      tem_op.resimplify (lseq, valueize);
			      _r1 = maybe_push_res_to_seq (&tem_op, lseq);
			      if (!_r1) goto next_after_fail1920;
			      res_op->ops[1] = _r1;
			    }
			    res_op->resimplify (lseq, valueize);
			    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1013, __FILE__, __LINE__, true);
			    return true;
			  }
next_after_fail1920:;
			}
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}

bool
gimple_simplify_BIT_IOR_EXPR (gimple_match_op *res_op, gimple_seq *seq,
                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,
                 code_helper ARG_UNUSED (code), tree ARG_UNUSED (type), tree _p0, tree _p1)
{
  const bool debug_dump = dump_file && (dump_flags & TDF_FOLDING);
  if (integer_zerop (_p1))
    {
      {
	tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
	gimple_seq *lseq = seq;
	if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2032;
	{
	  tree tem;
	  tem = captures[0];
	  res_op->set_value (tem);
	  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1014, __FILE__, __LINE__, true);
	  return true;
	}
next_after_fail2032:;
      }
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case LSHIFT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case LSHIFT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50 };
					if (gimple_simplify_3 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case RSHIFT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case RSHIFT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50 };
					if (gimple_simplify_4 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case NE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if (integer_zerop (_q21))
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p1))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case NE_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a2);
				      _q51 = do_valueize (valueize, _q51);
				      if (tree_swap_operands_p (_q50, _q51))
				        std::swap (_q50, _q51);
				      if (integer_zerop (_q51))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _q50 };
					    if (gimple_simplify_112 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, NE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
		  if (integer_all_onesp (_q21))
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p1))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case NE_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a2);
				      _q51 = do_valueize (valueize, _q51);
				      if (tree_swap_operands_p (_q50, _q51))
				        std::swap (_q50, _q51);
				      if (integer_all_onesp (_q51))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _q50 };
					    if (gimple_simplify_113 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, NE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
	          break;
	        }
	      case BIT_AND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_AND_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  {
				    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q51 };
				    if (gimple_simplify_5 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
				      return true;
				  }
				  {
				    tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q50 };
				    if (gimple_simplify_5 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
				      return true;
				  }
				  {
				    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q51 };
				    if (gimple_simplify_5 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
				      return true;
				  }
				  {
				    tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q50 };
				    if (gimple_simplify_5 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case BIT_XOR_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
			if (gimple_simplify_114 (res_op, seq, valueize, type, captures))
			  return true;
		      }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q21, _q20 };
			if (gimple_simplify_114 (res_op, seq, valueize, type, captures))
			  return true;
		      }
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_AND_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_q51))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _q51))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case BIT_NOT_EXPR:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
							{
							  {
							    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p0 };
							    if (gimple_simplify_115 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_q51))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _q51))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case BIT_NOT_EXPR:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
							{
							  {
							    tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p0 };
							    if (gimple_simplify_115 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  switch (TREE_CODE (_q50))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q50))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_NOT_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
						    {
						      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
							{
							  {
							    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p0 };
							    if (gimple_simplify_115 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
						  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
						    {
						      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
							{
							  {
							    tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p0 };
							    if (gimple_simplify_115 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  {
		    tree captures[4] ATTRIBUTE_UNUSED = { _p1, _p0, _q20, _q21 };
		    if (gimple_simplify_116 (res_op, seq, valueize, type, captures))
		      return true;
		  }
		  {
		    tree captures[4] ATTRIBUTE_UNUSED = { _p1, _p0, _q21, _q20 };
		    if (gimple_simplify_116 (res_op, seq, valueize, type, captures))
		      return true;
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case BIT_XOR_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  if (tree_swap_operands_p (_q30, _q31))
		    std::swap (_q30, _q31);
		  if ((_q30 == _p0 && ! TREE_SIDE_EFFECTS (_q30)) || (operand_equal_p (_q30, _p0, 0) && types_match (_q30, _p0)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q31 };
			if (gimple_simplify_114 (res_op, seq, valueize, type, captures))
			  return true;
		      }
		    }
		  if ((_q31 == _p0 && ! TREE_SIDE_EFFECTS (_q31)) || (operand_equal_p (_q31, _p0, 0) && types_match (_q31, _p0)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q30 };
			if (gimple_simplify_114 (res_op, seq, valueize, type, captures))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case BIT_AND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_XOR_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
						    {
						      if ((_q61 == _q40 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q40, 0) && types_match (_q61, _q40)))
							{
							  {
							    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q40, _p1 };
							    if (gimple_simplify_117 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
						  if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
						    {
						      if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
							{
							  {
							    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q40, _p1 };
							    if (gimple_simplify_117 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_XOR_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
						    {
						      if ((_q61 == _q30 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q30, 0) && types_match (_q61, _q30)))
							{
							  {
							    tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q30, _p1 };
							    if (gimple_simplify_117 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
						  if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
						    {
						      if ((_q61 == _q21 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q21, 0) && types_match (_q61, _q21)))
							{
							  {
							    tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q30, _p1 };
							    if (gimple_simplify_117 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case BIT_NOT_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  switch (TREE_CODE (_q30))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q30))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_XOR_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  if ((_q40 == _p0 && ! TREE_SIDE_EFFECTS (_q40)) || (operand_equal_p (_q40, _p0, 0) && types_match (_q40, _p0)))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p1, _q41 };
					if (gimple_simplify_118 (res_op, seq, valueize, type, captures))
					  return true;
				      }
				    }
				  if ((_q41 == _p0 && ! TREE_SIDE_EFFECTS (_q41)) || (operand_equal_p (_q41, _p0, 0) && types_match (_q41, _p0)))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _p0, _p1, _q40 };
					if (gimple_simplify_118 (res_op, seq, valueize, type, captures))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case BIT_NOT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_XOR_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _q30, _p0, _q31 };
					if (gimple_simplify_118 (res_op, seq, valueize, type, captures))
					  return true;
				      }
				    }
				  if ((_p1 == _q31 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q31, 0) && types_match (_p1, _q31)))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _q31, _p0, _q30 };
					if (gimple_simplify_118 (res_op, seq, valueize, type, captures))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  {
    tree _p1_pops[1];
    if (gimple_nop_convert (_p1, _p1_pops, valueize))
      {
	tree _q30 = _p1_pops[0];
	switch (TREE_CODE (_q30))
	  {
	  case SSA_NAME:
	    if (gimple *_d1 = get_def (valueize, _q30))
	      {
		if (gassign *_a1 = dyn_cast <gassign *> (_d1))
		  switch (gimple_assign_rhs_code (_a1))
		    {
		    case EQ_EXPR:
		      {
			tree _q40 = gimple_assign_rhs1 (_a1);
			_q40 = do_valueize (valueize, _q40);
			tree _q41 = gimple_assign_rhs2 (_a1);
			_q41 = do_valueize (valueize, _q41);
			if (tree_swap_operands_p (_q40, _q41))
			  std::swap (_q40, _q41);
			if ((_q40 == _p0 && ! TREE_SIDE_EFFECTS (_q40)) || (operand_equal_p (_q40, _p0, 0) && types_match (_q40, _p0)))
			  {
			    {
			      tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q41 };
			      if (gimple_simplify_119 (res_op, seq, valueize, type, captures))
			        return true;
			    }
			  }
			if ((_q41 == _p0 && ! TREE_SIDE_EFFECTS (_q41)) || (operand_equal_p (_q41, _p0, 0) && types_match (_q41, _p0)))
			  {
			    {
			      tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q40 };
			      if (gimple_simplify_119 (res_op, seq, valueize, type, captures))
			        return true;
			    }
			  }
		        break;
		      }
		    default:;
		    }
	      }
	    break;
          default:;
          }
      }
  }
  {
    tree _p0_pops[1];
    if (gimple_nop_convert (_p0, _p0_pops, valueize))
      {
	tree _q20 = _p0_pops[0];
	switch (TREE_CODE (_q20))
	  {
	  case SSA_NAME:
	    if (gimple *_d1 = get_def (valueize, _q20))
	      {
		if (gassign *_a1 = dyn_cast <gassign *> (_d1))
		  switch (gimple_assign_rhs_code (_a1))
		    {
		    case EQ_EXPR:
		      {
			tree _q30 = gimple_assign_rhs1 (_a1);
			_q30 = do_valueize (valueize, _q30);
			tree _q31 = gimple_assign_rhs2 (_a1);
			_q31 = do_valueize (valueize, _q31);
			if (tree_swap_operands_p (_q30, _q31))
			  std::swap (_q30, _q31);
			if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
			  {
			    {
			      tree captures[2] ATTRIBUTE_UNUSED = { _q30, _q31 };
			      if (gimple_simplify_119 (res_op, seq, valueize, type, captures))
			        return true;
			    }
			  }
			if ((_p1 == _q31 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q31, 0) && types_match (_p1, _q31)))
			  {
			    {
			      tree captures[2] ATTRIBUTE_UNUSED = { _q31, _q30 };
			      if (gimple_simplify_119 (res_op, seq, valueize, type, captures))
			        return true;
			    }
			  }
		        break;
		      }
		    default:;
		    }
	      }
	    break;
          default:;
          }
      }
  }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case EQ_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  if (tree_swap_operands_p (_q30, _q31))
		    std::swap (_q30, _q31);
		  if ((_q30 == _p0 && ! TREE_SIDE_EFFECTS (_q30)) || (operand_equal_p (_q30, _p0, 0) && types_match (_q30, _p0)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q31 };
			if (gimple_simplify_119 (res_op, seq, valueize, type, captures))
			  return true;
		      }
		    }
		  if ((_q31 == _p0 && ! TREE_SIDE_EFFECTS (_q31)) || (operand_equal_p (_q31, _p0, 0) && types_match (_q31, _p0)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q30 };
			if (gimple_simplify_119 (res_op, seq, valueize, type, captures))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case EQ_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
			if (gimple_simplify_119 (res_op, seq, valueize, type, captures))
			  return true;
		      }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q21, _q20 };
			if (gimple_simplify_119 (res_op, seq, valueize, type, captures))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case BIT_XOR_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  if (tree_swap_operands_p (_q30, _q31))
		    std::swap (_q30, _q31);
		  {
		    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p1, _q30, _q31 };
		    if (gimple_simplify_116 (res_op, seq, valueize, type, captures))
		      return true;
		  }
		  {
		    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p1, _q31, _q30 };
		    if (gimple_simplify_116 (res_op, seq, valueize, type, captures))
		      return true;
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case PLUS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if (integer_minus_onep (_q21))
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p1))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case NEGATE_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  {
					    tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
					    if (gimple_simplify_8 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
	          break;
	        }
	      case NEGATE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case PLUS_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  if ((_q40 == _q20 && ! TREE_SIDE_EFFECTS (_q40)) || (operand_equal_p (_q40, _q20, 0) && types_match (_q40, _q20)))
				    {
				      if (integer_minus_onep (_q41))
					{
					  {
					    tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
					    if (gimple_simplify_9 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      case MINUS_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if ((_q40 == _q20 && ! TREE_SIDE_EFFECTS (_q40)) || (operand_equal_p (_q40, _q20, 0) && types_match (_q40, _q20)))
				    {
				      if (integer_onep (_q41))
					{
					  {
					    tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
					    if (gimple_simplify_10 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case MINUS_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (integer_onep (_q21))
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p1))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case NEGATE_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  {
					    tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
					    if (gimple_simplify_11 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
	          break;
	        }
	      case BIT_IOR_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_AND_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
					    if (gimple_simplify_120 (res_op, seq, valueize, type, captures, BIT_AND_EXPR))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
					    if (gimple_simplify_120 (res_op, seq, valueize, type, captures, BIT_AND_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      case BIT_XOR_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
					    if (gimple_simplify_120 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
					    if (gimple_simplify_120 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      CASE_CONVERT:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || operand_equal_p (_q50, _q21, 0))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _q21 };
					if (gimple_simplify_121 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || operand_equal_p (_q50, _q20, 0))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _q20 };
					if (gimple_simplify_121 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || operand_equal_p (_p1, _q21, 0))
		    {
		      {
			tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _q21 };
			if (gimple_simplify_121 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
			  return true;
		      }
		    }
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || operand_equal_p (_p1, _q20, 0))
		    {
		      {
			tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _q20 };
			if (gimple_simplify_121 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      case BIT_AND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_IOR_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _p1, _q20, _q21 };
					    if (gimple_simplify_122 (res_op, seq, valueize, type, captures, BIT_AND_EXPR))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _p1, _q21, _q20 };
					    if (gimple_simplify_122 (res_op, seq, valueize, type, captures, BIT_AND_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      case BIT_NOT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  switch (TREE_CODE (_q50))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q50))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_XOR_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
						    {
						      if ((_q61 == _q21 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q21, 0) && types_match (_q61, _q21)))
							{
							  {
							    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
							    if (gimple_simplify_123 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
						  if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
						    {
						      if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
							{
							  {
							    tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
							    if (gimple_simplify_123 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case EQ_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
					    if (gimple_simplify_124 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
					    if (gimple_simplify_124 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		{
		  tree _p1_pops[1];
		  if (gimple_nop_convert (_p1, _p1_pops, valueize))
		    {
		      tree _q50 = _p1_pops[0];
		      switch (TREE_CODE (_q50))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _q50))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case EQ_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if (tree_swap_operands_p (_q60, _q61))
				        std::swap (_q60, _q61);
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  if ((_q61 == _q21 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q21, 0) && types_match (_q61, _q21)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
						if (gimple_simplify_124 (res_op, seq, valueize, type, captures))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
					{
					  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
						if (gimple_simplify_124 (res_op, seq, valueize, type, captures))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
		}
	          break;
	        }
	      case BIT_XOR_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_IOR_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _p1, _q20, _q21 };
					    if (gimple_simplify_122 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _p1, _q21, _q20 };
					    if (gimple_simplify_122 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      case BIT_XOR_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  switch (TREE_CODE (_q50))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q50))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_XOR_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
						    {
						      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _q61 };
							    if (gimple_simplify_125 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
						  if ((_q61 == _q21 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q21, 0) && types_match (_q61, _q21)))
						    {
						      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _q60 };
							    if (gimple_simplify_125 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
						  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
						    {
						      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _q61 };
							    if (gimple_simplify_125 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
						  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
						    {
						      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _q60 };
							    if (gimple_simplify_125 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      switch (TREE_CODE (_q51))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _q51))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case BIT_XOR_EXPR:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      tree _q71 = gimple_assign_rhs2 (_a3);
						      _q71 = do_valueize (valueize, _q71);
						      if (tree_swap_operands_p (_q70, _q71))
						        std::swap (_q70, _q71);
						      if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _q71 };
							    if (gimple_simplify_125 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						      if ((_q71 == _q21 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q21, 0) && types_match (_q71, _q21)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _q70 };
							    if (gimple_simplify_125 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      switch (TREE_CODE (_q51))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _q51))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case BIT_XOR_EXPR:
						    {
						      tree _q70 = gimple_assign_rhs1 (_a3);
						      _q70 = do_valueize (valueize, _q70);
						      tree _q71 = gimple_assign_rhs2 (_a3);
						      _q71 = do_valueize (valueize, _q71);
						      if (tree_swap_operands_p (_q70, _q71))
						        std::swap (_q70, _q71);
						      if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _q71 };
							    if (gimple_simplify_125 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						      if ((_q71 == _q20 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q20, 0) && types_match (_q71, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _q70 };
							    if (gimple_simplify_125 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_XOR_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_XOR_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						    {
						      if ((_q71 == _q30 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q30, 0) && types_match (_q71, _q30)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _p1, _q21, _q30, _q31 };
							    if (gimple_simplify_126 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						      if ((_q71 == _q31 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q31, 0) && types_match (_q71, _q31)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _p1, _q21, _q31, _q30 };
							    if (gimple_simplify_126 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
						  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
						    {
						      if ((_q71 == _q21 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q21, 0) && types_match (_q71, _q21)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _p1, _q21, _q30, _q31 };
							    if (gimple_simplify_126 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
						  if ((_q70 == _q31 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q31, 0) && types_match (_q70, _q31)))
						    {
						      if ((_q71 == _q21 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q21, 0) && types_match (_q71, _q21)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _p1, _q21, _q31, _q30 };
							    if (gimple_simplify_126 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_XOR_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_XOR_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						    {
						      if ((_q71 == _q40 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q40, 0) && types_match (_q71, _q40)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _p1, _q20, _q40, _q41 };
							    if (gimple_simplify_126 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						      if ((_q71 == _q41 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q41, 0) && types_match (_q71, _q41)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _p1, _q20, _q41, _q40 };
							    if (gimple_simplify_126 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
						  if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
						    {
						      if ((_q71 == _q20 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q20, 0) && types_match (_q71, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _p1, _q20, _q40, _q41 };
							    if (gimple_simplify_126 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
						  if ((_q70 == _q41 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q41, 0) && types_match (_q70, _q41)))
						    {
						      if ((_q71 == _q20 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q20, 0) && types_match (_q71, _q20)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _p1, _q20, _q41, _q40 };
							    if (gimple_simplify_126 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case BIT_NOT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_XOR_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
						    {
						      if ((_q61 == _q31 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q31, 0) && types_match (_q61, _q31)))
							{
							  {
							    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q31, _p0 };
							    if (gimple_simplify_127 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
						  if ((_q60 == _q31 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q31, 0) && types_match (_q60, _q31)))
						    {
						      if ((_q61 == _q30 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q30, 0) && types_match (_q61, _q30)))
							{
							  {
							    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q31, _p0 };
							    if (gimple_simplify_127 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case BIT_IOR_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q20, _q31 };
					if (gimple_simplify_128 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					  return true;
				      }
				    }
				  if ((_p1 == _q31 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q31, 0) && types_match (_p1, _q31)))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _q31, _q20, _q30 };
					if (gimple_simplify_128 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case EQ_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_AND_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p0 };
					    if (gimple_simplify_129 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p0 };
					    if (gimple_simplify_129 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
{
  tree _p0_pops[1];
  if (gimple_nop_convert (_p0, _p0_pops, valueize))
    {
      tree _q20 = _p0_pops[0];
      switch (TREE_CODE (_q20))
        {
	case SSA_NAME:
	  if (gimple *_d1 = get_def (valueize, _q20))
	    {
	      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	        switch (gimple_assign_rhs_code (_a1))
		  {
		  case EQ_EXPR:
		    {
		      tree _q30 = gimple_assign_rhs1 (_a1);
		      _q30 = do_valueize (valueize, _q30);
		      tree _q31 = gimple_assign_rhs2 (_a1);
		      _q31 = do_valueize (valueize, _q31);
		      if (tree_swap_operands_p (_q30, _q31))
		        std::swap (_q30, _q31);
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p1))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case BIT_AND_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if (tree_swap_operands_p (_q60, _q61))
				        std::swap (_q60, _q61);
				      if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
					{
					  if ((_q61 == _q31 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q31, 0) && types_match (_q61, _q31)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q31, _p0 };
						if (gimple_simplify_129 (res_op, seq, valueize, type, captures))
						  return true;
					      }
					    }
				        }
				      if ((_q60 == _q31 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q31, 0) && types_match (_q60, _q31)))
					{
					  if ((_q61 == _q30 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q30, 0) && types_match (_q61, _q30)))
					    {
					      {
						tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q31, _p0 };
						if (gimple_simplify_129 (res_op, seq, valueize, type, captures))
						  return true;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      break;
		    }
		  default:;
		  }
	    }
	  break;
        default:;
        }
    }
}
  if (integer_all_onesp (_p1))
    {
      {
	tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
	gimple_seq *lseq = seq;
	if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2033;
	{
	  tree tem;
	  tem = captures[1];
	  res_op->set_value (tem);
	  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1065, __FILE__, __LINE__, true);
	  return true;
	}
next_after_fail2033:;
      }
    }
  if (integer_zerop (_p1))
    {
      {
	tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
	gimple_seq *lseq = seq;
	if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2034;
	{
	  tree tem;
	  tem = captures[0];
	  res_op->set_value (tem);
	  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1066, __FILE__, __LINE__, true);
	  return true;
	}
next_after_fail2034:;
      }
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  {
				    tree _q40_pops[1];
				    if (gimple_maybe_bit_not (_q40, _q40_pops, valueize))
				      {
					tree _q50 = _q40_pops[0];
					{
					  tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q50 };
					  if (gimple_simplify_14 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					    return true;
					}
				      }
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  {
		    tree _q20_pops[1];
		    if (gimple_maybe_bit_not (_q20, _q20_pops, valueize))
		      {
			tree _q30 = _q20_pops[0];
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    CASE_CONVERT:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					{
					  tree captures[2] ATTRIBUTE_UNUSED = { _q50, _q30 };
					  if (gimple_simplify_14 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					    return true;
					}
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		      }
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  {
    tree _p1_pops[1];
    if (gimple_maybe_bit_not (_p1, _p1_pops, valueize))
      {
	tree _q30 = _p1_pops[0];
	{
	  tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q30 };
	  if (gimple_simplify_14 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
	    return true;
	}
      }
  }
  {
    tree _p0_pops[1];
    if (gimple_maybe_bit_not (_p0, _p0_pops, valueize))
      {
	tree _q20 = _p0_pops[0];
	{
	  tree captures[2] ATTRIBUTE_UNUSED = { _p1, _q20 };
	  if (gimple_simplify_14 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
	    return true;
	}
      }
  }
  if ((_p1 == _p0 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _p0, 0) && types_match (_p1, _p0)))
    {
      {
	tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
	if (gimple_simplify_130 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
	  return true;
      }
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      {
	switch (TREE_CODE (_p1))
	  {
	  case INTEGER_CST:
	    {
	      {
		tree captures[2] ATTRIBUTE_UNUSED = { _p0, _p1 };
		if (INTEGRAL_TYPE_P (TREE_TYPE (captures[0]))
 && wi::bit_and_not (get_nonzero_bits (captures[0]), wi::to_wide (captures[1])) == 0
)
		  {
		    gimple_seq *lseq = seq;
		    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2035;
		    {
		      tree tem;
		      tem = captures[1];
		      res_op->set_value (tem);
		      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1067, __FILE__, __LINE__, true);
		      return true;
		    }
next_after_fail2035:;
		  }
	      }
	      break;
	    }
          default:;
          }
        break;
      }
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case BIT_NOT_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  switch (TREE_CODE (_q30))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q30))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_IOR_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  if ((_q40 == _p0 && ! TREE_SIDE_EFFECTS (_q40)) || (operand_equal_p (_q40, _p0, 0) && types_match (_q40, _p0)))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q30, _q41 };
					if (gimple_simplify_128 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					  return true;
				      }
				    }
				  if ((_q41 == _p0 && ! TREE_SIDE_EFFECTS (_q41)) || (operand_equal_p (_q41, _p0, 0) && types_match (_q41, _p0)))
				    {
				      {
					tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q30, _q40 };
					if (gimple_simplify_128 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case BIT_AND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_NOT_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  switch (TREE_CODE (_q60))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q60))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_IOR_EXPR:
							        {
								  tree _q70 = gimple_assign_rhs1 (_a4);
								  _q70 = do_valueize (valueize, _q70);
								  tree _q71 = gimple_assign_rhs2 (_a4);
								  _q71 = do_valueize (valueize, _q71);
								  if (tree_swap_operands_p (_q70, _q71))
								    std::swap (_q70, _q71);
								  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
								    {
								      if ((_q71 == _q21 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q21, 0) && types_match (_q71, _q21)))
									{
									  {
									    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q21 };
									    if (gimple_simplify_131 (res_op, seq, valueize, type, captures))
									      return true;
									  }
								        }
								    }
								  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
								    {
								      if ((_q71 == _q30 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q30, 0) && types_match (_q71, _q30)))
									{
									  {
									    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q30, _q21 };
									    if (gimple_simplify_131 (res_op, seq, valueize, type, captures))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_NOT_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  switch (TREE_CODE (_q60))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q60))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_IOR_EXPR:
							        {
								  tree _q70 = gimple_assign_rhs1 (_a4);
								  _q70 = do_valueize (valueize, _q70);
								  tree _q71 = gimple_assign_rhs2 (_a4);
								  _q71 = do_valueize (valueize, _q71);
								  if (tree_swap_operands_p (_q70, _q71))
								    std::swap (_q70, _q71);
								  if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
								    {
								      if ((_q71 == _q20 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q20, 0) && types_match (_q71, _q20)))
									{
									  {
									    tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q40, _q20 };
									    if (gimple_simplify_131 (res_op, seq, valueize, type, captures))
									      return true;
									  }
								        }
								    }
								  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
								    {
								      if ((_q71 == _q40 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q40, 0) && types_match (_q71, _q40)))
									{
									  {
									    tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q40, _q20 };
									    if (gimple_simplify_131 (res_op, seq, valueize, type, captures))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  switch (TREE_CODE (_q50))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q50))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_IOR_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
						    {
						      if ((_q61 == _q21 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q21, 0) && types_match (_q61, _q21)))
							{
							  {
							    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50 };
							    if (gimple_simplify_132 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case BIT_XOR_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    if (gimple_simplify_22 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      case BIT_AND_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || operand_equal_p (_q50, _q20, 0))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q51, _q20 };
					if (gimple_simplify_29 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || operand_equal_p (_q51, _q20, 0))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _q50, _q20 };
					if (gimple_simplify_29 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || operand_equal_p (_q50, _q21, 0))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q51, _q21 };
					if (gimple_simplify_29 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || operand_equal_p (_q51, _q21, 0))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _q50, _q21 };
					if (gimple_simplify_29 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case BIT_NOT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_IOR_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  switch (TREE_CODE (_q60))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q60))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_NOT_EXPR:
							        {
								  tree _q70 = gimple_assign_rhs1 (_a4);
								  _q70 = do_valueize (valueize, _q70);
								  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
								    {
								      if ((_q61 == _q31 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q31, 0) && types_match (_q61, _q31)))
									{
									  {
									    tree captures[3] ATTRIBUTE_UNUSED = { _q60, _q30, _q31 };
									    if (gimple_simplify_133 (res_op, seq, valueize, type, captures))
									      return true;
									  }
								        }
								    }
								  if ((_q70 == _q31 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q31, 0) && types_match (_q70, _q31)))
								    {
								      if ((_q61 == _q30 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q30, 0) && types_match (_q61, _q30)))
									{
									  {
									    tree captures[3] ATTRIBUTE_UNUSED = { _q60, _q31, _q30 };
									    if (gimple_simplify_133 (res_op, seq, valueize, type, captures))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  if ((_q60 == _q31 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q31, 0) && types_match (_q60, _q31)))
						    {
						      switch (TREE_CODE (_q61))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q61))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case BIT_NOT_EXPR:
								    {
								      tree _q80 = gimple_assign_rhs1 (_a4);
								      _q80 = do_valueize (valueize, _q80);
								      if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
									{
									  {
									    tree captures[3] ATTRIBUTE_UNUSED = { _q61, _q30, _q31 };
									    if (gimple_simplify_133 (res_op, seq, valueize, type, captures))
									      return true;
									  }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						    }
						  if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
						    {
						      switch (TREE_CODE (_q61))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q61))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case BIT_NOT_EXPR:
								    {
								      tree _q80 = gimple_assign_rhs1 (_a4);
								      _q80 = do_valueize (valueize, _q80);
								      if ((_q80 == _q31 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q31, 0) && types_match (_q80, _q31)))
									{
									  {
									    tree captures[3] ATTRIBUTE_UNUSED = { _q61, _q31, _q30 };
									    if (gimple_simplify_133 (res_op, seq, valueize, type, captures))
									      return true;
									  }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						      if ((_q61 == _q31 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q31, 0) && types_match (_q61, _q31)))
							{
							  {
							    tree captures[5] ATTRIBUTE_UNUSED = { _p1, _q30, _q31, _p0, _q20 };
							    if (gimple_simplify_132 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
					          break;
					        }
					      case BIT_XOR_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
						    {
						      if ((_q61 == _q31 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q31, 0) && types_match (_q61, _q31)))
							{
							  {
							    tree captures[5] ATTRIBUTE_UNUSED = { _p1, _q30, _q31, _p0, _q20 };
							    if (gimple_simplify_134 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  switch (TREE_CODE (_q40))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q40))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_NOT_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  {
						    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q50 };
						    if (gimple_simplify_135 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case BIT_NOT_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  {
				    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q40 };
				    if (gimple_simplify_135 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case BIT_XOR_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  switch (TREE_CODE (_q50))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q50))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_IOR_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
						    {
						      if ((_q61 == _q21 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q21, 0) && types_match (_q61, _q21)))
							{
							  {
							    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50 };
							    if (gimple_simplify_134 (res_op, seq, valueize, type, captures))
							      return true;
							  }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case BIT_AND_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    if (gimple_simplify_22 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  switch (TREE_CODE (_q50))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q50))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_NOT_EXPR:
							        {
								  tree _q60 = gimple_assign_rhs1 (_a4);
								  _q60 = do_valueize (valueize, _q60);
								  {
								    tree captures[2] ATTRIBUTE_UNUSED = { _q30, _q60 };
								    if (gimple_simplify_135 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
								      return true;
								  }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case BIT_NOT_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  {
						    tree captures[2] ATTRIBUTE_UNUSED = { _q30, _q50 };
						    if (gimple_simplify_135 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case BIT_AND_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  switch (TREE_CODE (_q60))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q60))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q70 = gimple_assign_rhs1 (_a4);
								  _q70 = do_valueize (valueize, _q70);
								  tree _q71 = gimple_assign_rhs2 (_a4);
								  _q71 = do_valueize (valueize, _q71);
								  if (tree_swap_operands_p (_q70, _q71))
								    std::swap (_q70, _q71);
								  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || operand_equal_p (_q70, _q30, 0))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q31, _q71, _q30 };
									if (gimple_simplify_29 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
									  return true;
								      }
								    }
								  if ((_q71 == _q30 && ! TREE_SIDE_EFFECTS (_q71)) || operand_equal_p (_q71, _q30, 0))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q31, _q70, _q30 };
									if (gimple_simplify_29 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
									  return true;
								      }
								    }
								  if ((_q70 == _q31 && ! TREE_SIDE_EFFECTS (_q70)) || operand_equal_p (_q70, _q31, 0))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q31, _q30, _q71, _q31 };
									if (gimple_simplify_29 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
									  return true;
								      }
								    }
								  if ((_q71 == _q31 && ! TREE_SIDE_EFFECTS (_q71)) || operand_equal_p (_q71, _q31, 0))
								    {
								      {
									tree captures[4] ATTRIBUTE_UNUSED = { _q31, _q30, _q70, _q31 };
									if (gimple_simplify_29 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case BIT_IOR_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  if ((_q60 == _q31 && ! TREE_SIDE_EFFECTS (_q60)) || operand_equal_p (_q60, _q31, 0))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q30, _q31, _q31 };
							if (gimple_simplify_121 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
							  return true;
						      }
						    }
						  if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || operand_equal_p (_q60, _q30, 0))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q31, _q30, _q30 };
							if (gimple_simplify_121 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p1 == _q31 && ! TREE_SIDE_EFFECTS (_p1)) || operand_equal_p (_p1, _q31, 0))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q30, _q31, _q31 };
					if (gimple_simplify_121 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					  return true;
				      }
				    }
				  if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || operand_equal_p (_p1, _q30, 0))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q31, _q30, _q30 };
					if (gimple_simplify_121 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  switch (TREE_CODE (_q40))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q40))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_IOR_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  if (tree_swap_operands_p (_q50, _q51))
						    std::swap (_q50, _q51);
						  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || operand_equal_p (_q51, _q20, 0))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _p1, _q50, _q51, _q20 };
							if (gimple_simplify_136 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
							  return true;
						      }
						    }
						  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || operand_equal_p (_q50, _q20, 0))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _p1, _q51, _q50, _q20 };
							if (gimple_simplify_136 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case BIT_IOR_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  if ((_q41 == _q20 && ! TREE_SIDE_EFFECTS (_q41)) || operand_equal_p (_q41, _q20, 0))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _p1, _q40, _q41, _q20 };
					if (gimple_simplify_136 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					  return true;
				      }
				    }
				  if ((_q40 == _q20 && ! TREE_SIDE_EFFECTS (_q40)) || operand_equal_p (_q40, _q20, 0))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _p1, _q41, _q40, _q20 };
					if (gimple_simplify_136 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  switch (TREE_CODE (_q30))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q30))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_IOR_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  if ((_q41 == _p0 && ! TREE_SIDE_EFFECTS (_q41)) || operand_equal_p (_q41, _p0, 0))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _p1, _q40, _q41, _p0 };
					if (gimple_simplify_136 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					  return true;
				      }
				    }
				  if ((_q40 == _p0 && ! TREE_SIDE_EFFECTS (_q40)) || operand_equal_p (_q40, _p0, 0))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _p1, _q41, _q40, _p0 };
					if (gimple_simplify_136 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case BIT_IOR_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  if (tree_swap_operands_p (_q30, _q31))
		    std::swap (_q30, _q31);
		  if ((_q31 == _p0 && ! TREE_SIDE_EFFECTS (_q31)) || operand_equal_p (_q31, _p0, 0))
		    {
		      {
			tree captures[4] ATTRIBUTE_UNUSED = { _p1, _q30, _q31, _p0 };
			if (gimple_simplify_136 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
			  return true;
		      }
		    }
		  if ((_q30 == _p0 && ! TREE_SIDE_EFFECTS (_q30)) || operand_equal_p (_q30, _p0, 0))
		    {
		      {
			tree captures[4] ATTRIBUTE_UNUSED = { _p1, _q31, _q30, _p0 };
			if (gimple_simplify_136 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
			  return true;
		      }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case BIT_IOR_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  {
		    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
		    if (gimple_simplify_137 (res_op, seq, valueize, type, captures))
		      return true;
		  }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  switch (TREE_CODE (_q50))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q50))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_IOR_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
						    {
						      {
							tree captures[7] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q21, _p1, _q50, _q61 };
							if (gimple_simplify_138 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
							  return true;
						      }
						    }
						  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
						    {
						      {
							tree captures[7] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q21, _p1, _q50, _q60 };
							if (gimple_simplify_138 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
							  return true;
						      }
						    }
						  if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
						    {
						      {
							tree captures[7] ATTRIBUTE_UNUSED = { _p0, _p0, _q21, _q20, _p1, _q50, _q61 };
							if (gimple_simplify_138 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
							  return true;
						      }
						    }
						  if ((_q61 == _q21 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q21, 0) && types_match (_q61, _q21)))
						    {
						      {
							tree captures[7] ATTRIBUTE_UNUSED = { _p0, _p0, _q21, _q20, _p1, _q50, _q60 };
							if (gimple_simplify_138 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case BIT_IOR_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[7] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q21, _p1, _p1, _q51 };
					if (gimple_simplify_139 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[7] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q21, _p1, _p1, _q50 };
					if (gimple_simplify_139 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[7] ATTRIBUTE_UNUSED = { _p0, _p0, _q21, _q20, _p1, _p1, _q51 };
					if (gimple_simplify_139 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[7] ATTRIBUTE_UNUSED = { _p0, _p0, _q21, _q20, _p1, _p1, _q50 };
					if (gimple_simplify_139 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case BIT_IOR_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  if (tree_swap_operands_p (_q30, _q31))
		    std::swap (_q30, _q31);
		  {
		    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q31, _p0 };
		    if (gimple_simplify_137 (res_op, seq, valueize, type, captures))
		      return true;
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      CASE_CONVERT:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_IOR_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  switch (TREE_CODE (_q60))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q60))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_IOR_EXPR:
							        {
								  tree _q70 = gimple_assign_rhs1 (_a4);
								  _q70 = do_valueize (valueize, _q70);
								  tree _q71 = gimple_assign_rhs2 (_a4);
								  _q71 = do_valueize (valueize, _q71);
								  if (tree_swap_operands_p (_q70, _q71))
								    std::swap (_q70, _q71);
								  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
								    {
								      {
									tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31, _p1, _q60, _q71 };
									if (gimple_simplify_140 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
									  return true;
								      }
								    }
								  if ((_q71 == _q30 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q30, 0) && types_match (_q71, _q30)))
								    {
								      {
									tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31, _p1, _q60, _q70 };
									if (gimple_simplify_140 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
									  return true;
								      }
								    }
								  if ((_q70 == _q31 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q31, 0) && types_match (_q70, _q31)))
								    {
								      {
									tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q31, _q30, _p1, _q60, _q71 };
									if (gimple_simplify_140 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
									  return true;
								      }
								    }
								  if ((_q71 == _q31 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q31, 0) && types_match (_q71, _q31)))
								    {
								      {
									tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q31, _q30, _p1, _q60, _q70 };
									if (gimple_simplify_140 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
									  return true;
								      }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case BIT_IOR_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
						    {
						      {
							tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31, _p1, _p1, _q61 };
							if (gimple_simplify_141 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
							  return true;
						      }
						    }
						  if ((_q61 == _q30 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q30, 0) && types_match (_q61, _q30)))
						    {
						      {
							tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31, _p1, _p1, _q60 };
							if (gimple_simplify_141 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
							  return true;
						      }
						    }
						  if ((_q60 == _q31 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q31, 0) && types_match (_q60, _q31)))
						    {
						      {
							tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q31, _q30, _p1, _p1, _q61 };
							if (gimple_simplify_141 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
							  return true;
						      }
						    }
						  if ((_q61 == _q31 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q31, 0) && types_match (_q61, _q31)))
						    {
						      {
							tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q31, _q30, _p1, _p1, _q60 };
							if (gimple_simplify_141 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  {
				    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _p1, _q40 };
				    if (gimple_simplify_31 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  {
		    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _p1, _p1 };
		    if (gimple_simplify_32 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
		      return true;
		  }
	          break;
	        }
	      case BIT_AND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
			if (gimple_simplify_142 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
			  return true;
		      }
		    }
		  if ((_p1 == _q21 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q21, 0) && types_match (_p1, _q21)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _q21, _q20 };
			if (gimple_simplify_142 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
			  return true;
		      }
		    }
		  {
		    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
		    if (gimple_simplify_143 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
		      return true;
		  }
		  {
		    tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
		    if (gimple_simplify_143 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
		      return true;
		  }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_IOR_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q51 };
					if (gimple_simplify_144 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q50 };
					if (gimple_simplify_144 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q51 };
					if (gimple_simplify_144 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q50 };
					if (gimple_simplify_144 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case BIT_NOT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  switch (TREE_CODE (_q50))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q50))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q61 };
							if (gimple_simplify_145 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
							  return true;
						      }
						    }
						  if ((_q61 == _q21 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q21, 0) && types_match (_q61, _q21)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q21, _p1, _q60 };
							if (gimple_simplify_145 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
							  return true;
						      }
						    }
						  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q61 };
							if (gimple_simplify_145 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
							  return true;
						      }
						    }
						  if ((_q61 == _q20 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q20, 0) && types_match (_q61, _q20)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q20, _p1, _q60 };
							if (gimple_simplify_145 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  {
		    tree _q20_pops[1];
		    if (gimple_nop_convert (_q20, _q20_pops, valueize))
		      {
			tree _q30 = _q20_pops[0];
			switch (TREE_CODE (_q30))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _q30))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    case BIT_IOR_EXPR:
				      {
					tree _q40 = gimple_assign_rhs1 (_a2);
					_q40 = do_valueize (valueize, _q40);
					tree _q41 = gimple_assign_rhs2 (_a2);
					_q41 = do_valueize (valueize, _q41);
					if (tree_swap_operands_p (_q40, _q41))
					  std::swap (_q40, _q41);
					{
					  tree captures[8] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q30, _q40, _q41, _q21, _p1 };
					  if (gimple_simplify_146 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					    return true;
					}
					{
					  tree captures[8] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q30, _q41, _q40, _q21, _p1 };
					  if (gimple_simplify_146 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					    return true;
					}
				        break;
				      }
				    case BIT_XOR_EXPR:
				      {
					tree _q40 = gimple_assign_rhs1 (_a2);
					_q40 = do_valueize (valueize, _q40);
					tree _q41 = gimple_assign_rhs2 (_a2);
					_q41 = do_valueize (valueize, _q41);
					if (tree_swap_operands_p (_q40, _q41))
					  std::swap (_q40, _q41);
					{
					  tree captures[8] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q30, _q40, _q41, _q21, _p1 };
					  if (gimple_simplify_146 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					    return true;
					}
					{
					  tree captures[8] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q30, _q41, _q40, _q21, _p1 };
					  if (gimple_simplify_146 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					    return true;
					}
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		      }
		  }
		  {
		    tree _q21_pops[1];
		    if (gimple_nop_convert (_q21, _q21_pops, valueize))
		      {
			tree _q40 = _q21_pops[0];
			switch (TREE_CODE (_q40))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _q40))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    case BIT_IOR_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a2);
					_q51 = do_valueize (valueize, _q51);
					if (tree_swap_operands_p (_q50, _q51))
					  std::swap (_q50, _q51);
					{
					  tree captures[8] ATTRIBUTE_UNUSED = { _p0, _p0, _q21, _q40, _q50, _q51, _q20, _p1 };
					  if (gimple_simplify_146 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					    return true;
					}
					{
					  tree captures[8] ATTRIBUTE_UNUSED = { _p0, _p0, _q21, _q40, _q51, _q50, _q20, _p1 };
					  if (gimple_simplify_146 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					    return true;
					}
				        break;
				      }
				    case BIT_XOR_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a2);
					_q51 = do_valueize (valueize, _q51);
					if (tree_swap_operands_p (_q50, _q51))
					  std::swap (_q50, _q51);
					{
					  tree captures[8] ATTRIBUTE_UNUSED = { _p0, _p0, _q21, _q40, _q50, _q51, _q20, _p1 };
					  if (gimple_simplify_146 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					    return true;
					}
					{
					  tree captures[8] ATTRIBUTE_UNUSED = { _p0, _p0, _q21, _q40, _q51, _q50, _q20, _p1 };
					  if (gimple_simplify_146 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					    return true;
					}
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		      }
		  }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_IOR_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  {
				    tree captures[8] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q20, _q30, _q31, _q21, _p1 };
				    if (gimple_simplify_147 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
				      return true;
				  }
				  {
				    tree captures[8] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q20, _q31, _q30, _q21, _p1 };
				    if (gimple_simplify_147 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
				      return true;
				  }
			          break;
			        }
			      case BIT_XOR_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  {
				    tree captures[8] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q20, _q30, _q31, _q21, _p1 };
				    if (gimple_simplify_147 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
				      return true;
				  }
				  {
				    tree captures[8] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q20, _q31, _q30, _q21, _p1 };
				    if (gimple_simplify_147 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_IOR_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  {
				    tree captures[8] ATTRIBUTE_UNUSED = { _p0, _p0, _q21, _q21, _q40, _q41, _q20, _p1 };
				    if (gimple_simplify_147 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
				      return true;
				  }
				  {
				    tree captures[8] ATTRIBUTE_UNUSED = { _p0, _p0, _q21, _q21, _q41, _q40, _q20, _p1 };
				    if (gimple_simplify_147 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
				      return true;
				  }
			          break;
			        }
			      case BIT_XOR_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  {
				    tree captures[8] ATTRIBUTE_UNUSED = { _p0, _p0, _q21, _q21, _q40, _q41, _q20, _p1 };
				    if (gimple_simplify_147 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
				      return true;
				  }
				  {
				    tree captures[8] ATTRIBUTE_UNUSED = { _p0, _p0, _q21, _q21, _q41, _q40, _q20, _p1 };
				    if (gimple_simplify_147 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case BIT_AND_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  if (tree_swap_operands_p (_q30, _q31))
		    std::swap (_q30, _q31);
		  if ((_q30 == _p0 && ! TREE_SIDE_EFFECTS (_q30)) || (operand_equal_p (_q30, _p0, 0) && types_match (_q30, _p0)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q31 };
			if (gimple_simplify_142 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
			  return true;
		      }
		    }
		  if ((_q31 == _p0 && ! TREE_SIDE_EFFECTS (_q31)) || (operand_equal_p (_q31, _p0, 0) && types_match (_q31, _p0)))
		    {
		      {
			tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q30 };
			if (gimple_simplify_142 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
			  return true;
		      }
		    }
		  {
		    tree captures[3] ATTRIBUTE_UNUSED = { _q30, _q31, _p0 };
		    if (gimple_simplify_143 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
		      return true;
		  }
		  {
		    tree captures[3] ATTRIBUTE_UNUSED = { _q31, _q30, _p0 };
		    if (gimple_simplify_143 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
		      return true;
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case BIT_IOR_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_AND_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q51, _p0, _q21 };
					if (gimple_simplify_148 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q51, _p0, _q20 };
					if (gimple_simplify_148 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q50, _p0, _q21 };
					if (gimple_simplify_148 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _q21, _q50, _p0, _q20 };
					if (gimple_simplify_148 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case BIT_NOT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_AND_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q61 == _q30 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q30, 0) && types_match (_q61, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q60, _q30, _p0, _q31 };
							if (gimple_simplify_149 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
							  return true;
						      }
						    }
						  if ((_q61 == _q31 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q31, 0) && types_match (_q61, _q31)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q60, _q31, _p0, _q30 };
							if (gimple_simplify_149 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
							  return true;
						      }
						    }
						  if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q61, _q30, _p0, _q31 };
							if (gimple_simplify_149 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
							  return true;
						      }
						    }
						  if ((_q60 == _q31 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q31, 0) && types_match (_q60, _q31)))
						    {
						      {
							tree captures[4] ATTRIBUTE_UNUSED = { _q61, _q31, _p0, _q30 };
							if (gimple_simplify_149 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  if ((_p1 == _q30 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q30, 0) && types_match (_p1, _q30)))
				    {
				      {
					tree captures[2] ATTRIBUTE_UNUSED = { _q30, _q31 };
					if (gimple_simplify_150 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
					  return true;
				      }
				    }
				  if ((_p1 == _q31 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q31, 0) && types_match (_p1, _q31)))
				    {
				      {
					tree captures[2] ATTRIBUTE_UNUSED = { _q31, _q30 };
					if (gimple_simplify_150 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case BIT_NOT_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  switch (TREE_CODE (_q30))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q30))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_AND_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  if ((_q40 == _p0 && ! TREE_SIDE_EFFECTS (_q40)) || (operand_equal_p (_q40, _p0, 0) && types_match (_q40, _p0)))
				    {
				      {
					tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q41 };
					if (gimple_simplify_150 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
					  return true;
				      }
				    }
				  if ((_q41 == _p0 && ! TREE_SIDE_EFFECTS (_q41)) || (operand_equal_p (_q41, _p0, 0) && types_match (_q41, _p0)))
				    {
				      {
					tree captures[2] ATTRIBUTE_UNUSED = { _p0, _q40 };
					if (gimple_simplify_150 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, BIT_AND_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  {
    tree _p0_pops[1];
    if (gimple_nop_convert (_p0, _p0_pops, valueize))
      {
	tree _q20 = _p0_pops[0];
	switch (TREE_CODE (_q20))
	  {
	  case SSA_NAME:
	    if (gimple *_d1 = get_def (valueize, _q20))
	      {
		if (gassign *_a1 = dyn_cast <gassign *> (_d1))
		  switch (gimple_assign_rhs_code (_a1))
		    {
		    case BIT_AND_EXPR:
		      {
			tree _q30 = gimple_assign_rhs1 (_a1);
			_q30 = do_valueize (valueize, _q30);
			tree _q31 = gimple_assign_rhs2 (_a1);
			_q31 = do_valueize (valueize, _q31);
			if (tree_swap_operands_p (_q30, _q31))
			  std::swap (_q30, _q31);
			{
			  tree _q30_pops[1];
			  if (gimple_nop_convert (_q30, _q30_pops, valueize))
			    {
			      tree _q40 = _q30_pops[0];
			      switch (TREE_CODE (_q40))
			        {
				case SSA_NAME:
				  if (gimple *_d2 = get_def (valueize, _q40))
				    {
				      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				        switch (gimple_assign_rhs_code (_a2))
					  {
					  case BIT_IOR_EXPR:
					    {
					      tree _q50 = gimple_assign_rhs1 (_a2);
					      _q50 = do_valueize (valueize, _q50);
					      tree _q51 = gimple_assign_rhs2 (_a2);
					      _q51 = do_valueize (valueize, _q51);
					      if (tree_swap_operands_p (_q50, _q51))
					        std::swap (_q50, _q51);
					      {
						tree captures[8] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q40, _q50, _q51, _q31, _p1 };
						if (gimple_simplify_151 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
						  return true;
					      }
					      {
						tree captures[8] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q40, _q51, _q50, _q31, _p1 };
						if (gimple_simplify_151 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
						  return true;
					      }
					      break;
					    }
					  case BIT_XOR_EXPR:
					    {
					      tree _q50 = gimple_assign_rhs1 (_a2);
					      _q50 = do_valueize (valueize, _q50);
					      tree _q51 = gimple_assign_rhs2 (_a2);
					      _q51 = do_valueize (valueize, _q51);
					      if (tree_swap_operands_p (_q50, _q51))
					        std::swap (_q50, _q51);
					      {
						tree captures[8] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q40, _q50, _q51, _q31, _p1 };
						if (gimple_simplify_151 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
						  return true;
					      }
					      {
						tree captures[8] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q40, _q51, _q50, _q31, _p1 };
						if (gimple_simplify_151 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
						  return true;
					      }
					      break;
					    }
					  default:;
					  }
				    }
				  break;
			        default:;
			        }
			    }
			}
			{
			  tree _q31_pops[1];
			  if (gimple_nop_convert (_q31, _q31_pops, valueize))
			    {
			      tree _q50 = _q31_pops[0];
			      switch (TREE_CODE (_q50))
			        {
				case SSA_NAME:
				  if (gimple *_d2 = get_def (valueize, _q50))
				    {
				      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				        switch (gimple_assign_rhs_code (_a2))
					  {
					  case BIT_IOR_EXPR:
					    {
					      tree _q60 = gimple_assign_rhs1 (_a2);
					      _q60 = do_valueize (valueize, _q60);
					      tree _q61 = gimple_assign_rhs2 (_a2);
					      _q61 = do_valueize (valueize, _q61);
					      if (tree_swap_operands_p (_q60, _q61))
					        std::swap (_q60, _q61);
					      {
						tree captures[8] ATTRIBUTE_UNUSED = { _p0, _q20, _q31, _q50, _q60, _q61, _q30, _p1 };
						if (gimple_simplify_151 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
						  return true;
					      }
					      {
						tree captures[8] ATTRIBUTE_UNUSED = { _p0, _q20, _q31, _q50, _q61, _q60, _q30, _p1 };
						if (gimple_simplify_151 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
						  return true;
					      }
					      break;
					    }
					  case BIT_XOR_EXPR:
					    {
					      tree _q60 = gimple_assign_rhs1 (_a2);
					      _q60 = do_valueize (valueize, _q60);
					      tree _q61 = gimple_assign_rhs2 (_a2);
					      _q61 = do_valueize (valueize, _q61);
					      if (tree_swap_operands_p (_q60, _q61))
					        std::swap (_q60, _q61);
					      {
						tree captures[8] ATTRIBUTE_UNUSED = { _p0, _q20, _q31, _q50, _q60, _q61, _q30, _p1 };
						if (gimple_simplify_151 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
						  return true;
					      }
					      {
						tree captures[8] ATTRIBUTE_UNUSED = { _p0, _q20, _q31, _q50, _q61, _q60, _q30, _p1 };
						if (gimple_simplify_151 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
						  return true;
					      }
					      break;
					    }
					  default:;
					  }
				    }
				  break;
			        default:;
			        }
			    }
			}
			switch (TREE_CODE (_q30))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _q30))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    case BIT_IOR_EXPR:
				      {
					tree _q40 = gimple_assign_rhs1 (_a2);
					_q40 = do_valueize (valueize, _q40);
					tree _q41 = gimple_assign_rhs2 (_a2);
					_q41 = do_valueize (valueize, _q41);
					if (tree_swap_operands_p (_q40, _q41))
					  std::swap (_q40, _q41);
					{
					  tree captures[8] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q30, _q40, _q41, _q31, _p1 };
					  if (gimple_simplify_152 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					    return true;
					}
					{
					  tree captures[8] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q30, _q41, _q40, _q31, _p1 };
					  if (gimple_simplify_152 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					    return true;
					}
				        break;
				      }
				    case BIT_XOR_EXPR:
				      {
					tree _q40 = gimple_assign_rhs1 (_a2);
					_q40 = do_valueize (valueize, _q40);
					tree _q41 = gimple_assign_rhs2 (_a2);
					_q41 = do_valueize (valueize, _q41);
					if (tree_swap_operands_p (_q40, _q41))
					  std::swap (_q40, _q41);
					{
					  tree captures[8] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q30, _q40, _q41, _q31, _p1 };
					  if (gimple_simplify_152 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					    return true;
					}
					{
					  tree captures[8] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q30, _q41, _q40, _q31, _p1 };
					  if (gimple_simplify_152 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					    return true;
					}
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			switch (TREE_CODE (_q31))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _q31))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    case BIT_IOR_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a2);
					_q51 = do_valueize (valueize, _q51);
					if (tree_swap_operands_p (_q50, _q51))
					  std::swap (_q50, _q51);
					{
					  tree captures[8] ATTRIBUTE_UNUSED = { _p0, _q20, _q31, _q31, _q50, _q51, _q30, _p1 };
					  if (gimple_simplify_152 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					    return true;
					}
					{
					  tree captures[8] ATTRIBUTE_UNUSED = { _p0, _q20, _q31, _q31, _q51, _q50, _q30, _p1 };
					  if (gimple_simplify_152 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					    return true;
					}
				        break;
				      }
				    case BIT_XOR_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a2);
					_q51 = do_valueize (valueize, _q51);
					if (tree_swap_operands_p (_q50, _q51))
					  std::swap (_q50, _q51);
					{
					  tree captures[8] ATTRIBUTE_UNUSED = { _p0, _q20, _q31, _q31, _q50, _q51, _q30, _p1 };
					  if (gimple_simplify_152 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					    return true;
					}
					{
					  tree captures[8] ATTRIBUTE_UNUSED = { _p0, _q20, _q31, _q31, _q51, _q50, _q30, _p1 };
					  if (gimple_simplify_152 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					    return true;
					}
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		        break;
		      }
		    case MULT_EXPR:
		      {
			tree _q30 = gimple_assign_rhs1 (_a1);
			_q30 = do_valueize (valueize, _q30);
			tree _q31 = gimple_assign_rhs2 (_a1);
			_q31 = do_valueize (valueize, _q31);
			if (tree_swap_operands_p (_q30, _q31))
			  std::swap (_q30, _q31);
			{
			  tree _q30_pops[1];
			  if (gimple_nop_convert (_q30, _q30_pops, valueize))
			    {
			      tree _q40 = _q30_pops[0];
			      switch (TREE_CODE (_q31))
			        {
				case INTEGER_CST:
				  {
				    switch (TREE_CODE (_p1))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p1))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case LSHIFT_EXPR:
						  {
						    tree _q70 = gimple_assign_rhs1 (_a2);
						    _q70 = do_valueize (valueize, _q70);
						    tree _q71 = gimple_assign_rhs2 (_a2);
						    _q71 = do_valueize (valueize, _q71);
						    if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
						      {
							switch (TREE_CODE (_q71))
							  {
							  case INTEGER_CST:
							    {
							      {
								tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q40, _q31, _p1, _q71 };
								if (gimple_simplify_39 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
								  return true;
							      }
							      break;
							    }
						          default:;
						          }
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  {
				    tree _p1_pops[1];
				    if (gimple_nop_convert (_p1, _p1_pops, valueize))
				      {
					tree _q70 = _p1_pops[0];
					switch (TREE_CODE (_q70))
					  {
					  case SSA_NAME:
					    if (gimple *_d2 = get_def (valueize, _q70))
					      {
						if (gassign *_a2 = dyn_cast <gassign *> (_d2))
						  switch (gimple_assign_rhs_code (_a2))
						    {
						    case MULT_EXPR:
						      {
							tree _q80 = gimple_assign_rhs1 (_a2);
							_q80 = do_valueize (valueize, _q80);
							tree _q81 = gimple_assign_rhs2 (_a2);
							_q81 = do_valueize (valueize, _q81);
							if (tree_swap_operands_p (_q80, _q81))
							  std::swap (_q80, _q81);
							{
							  tree _q80_pops[1];
							  if (gimple_nop_convert (_q80, _q80_pops, valueize))
							    {
							      tree _q90 = _q80_pops[0];
							      switch (TREE_CODE (_q81))
							        {
								case INTEGER_CST:
								  {
								    {
								      tree captures[8] ATTRIBUTE_UNUSED = { _p0, _q20, _q40, _q31, _p1, _q70, _q90, _q81 };
								      if (gimple_simplify_38 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
								        return true;
								    }
								    break;
								  }
							        default:;
							        }
							    }
							}
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				      }
				  }
				    if ((_p1 == _q40 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q40, 0) && types_match (_p1, _q40)))
				      {
					{
					  tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q40, _q31 };
					  if (gimple_simplify_40 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					    return true;
					}
				      }
				    break;
				  }
			        default:;
			        }
			    }
			}
		        break;
		      }
		    default:;
		    }
	      }
	    break;
          default:;
          }
      }
  }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case BIT_AND_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  if (tree_swap_operands_p (_q30, _q31))
		    std::swap (_q30, _q31);
		  {
		    tree _q30_pops[1];
		    if (gimple_nop_convert (_q30, _q30_pops, valueize))
		      {
			tree _q40 = _q30_pops[0];
			switch (TREE_CODE (_q40))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _q40))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    case BIT_IOR_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a2);
					_q51 = do_valueize (valueize, _q51);
					if (tree_swap_operands_p (_q50, _q51))
					  std::swap (_q50, _q51);
					{
					  tree captures[8] ATTRIBUTE_UNUSED = { _p1, _p1, _q30, _q40, _q50, _q51, _q31, _p0 };
					  if (gimple_simplify_146 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					    return true;
					}
					{
					  tree captures[8] ATTRIBUTE_UNUSED = { _p1, _p1, _q30, _q40, _q51, _q50, _q31, _p0 };
					  if (gimple_simplify_146 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					    return true;
					}
				        break;
				      }
				    case BIT_XOR_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a2);
					_q51 = do_valueize (valueize, _q51);
					if (tree_swap_operands_p (_q50, _q51))
					  std::swap (_q50, _q51);
					{
					  tree captures[8] ATTRIBUTE_UNUSED = { _p1, _p1, _q30, _q40, _q50, _q51, _q31, _p0 };
					  if (gimple_simplify_146 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					    return true;
					}
					{
					  tree captures[8] ATTRIBUTE_UNUSED = { _p1, _p1, _q30, _q40, _q51, _q50, _q31, _p0 };
					  if (gimple_simplify_146 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					    return true;
					}
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		      }
		  }
		  {
		    tree _q31_pops[1];
		    if (gimple_nop_convert (_q31, _q31_pops, valueize))
		      {
			tree _q50 = _q31_pops[0];
			switch (TREE_CODE (_q50))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _q50))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    case BIT_IOR_EXPR:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					tree _q61 = gimple_assign_rhs2 (_a2);
					_q61 = do_valueize (valueize, _q61);
					if (tree_swap_operands_p (_q60, _q61))
					  std::swap (_q60, _q61);
					{
					  tree captures[8] ATTRIBUTE_UNUSED = { _p1, _p1, _q31, _q50, _q60, _q61, _q30, _p0 };
					  if (gimple_simplify_146 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					    return true;
					}
					{
					  tree captures[8] ATTRIBUTE_UNUSED = { _p1, _p1, _q31, _q50, _q61, _q60, _q30, _p0 };
					  if (gimple_simplify_146 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					    return true;
					}
				        break;
				      }
				    case BIT_XOR_EXPR:
				      {
					tree _q60 = gimple_assign_rhs1 (_a2);
					_q60 = do_valueize (valueize, _q60);
					tree _q61 = gimple_assign_rhs2 (_a2);
					_q61 = do_valueize (valueize, _q61);
					if (tree_swap_operands_p (_q60, _q61))
					  std::swap (_q60, _q61);
					{
					  tree captures[8] ATTRIBUTE_UNUSED = { _p1, _p1, _q31, _q50, _q60, _q61, _q30, _p0 };
					  if (gimple_simplify_146 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					    return true;
					}
					{
					  tree captures[8] ATTRIBUTE_UNUSED = { _p1, _p1, _q31, _q50, _q61, _q60, _q30, _p0 };
					  if (gimple_simplify_146 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					    return true;
					}
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		      }
		  }
		  switch (TREE_CODE (_q30))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q30))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_IOR_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  {
				    tree captures[8] ATTRIBUTE_UNUSED = { _p1, _p1, _q30, _q30, _q40, _q41, _q31, _p0 };
				    if (gimple_simplify_147 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
				      return true;
				  }
				  {
				    tree captures[8] ATTRIBUTE_UNUSED = { _p1, _p1, _q30, _q30, _q41, _q40, _q31, _p0 };
				    if (gimple_simplify_147 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
				      return true;
				  }
			          break;
			        }
			      case BIT_XOR_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  {
				    tree captures[8] ATTRIBUTE_UNUSED = { _p1, _p1, _q30, _q30, _q40, _q41, _q31, _p0 };
				    if (gimple_simplify_147 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
				      return true;
				  }
				  {
				    tree captures[8] ATTRIBUTE_UNUSED = { _p1, _p1, _q30, _q30, _q41, _q40, _q31, _p0 };
				    if (gimple_simplify_147 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q31))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q31))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_IOR_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  {
				    tree captures[8] ATTRIBUTE_UNUSED = { _p1, _p1, _q31, _q31, _q50, _q51, _q30, _p0 };
				    if (gimple_simplify_147 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
				      return true;
				  }
				  {
				    tree captures[8] ATTRIBUTE_UNUSED = { _p1, _p1, _q31, _q31, _q51, _q50, _q30, _p0 };
				    if (gimple_simplify_147 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
				      return true;
				  }
			          break;
			        }
			      case BIT_XOR_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  {
				    tree captures[8] ATTRIBUTE_UNUSED = { _p1, _p1, _q31, _q31, _q50, _q51, _q30, _p0 };
				    if (gimple_simplify_147 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
				      return true;
				  }
				  {
				    tree captures[8] ATTRIBUTE_UNUSED = { _p1, _p1, _q31, _q31, _q51, _q50, _q30, _p0 };
				    if (gimple_simplify_147 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
				      return true;
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
{
  tree _p1_pops[1];
  if (gimple_nop_convert (_p1, _p1_pops, valueize))
    {
      tree _q30 = _p1_pops[0];
      switch (TREE_CODE (_q30))
        {
	case SSA_NAME:
	  if (gimple *_d1 = get_def (valueize, _q30))
	    {
	      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	        switch (gimple_assign_rhs_code (_a1))
		  {
		  case BIT_AND_EXPR:
		    {
		      tree _q40 = gimple_assign_rhs1 (_a1);
		      _q40 = do_valueize (valueize, _q40);
		      tree _q41 = gimple_assign_rhs2 (_a1);
		      _q41 = do_valueize (valueize, _q41);
		      if (tree_swap_operands_p (_q40, _q41))
		        std::swap (_q40, _q41);
		      {
			tree _q40_pops[1];
			if (gimple_nop_convert (_q40, _q40_pops, valueize))
			  {
			    tree _q50 = _q40_pops[0];
			    switch (TREE_CODE (_q50))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _q50))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					case BIT_IOR_EXPR:
					  {
					    tree _q60 = gimple_assign_rhs1 (_a2);
					    _q60 = do_valueize (valueize, _q60);
					    tree _q61 = gimple_assign_rhs2 (_a2);
					    _q61 = do_valueize (valueize, _q61);
					    if (tree_swap_operands_p (_q60, _q61))
					      std::swap (_q60, _q61);
					    {
					      tree captures[8] ATTRIBUTE_UNUSED = { _p1, _q30, _q40, _q50, _q60, _q61, _q41, _p0 };
					      if (gimple_simplify_151 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					        return true;
					    }
					    {
					      tree captures[8] ATTRIBUTE_UNUSED = { _p1, _q30, _q40, _q50, _q61, _q60, _q41, _p0 };
					      if (gimple_simplify_151 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					        return true;
					    }
					    break;
					  }
					case BIT_XOR_EXPR:
					  {
					    tree _q60 = gimple_assign_rhs1 (_a2);
					    _q60 = do_valueize (valueize, _q60);
					    tree _q61 = gimple_assign_rhs2 (_a2);
					    _q61 = do_valueize (valueize, _q61);
					    if (tree_swap_operands_p (_q60, _q61))
					      std::swap (_q60, _q61);
					    {
					      tree captures[8] ATTRIBUTE_UNUSED = { _p1, _q30, _q40, _q50, _q60, _q61, _q41, _p0 };
					      if (gimple_simplify_151 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					        return true;
					    }
					    {
					      tree captures[8] ATTRIBUTE_UNUSED = { _p1, _q30, _q40, _q50, _q61, _q60, _q41, _p0 };
					      if (gimple_simplify_151 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					        return true;
					    }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			  }
		      }
		      {
			tree _q41_pops[1];
			if (gimple_nop_convert (_q41, _q41_pops, valueize))
			  {
			    tree _q60 = _q41_pops[0];
			    switch (TREE_CODE (_q60))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _q60))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					case BIT_IOR_EXPR:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    tree _q71 = gimple_assign_rhs2 (_a2);
					    _q71 = do_valueize (valueize, _q71);
					    if (tree_swap_operands_p (_q70, _q71))
					      std::swap (_q70, _q71);
					    {
					      tree captures[8] ATTRIBUTE_UNUSED = { _p1, _q30, _q41, _q60, _q70, _q71, _q40, _p0 };
					      if (gimple_simplify_151 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					        return true;
					    }
					    {
					      tree captures[8] ATTRIBUTE_UNUSED = { _p1, _q30, _q41, _q60, _q71, _q70, _q40, _p0 };
					      if (gimple_simplify_151 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					        return true;
					    }
					    break;
					  }
					case BIT_XOR_EXPR:
					  {
					    tree _q70 = gimple_assign_rhs1 (_a2);
					    _q70 = do_valueize (valueize, _q70);
					    tree _q71 = gimple_assign_rhs2 (_a2);
					    _q71 = do_valueize (valueize, _q71);
					    if (tree_swap_operands_p (_q70, _q71))
					      std::swap (_q70, _q71);
					    {
					      tree captures[8] ATTRIBUTE_UNUSED = { _p1, _q30, _q41, _q60, _q70, _q71, _q40, _p0 };
					      if (gimple_simplify_151 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					        return true;
					    }
					    {
					      tree captures[8] ATTRIBUTE_UNUSED = { _p1, _q30, _q41, _q60, _q71, _q70, _q40, _p0 };
					      if (gimple_simplify_151 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					        return true;
					    }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			  }
		      }
		      switch (TREE_CODE (_q40))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _q40))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case BIT_IOR_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a2);
				      _q51 = do_valueize (valueize, _q51);
				      if (tree_swap_operands_p (_q50, _q51))
				        std::swap (_q50, _q51);
				      {
					tree captures[8] ATTRIBUTE_UNUSED = { _p1, _q30, _q40, _q40, _q50, _q51, _q41, _p0 };
					if (gimple_simplify_152 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					  return true;
				      }
				      {
					tree captures[8] ATTRIBUTE_UNUSED = { _p1, _q30, _q40, _q40, _q51, _q50, _q41, _p0 };
					if (gimple_simplify_152 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					  return true;
				      }
				      break;
				    }
				  case BIT_XOR_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a2);
				      _q51 = do_valueize (valueize, _q51);
				      if (tree_swap_operands_p (_q50, _q51))
				        std::swap (_q50, _q51);
				      {
					tree captures[8] ATTRIBUTE_UNUSED = { _p1, _q30, _q40, _q40, _q50, _q51, _q41, _p0 };
					if (gimple_simplify_152 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					  return true;
				      }
				      {
					tree captures[8] ATTRIBUTE_UNUSED = { _p1, _q30, _q40, _q40, _q51, _q50, _q41, _p0 };
					if (gimple_simplify_152 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					  return true;
				      }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      switch (TREE_CODE (_q41))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _q41))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case BIT_IOR_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if (tree_swap_operands_p (_q60, _q61))
				        std::swap (_q60, _q61);
				      {
					tree captures[8] ATTRIBUTE_UNUSED = { _p1, _q30, _q41, _q41, _q60, _q61, _q40, _p0 };
					if (gimple_simplify_152 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					  return true;
				      }
				      {
					tree captures[8] ATTRIBUTE_UNUSED = { _p1, _q30, _q41, _q41, _q61, _q60, _q40, _p0 };
					if (gimple_simplify_152 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					  return true;
				      }
				      break;
				    }
				  case BIT_XOR_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      if (tree_swap_operands_p (_q60, _q61))
				        std::swap (_q60, _q61);
				      {
					tree captures[8] ATTRIBUTE_UNUSED = { _p1, _q30, _q41, _q41, _q60, _q61, _q40, _p0 };
					if (gimple_simplify_152 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					  return true;
				      }
				      {
					tree captures[8] ATTRIBUTE_UNUSED = { _p1, _q30, _q41, _q41, _q61, _q60, _q40, _p0 };
					if (gimple_simplify_152 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR))
					  return true;
				      }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		      break;
		    }
		  default:;
		  }
	    }
	  break;
        default:;
        }
    }
}
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case BIT_IOR_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if (CONSTANT_CLASS_P (_q21))
		    {
		      if (CONSTANT_CLASS_P (_p1))
			{
			  {
			    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
			    if (gimple_simplify_33 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
			      return true;
			  }
		        }
		    }
	          break;
	        }
	      case COND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  tree _q22 = gimple_assign_rhs3 (_a1);
		  _q22 = do_valueize (valueize, _q22);
		  if (integer_zerop (_q22))
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p1))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case COND_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      tree _q62 = gimple_assign_rhs3 (_a2);
				      _q62 = do_valueize (valueize, _q62);
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  if (integer_zerop (_q61))
					    {
					      {
						tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q62 };
						const enum tree_code op = BIT_IOR_EXPR;
						gimple_seq *lseq = seq;
						if (lseq
						    && (!single_use (captures[0])
						        || !single_use (captures[3])))
						  lseq = NULL;
						if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2036;
						{
						  res_op->set_op (COND_EXPR, type, 3);
						  res_op->ops[0] = captures[1];
						  res_op->ops[0] = unshare_expr (res_op->ops[0]);
						  res_op->ops[1] = captures[2];
						  res_op->ops[2] = captures[4];
						  res_op->resimplify (lseq, valueize);
						  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1017, __FILE__, __LINE__, true);
						  return true;
						}
next_after_fail2036:;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
		  if (integer_zerop (_q21))
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p1))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case COND_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      tree _q62 = gimple_assign_rhs3 (_a2);
				      _q62 = do_valueize (valueize, _q62);
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  if (integer_zerop (_q62))
					    {
					      {
						tree captures[5] ATTRIBUTE_UNUSED = { _p1, _q20, _q61, _p0, _q22 };
						const enum tree_code op = BIT_IOR_EXPR;
						gimple_seq *lseq = seq;
						if (lseq
						    && (!single_use (captures[0])
						        || !single_use (captures[3])))
						  lseq = NULL;
						if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2037;
						{
						  res_op->set_op (COND_EXPR, type, 3);
						  res_op->ops[0] = captures[1];
						  res_op->ops[0] = unshare_expr (res_op->ops[0]);
						  res_op->ops[1] = captures[2];
						  res_op->ops[2] = captures[4];
						  res_op->resimplify (lseq, valueize);
						  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1017, __FILE__, __LINE__, true);
						  return true;
						}
next_after_fail2037:;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case LT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (zerop (_q22))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case COND_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      tree _q82 = gimple_assign_rhs3 (_a3);
						      _q82 = do_valueize (valueize, _q82);
						      switch (TREE_CODE (_q80))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q80))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case GE_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
									{
									  if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									    {
									      if (zerop (_q82))
										{
										  {
										    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										    if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, LT_EXPR, GE_EXPR))
										      return true;
										  }
									        }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
							case GE_EXPR:
							  {
							    tree _q90 = TREE_OPERAND (_q80, 0);
							    if ((TREE_CODE (_q90) == SSA_NAME
							         || is_gimple_min_invariant (_q90)))
							      {
								_q90 = do_valueize (valueize, _q90);
								tree _q91 = TREE_OPERAND (_q80, 1);
								if ((TREE_CODE (_q91) == SSA_NAME
								     || is_gimple_min_invariant (_q91)))
								  {
								    _q91 = do_valueize (valueize, _q91);
								    if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								      {
									if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									  {
									    if (zerop (_q82))
									      {
										{
										  tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										  if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, LT_EXPR, GE_EXPR))
										    return true;
										}
									      }
									  }
								      }
								  }
							      }
							    break;
							  }
						        default:;
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      case LE_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (zerop (_q22))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case COND_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      tree _q82 = gimple_assign_rhs3 (_a3);
						      _q82 = do_valueize (valueize, _q82);
						      switch (TREE_CODE (_q80))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q80))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case GT_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
									{
									  if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									    {
									      if (zerop (_q82))
										{
										  {
										    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										    if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, LE_EXPR, GT_EXPR))
										      return true;
										  }
									        }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
							case GT_EXPR:
							  {
							    tree _q90 = TREE_OPERAND (_q80, 0);
							    if ((TREE_CODE (_q90) == SSA_NAME
							         || is_gimple_min_invariant (_q90)))
							      {
								_q90 = do_valueize (valueize, _q90);
								tree _q91 = TREE_OPERAND (_q80, 1);
								if ((TREE_CODE (_q91) == SSA_NAME
								     || is_gimple_min_invariant (_q91)))
								  {
								    _q91 = do_valueize (valueize, _q91);
								    if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								      {
									if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									  {
									    if (zerop (_q82))
									      {
										{
										  tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										  if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, LE_EXPR, GT_EXPR))
										    return true;
										}
									      }
									  }
								      }
								  }
							      }
							    break;
							  }
						        default:;
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      case EQ_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  if (zerop (_q22))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case COND_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      tree _q82 = gimple_assign_rhs3 (_a3);
						      _q82 = do_valueize (valueize, _q82);
						      switch (TREE_CODE (_q80))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q80))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case NE_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if (tree_swap_operands_p (_q90, _q91))
								        std::swap (_q90, _q91);
								      if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
									{
									  if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									    {
									      if (zerop (_q82))
										{
										  {
										    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										    if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, EQ_EXPR, NE_EXPR))
										      return true;
										  }
									        }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
							case NE_EXPR:
							  {
							    tree _q90 = TREE_OPERAND (_q80, 0);
							    if ((TREE_CODE (_q90) == SSA_NAME
							         || is_gimple_min_invariant (_q90)))
							      {
								_q90 = do_valueize (valueize, _q90);
								tree _q91 = TREE_OPERAND (_q80, 1);
								if ((TREE_CODE (_q91) == SSA_NAME
								     || is_gimple_min_invariant (_q91)))
								  {
								    _q91 = do_valueize (valueize, _q91);
								    if (tree_swap_operands_p (_q90, _q91))
								      std::swap (_q90, _q91);
								    if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								      {
									if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									  {
									    if (zerop (_q82))
									      {
										{
										  tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										  if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, EQ_EXPR, NE_EXPR))
										    return true;
										}
									      }
									  }
								      }
								  }
							      }
							    break;
							  }
						        default:;
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      case NE_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  if (zerop (_q22))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case COND_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      tree _q82 = gimple_assign_rhs3 (_a3);
						      _q82 = do_valueize (valueize, _q82);
						      switch (TREE_CODE (_q80))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q80))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case EQ_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if (tree_swap_operands_p (_q90, _q91))
								        std::swap (_q90, _q91);
								      if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
									{
									  if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									    {
									      if (zerop (_q82))
										{
										  {
										    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										    if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, NE_EXPR, EQ_EXPR))
										      return true;
										  }
									        }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
							case EQ_EXPR:
							  {
							    tree _q90 = TREE_OPERAND (_q80, 0);
							    if ((TREE_CODE (_q90) == SSA_NAME
							         || is_gimple_min_invariant (_q90)))
							      {
								_q90 = do_valueize (valueize, _q90);
								tree _q91 = TREE_OPERAND (_q80, 1);
								if ((TREE_CODE (_q91) == SSA_NAME
								     || is_gimple_min_invariant (_q91)))
								  {
								    _q91 = do_valueize (valueize, _q91);
								    if (tree_swap_operands_p (_q90, _q91))
								      std::swap (_q90, _q91);
								    if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								      {
									if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									  {
									    if (zerop (_q82))
									      {
										{
										  tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										  if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, NE_EXPR, EQ_EXPR))
										    return true;
										}
									      }
									  }
								      }
								  }
							      }
							    break;
							  }
						        default:;
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      case GE_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (zerop (_q22))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case COND_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      tree _q82 = gimple_assign_rhs3 (_a3);
						      _q82 = do_valueize (valueize, _q82);
						      switch (TREE_CODE (_q80))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q80))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case LT_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
									{
									  if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									    {
									      if (zerop (_q82))
										{
										  {
										    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										    if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, GE_EXPR, LT_EXPR))
										      return true;
										  }
									        }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
							case LT_EXPR:
							  {
							    tree _q90 = TREE_OPERAND (_q80, 0);
							    if ((TREE_CODE (_q90) == SSA_NAME
							         || is_gimple_min_invariant (_q90)))
							      {
								_q90 = do_valueize (valueize, _q90);
								tree _q91 = TREE_OPERAND (_q80, 1);
								if ((TREE_CODE (_q91) == SSA_NAME
								     || is_gimple_min_invariant (_q91)))
								  {
								    _q91 = do_valueize (valueize, _q91);
								    if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								      {
									if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									  {
									    if (zerop (_q82))
									      {
										{
										  tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										  if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, GE_EXPR, LT_EXPR))
										    return true;
										}
									      }
									  }
								      }
								  }
							      }
							    break;
							  }
						        default:;
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      case GT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (zerop (_q22))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case COND_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      tree _q82 = gimple_assign_rhs3 (_a3);
						      _q82 = do_valueize (valueize, _q82);
						      switch (TREE_CODE (_q80))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q80))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case LE_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
									{
									  if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									    {
									      if (zerop (_q82))
										{
										  {
										    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										    if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, GT_EXPR, LE_EXPR))
										      return true;
										  }
									        }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
							case LE_EXPR:
							  {
							    tree _q90 = TREE_OPERAND (_q80, 0);
							    if ((TREE_CODE (_q90) == SSA_NAME
							         || is_gimple_min_invariant (_q90)))
							      {
								_q90 = do_valueize (valueize, _q90);
								tree _q91 = TREE_OPERAND (_q80, 1);
								if ((TREE_CODE (_q91) == SSA_NAME
								     || is_gimple_min_invariant (_q91)))
								  {
								    _q91 = do_valueize (valueize, _q91);
								    if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								      {
									if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									  {
									    if (zerop (_q82))
									      {
										{
										  tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										  if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, GT_EXPR, LE_EXPR))
										    return true;
										}
									      }
									  }
								      }
								  }
							      }
							    break;
							  }
						        default:;
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      case UNORDERED_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  if (zerop (_q22))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case COND_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      tree _q82 = gimple_assign_rhs3 (_a3);
						      _q82 = do_valueize (valueize, _q82);
						      switch (TREE_CODE (_q80))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q80))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case ORDERED_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if (tree_swap_operands_p (_q90, _q91))
								        std::swap (_q90, _q91);
								      if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
									{
									  if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									    {
									      if (zerop (_q82))
										{
										  {
										    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										    if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, UNORDERED_EXPR, ORDERED_EXPR))
										      return true;
										  }
									        }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
							case ORDERED_EXPR:
							  {
							    tree _q90 = TREE_OPERAND (_q80, 0);
							    if ((TREE_CODE (_q90) == SSA_NAME
							         || is_gimple_min_invariant (_q90)))
							      {
								_q90 = do_valueize (valueize, _q90);
								tree _q91 = TREE_OPERAND (_q80, 1);
								if ((TREE_CODE (_q91) == SSA_NAME
								     || is_gimple_min_invariant (_q91)))
								  {
								    _q91 = do_valueize (valueize, _q91);
								    if (tree_swap_operands_p (_q90, _q91))
								      std::swap (_q90, _q91);
								    if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								      {
									if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									  {
									    if (zerop (_q82))
									      {
										{
										  tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										  if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, UNORDERED_EXPR, ORDERED_EXPR))
										    return true;
										}
									      }
									  }
								      }
								  }
							      }
							    break;
							  }
						        default:;
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      case ORDERED_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  if (zerop (_q22))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case COND_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      tree _q82 = gimple_assign_rhs3 (_a3);
						      _q82 = do_valueize (valueize, _q82);
						      switch (TREE_CODE (_q80))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q80))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case UNORDERED_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if (tree_swap_operands_p (_q90, _q91))
								        std::swap (_q90, _q91);
								      if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
									{
									  if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									    {
									      if (zerop (_q82))
										{
										  {
										    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										    if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, ORDERED_EXPR, UNORDERED_EXPR))
										      return true;
										  }
									        }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
							case UNORDERED_EXPR:
							  {
							    tree _q90 = TREE_OPERAND (_q80, 0);
							    if ((TREE_CODE (_q90) == SSA_NAME
							         || is_gimple_min_invariant (_q90)))
							      {
								_q90 = do_valueize (valueize, _q90);
								tree _q91 = TREE_OPERAND (_q80, 1);
								if ((TREE_CODE (_q91) == SSA_NAME
								     || is_gimple_min_invariant (_q91)))
								  {
								    _q91 = do_valueize (valueize, _q91);
								    if (tree_swap_operands_p (_q90, _q91))
								      std::swap (_q90, _q91);
								    if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								      {
									if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									  {
									    if (zerop (_q82))
									      {
										{
										  tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										  if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, ORDERED_EXPR, UNORDERED_EXPR))
										    return true;
										}
									      }
									  }
								      }
								  }
							      }
							    break;
							  }
						        default:;
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      case UNLT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (zerop (_q22))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case COND_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      tree _q82 = gimple_assign_rhs3 (_a3);
						      _q82 = do_valueize (valueize, _q82);
						      switch (TREE_CODE (_q80))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q80))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case GE_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
									{
									  if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									    {
									      if (zerop (_q82))
										{
										  {
										    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										    if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, UNLT_EXPR, GE_EXPR))
										      return true;
										  }
									        }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
							case GE_EXPR:
							  {
							    tree _q90 = TREE_OPERAND (_q80, 0);
							    if ((TREE_CODE (_q90) == SSA_NAME
							         || is_gimple_min_invariant (_q90)))
							      {
								_q90 = do_valueize (valueize, _q90);
								tree _q91 = TREE_OPERAND (_q80, 1);
								if ((TREE_CODE (_q91) == SSA_NAME
								     || is_gimple_min_invariant (_q91)))
								  {
								    _q91 = do_valueize (valueize, _q91);
								    if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								      {
									if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									  {
									    if (zerop (_q82))
									      {
										{
										  tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										  if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, UNLT_EXPR, GE_EXPR))
										    return true;
										}
									      }
									  }
								      }
								  }
							      }
							    break;
							  }
						        default:;
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      case UNLE_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (zerop (_q22))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case COND_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      tree _q82 = gimple_assign_rhs3 (_a3);
						      _q82 = do_valueize (valueize, _q82);
						      switch (TREE_CODE (_q80))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q80))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case GT_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
									{
									  if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									    {
									      if (zerop (_q82))
										{
										  {
										    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										    if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, UNLE_EXPR, GT_EXPR))
										      return true;
										  }
									        }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
							case GT_EXPR:
							  {
							    tree _q90 = TREE_OPERAND (_q80, 0);
							    if ((TREE_CODE (_q90) == SSA_NAME
							         || is_gimple_min_invariant (_q90)))
							      {
								_q90 = do_valueize (valueize, _q90);
								tree _q91 = TREE_OPERAND (_q80, 1);
								if ((TREE_CODE (_q91) == SSA_NAME
								     || is_gimple_min_invariant (_q91)))
								  {
								    _q91 = do_valueize (valueize, _q91);
								    if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								      {
									if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									  {
									    if (zerop (_q82))
									      {
										{
										  tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										  if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, UNLE_EXPR, GT_EXPR))
										    return true;
										}
									      }
									  }
								      }
								  }
							      }
							    break;
							  }
						        default:;
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      case UNGT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (zerop (_q22))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case COND_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      tree _q82 = gimple_assign_rhs3 (_a3);
						      _q82 = do_valueize (valueize, _q82);
						      switch (TREE_CODE (_q80))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q80))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case LE_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
									{
									  if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									    {
									      if (zerop (_q82))
										{
										  {
										    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										    if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, UNGT_EXPR, LE_EXPR))
										      return true;
										  }
									        }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
							case LE_EXPR:
							  {
							    tree _q90 = TREE_OPERAND (_q80, 0);
							    if ((TREE_CODE (_q90) == SSA_NAME
							         || is_gimple_min_invariant (_q90)))
							      {
								_q90 = do_valueize (valueize, _q90);
								tree _q91 = TREE_OPERAND (_q80, 1);
								if ((TREE_CODE (_q91) == SSA_NAME
								     || is_gimple_min_invariant (_q91)))
								  {
								    _q91 = do_valueize (valueize, _q91);
								    if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								      {
									if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									  {
									    if (zerop (_q82))
									      {
										{
										  tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										  if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, UNGT_EXPR, LE_EXPR))
										    return true;
										}
									      }
									  }
								      }
								  }
							      }
							    break;
							  }
						        default:;
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      case UNGE_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (zerop (_q22))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case COND_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      tree _q82 = gimple_assign_rhs3 (_a3);
						      _q82 = do_valueize (valueize, _q82);
						      switch (TREE_CODE (_q80))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q80))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case LT_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
									{
									  if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									    {
									      if (zerop (_q82))
										{
										  {
										    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										    if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, UNGE_EXPR, LT_EXPR))
										      return true;
										  }
									        }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
							case LT_EXPR:
							  {
							    tree _q90 = TREE_OPERAND (_q80, 0);
							    if ((TREE_CODE (_q90) == SSA_NAME
							         || is_gimple_min_invariant (_q90)))
							      {
								_q90 = do_valueize (valueize, _q90);
								tree _q91 = TREE_OPERAND (_q80, 1);
								if ((TREE_CODE (_q91) == SSA_NAME
								     || is_gimple_min_invariant (_q91)))
								  {
								    _q91 = do_valueize (valueize, _q91);
								    if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								      {
									if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									  {
									    if (zerop (_q82))
									      {
										{
										  tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										  if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, UNGE_EXPR, LT_EXPR))
										    return true;
										}
									      }
									  }
								      }
								  }
							      }
							    break;
							  }
						        default:;
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      case UNEQ_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  if (zerop (_q22))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case COND_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      tree _q82 = gimple_assign_rhs3 (_a3);
						      _q82 = do_valueize (valueize, _q82);
						      switch (TREE_CODE (_q80))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q80))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case LTGT_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if (tree_swap_operands_p (_q90, _q91))
								        std::swap (_q90, _q91);
								      if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
									{
									  if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									    {
									      if (zerop (_q82))
										{
										  {
										    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										    if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, UNEQ_EXPR, LTGT_EXPR))
										      return true;
										  }
									        }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
							case LTGT_EXPR:
							  {
							    tree _q90 = TREE_OPERAND (_q80, 0);
							    if ((TREE_CODE (_q90) == SSA_NAME
							         || is_gimple_min_invariant (_q90)))
							      {
								_q90 = do_valueize (valueize, _q90);
								tree _q91 = TREE_OPERAND (_q80, 1);
								if ((TREE_CODE (_q91) == SSA_NAME
								     || is_gimple_min_invariant (_q91)))
								  {
								    _q91 = do_valueize (valueize, _q91);
								    if (tree_swap_operands_p (_q90, _q91))
								      std::swap (_q90, _q91);
								    if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								      {
									if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									  {
									    if (zerop (_q82))
									      {
										{
										  tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										  if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, UNEQ_EXPR, LTGT_EXPR))
										    return true;
										}
									      }
									  }
								      }
								  }
							      }
							    break;
							  }
						        default:;
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      case LTGT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  if (zerop (_q22))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case COND_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      tree _q82 = gimple_assign_rhs3 (_a3);
						      _q82 = do_valueize (valueize, _q82);
						      switch (TREE_CODE (_q80))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q80))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case UNEQ_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if (tree_swap_operands_p (_q90, _q91))
								        std::swap (_q90, _q91);
								      if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
									{
									  if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									    {
									      if (zerop (_q82))
										{
										  {
										    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										    if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, LTGT_EXPR, UNEQ_EXPR))
										      return true;
										  }
									        }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
							case UNEQ_EXPR:
							  {
							    tree _q90 = TREE_OPERAND (_q80, 0);
							    if ((TREE_CODE (_q90) == SSA_NAME
							         || is_gimple_min_invariant (_q90)))
							      {
								_q90 = do_valueize (valueize, _q90);
								tree _q91 = TREE_OPERAND (_q80, 1);
								if ((TREE_CODE (_q91) == SSA_NAME
								     || is_gimple_min_invariant (_q91)))
								  {
								    _q91 = do_valueize (valueize, _q91);
								    if (tree_swap_operands_p (_q90, _q91))
								      std::swap (_q90, _q91);
								    if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								      {
									if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									  {
									    if (zerop (_q82))
									      {
										{
										  tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										  if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, LTGT_EXPR, UNEQ_EXPR))
										    return true;
										}
									      }
									  }
								      }
								  }
							      }
							    break;
							  }
						        default:;
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    case LT_EXPR:
		      {
			tree _q30 = TREE_OPERAND (_q20, 0);
			if ((TREE_CODE (_q30) == SSA_NAME
			     || is_gimple_min_invariant (_q30)))
			  {
			    _q30 = do_valueize (valueize, _q30);
			    tree _q31 = TREE_OPERAND (_q20, 1);
			    if ((TREE_CODE (_q31) == SSA_NAME
			         || is_gimple_min_invariant (_q31)))
			      {
				_q31 = do_valueize (valueize, _q31);
				if (zerop (_q22))
				  {
				    switch (TREE_CODE (_p1))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p1))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case COND_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    tree _q82 = gimple_assign_rhs3 (_a2);
						    _q82 = do_valueize (valueize, _q82);
						    switch (TREE_CODE (_q80))
						      {
						      case SSA_NAME:
						        if (gimple *_d3 = get_def (valueize, _q80))
						          {
							    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							      switch (gimple_assign_rhs_code (_a3))
								{
								case GE_EXPR:
								  {
								    tree _q90 = gimple_assign_rhs1 (_a3);
								    _q90 = do_valueize (valueize, _q90);
								    tree _q91 = gimple_assign_rhs2 (_a3);
								    _q91 = do_valueize (valueize, _q91);
								    if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								      {
									if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									  {
									    if (zerop (_q82))
									      {
										{
										  tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										  if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, LT_EXPR, GE_EXPR))
										    return true;
										}
									      }
									  }
								      }
								    break;
								  }
								default:;
								}
						          }
						        break;
						      case GE_EXPR:
						        {
							  tree _q90 = TREE_OPERAND (_q80, 0);
							  if ((TREE_CODE (_q90) == SSA_NAME
							       || is_gimple_min_invariant (_q90)))
							    {
							      _q90 = do_valueize (valueize, _q90);
							      tree _q91 = TREE_OPERAND (_q80, 1);
							      if ((TREE_CODE (_q91) == SSA_NAME
							           || is_gimple_min_invariant (_q91)))
							        {
								  _q91 = do_valueize (valueize, _q91);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									{
									  if (zerop (_q82))
									    {
									      {
										tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, LT_EXPR, GE_EXPR))
										  return true;
									      }
									    }
								        }
								    }
							        }
							    }
						          break;
						        }
						      default:;
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			      }
			  }
		        break;
		      }
		    case LE_EXPR:
		      {
			tree _q30 = TREE_OPERAND (_q20, 0);
			if ((TREE_CODE (_q30) == SSA_NAME
			     || is_gimple_min_invariant (_q30)))
			  {
			    _q30 = do_valueize (valueize, _q30);
			    tree _q31 = TREE_OPERAND (_q20, 1);
			    if ((TREE_CODE (_q31) == SSA_NAME
			         || is_gimple_min_invariant (_q31)))
			      {
				_q31 = do_valueize (valueize, _q31);
				if (zerop (_q22))
				  {
				    switch (TREE_CODE (_p1))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p1))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case COND_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    tree _q82 = gimple_assign_rhs3 (_a2);
						    _q82 = do_valueize (valueize, _q82);
						    switch (TREE_CODE (_q80))
						      {
						      case SSA_NAME:
						        if (gimple *_d3 = get_def (valueize, _q80))
						          {
							    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							      switch (gimple_assign_rhs_code (_a3))
								{
								case GT_EXPR:
								  {
								    tree _q90 = gimple_assign_rhs1 (_a3);
								    _q90 = do_valueize (valueize, _q90);
								    tree _q91 = gimple_assign_rhs2 (_a3);
								    _q91 = do_valueize (valueize, _q91);
								    if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								      {
									if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									  {
									    if (zerop (_q82))
									      {
										{
										  tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										  if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, LE_EXPR, GT_EXPR))
										    return true;
										}
									      }
									  }
								      }
								    break;
								  }
								default:;
								}
						          }
						        break;
						      case GT_EXPR:
						        {
							  tree _q90 = TREE_OPERAND (_q80, 0);
							  if ((TREE_CODE (_q90) == SSA_NAME
							       || is_gimple_min_invariant (_q90)))
							    {
							      _q90 = do_valueize (valueize, _q90);
							      tree _q91 = TREE_OPERAND (_q80, 1);
							      if ((TREE_CODE (_q91) == SSA_NAME
							           || is_gimple_min_invariant (_q91)))
							        {
								  _q91 = do_valueize (valueize, _q91);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									{
									  if (zerop (_q82))
									    {
									      {
										tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, LE_EXPR, GT_EXPR))
										  return true;
									      }
									    }
								        }
								    }
							        }
							    }
						          break;
						        }
						      default:;
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			      }
			  }
		        break;
		      }
		    case EQ_EXPR:
		      {
			tree _q30 = TREE_OPERAND (_q20, 0);
			if ((TREE_CODE (_q30) == SSA_NAME
			     || is_gimple_min_invariant (_q30)))
			  {
			    _q30 = do_valueize (valueize, _q30);
			    tree _q31 = TREE_OPERAND (_q20, 1);
			    if ((TREE_CODE (_q31) == SSA_NAME
			         || is_gimple_min_invariant (_q31)))
			      {
				_q31 = do_valueize (valueize, _q31);
				if (tree_swap_operands_p (_q30, _q31))
				  std::swap (_q30, _q31);
				if (zerop (_q22))
				  {
				    switch (TREE_CODE (_p1))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p1))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case COND_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    tree _q82 = gimple_assign_rhs3 (_a2);
						    _q82 = do_valueize (valueize, _q82);
						    switch (TREE_CODE (_q80))
						      {
						      case SSA_NAME:
						        if (gimple *_d3 = get_def (valueize, _q80))
						          {
							    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							      switch (gimple_assign_rhs_code (_a3))
								{
								case NE_EXPR:
								  {
								    tree _q90 = gimple_assign_rhs1 (_a3);
								    _q90 = do_valueize (valueize, _q90);
								    tree _q91 = gimple_assign_rhs2 (_a3);
								    _q91 = do_valueize (valueize, _q91);
								    if (tree_swap_operands_p (_q90, _q91))
								      std::swap (_q90, _q91);
								    if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								      {
									if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									  {
									    if (zerop (_q82))
									      {
										{
										  tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										  if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, EQ_EXPR, NE_EXPR))
										    return true;
										}
									      }
									  }
								      }
								    break;
								  }
								default:;
								}
						          }
						        break;
						      case NE_EXPR:
						        {
							  tree _q90 = TREE_OPERAND (_q80, 0);
							  if ((TREE_CODE (_q90) == SSA_NAME
							       || is_gimple_min_invariant (_q90)))
							    {
							      _q90 = do_valueize (valueize, _q90);
							      tree _q91 = TREE_OPERAND (_q80, 1);
							      if ((TREE_CODE (_q91) == SSA_NAME
							           || is_gimple_min_invariant (_q91)))
							        {
								  _q91 = do_valueize (valueize, _q91);
								  if (tree_swap_operands_p (_q90, _q91))
								    std::swap (_q90, _q91);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									{
									  if (zerop (_q82))
									    {
									      {
										tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, EQ_EXPR, NE_EXPR))
										  return true;
									      }
									    }
								        }
								    }
							        }
							    }
						          break;
						        }
						      default:;
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			      }
			  }
		        break;
		      }
		    case NE_EXPR:
		      {
			tree _q30 = TREE_OPERAND (_q20, 0);
			if ((TREE_CODE (_q30) == SSA_NAME
			     || is_gimple_min_invariant (_q30)))
			  {
			    _q30 = do_valueize (valueize, _q30);
			    tree _q31 = TREE_OPERAND (_q20, 1);
			    if ((TREE_CODE (_q31) == SSA_NAME
			         || is_gimple_min_invariant (_q31)))
			      {
				_q31 = do_valueize (valueize, _q31);
				if (tree_swap_operands_p (_q30, _q31))
				  std::swap (_q30, _q31);
				if (zerop (_q22))
				  {
				    switch (TREE_CODE (_p1))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p1))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case COND_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    tree _q82 = gimple_assign_rhs3 (_a2);
						    _q82 = do_valueize (valueize, _q82);
						    switch (TREE_CODE (_q80))
						      {
						      case SSA_NAME:
						        if (gimple *_d3 = get_def (valueize, _q80))
						          {
							    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							      switch (gimple_assign_rhs_code (_a3))
								{
								case EQ_EXPR:
								  {
								    tree _q90 = gimple_assign_rhs1 (_a3);
								    _q90 = do_valueize (valueize, _q90);
								    tree _q91 = gimple_assign_rhs2 (_a3);
								    _q91 = do_valueize (valueize, _q91);
								    if (tree_swap_operands_p (_q90, _q91))
								      std::swap (_q90, _q91);
								    if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								      {
									if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									  {
									    if (zerop (_q82))
									      {
										{
										  tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										  if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, NE_EXPR, EQ_EXPR))
										    return true;
										}
									      }
									  }
								      }
								    break;
								  }
								default:;
								}
						          }
						        break;
						      case EQ_EXPR:
						        {
							  tree _q90 = TREE_OPERAND (_q80, 0);
							  if ((TREE_CODE (_q90) == SSA_NAME
							       || is_gimple_min_invariant (_q90)))
							    {
							      _q90 = do_valueize (valueize, _q90);
							      tree _q91 = TREE_OPERAND (_q80, 1);
							      if ((TREE_CODE (_q91) == SSA_NAME
							           || is_gimple_min_invariant (_q91)))
							        {
								  _q91 = do_valueize (valueize, _q91);
								  if (tree_swap_operands_p (_q90, _q91))
								    std::swap (_q90, _q91);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									{
									  if (zerop (_q82))
									    {
									      {
										tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, NE_EXPR, EQ_EXPR))
										  return true;
									      }
									    }
								        }
								    }
							        }
							    }
						          break;
						        }
						      default:;
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			      }
			  }
		        break;
		      }
		    case GE_EXPR:
		      {
			tree _q30 = TREE_OPERAND (_q20, 0);
			if ((TREE_CODE (_q30) == SSA_NAME
			     || is_gimple_min_invariant (_q30)))
			  {
			    _q30 = do_valueize (valueize, _q30);
			    tree _q31 = TREE_OPERAND (_q20, 1);
			    if ((TREE_CODE (_q31) == SSA_NAME
			         || is_gimple_min_invariant (_q31)))
			      {
				_q31 = do_valueize (valueize, _q31);
				if (zerop (_q22))
				  {
				    switch (TREE_CODE (_p1))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p1))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case COND_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    tree _q82 = gimple_assign_rhs3 (_a2);
						    _q82 = do_valueize (valueize, _q82);
						    switch (TREE_CODE (_q80))
						      {
						      case SSA_NAME:
						        if (gimple *_d3 = get_def (valueize, _q80))
						          {
							    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							      switch (gimple_assign_rhs_code (_a3))
								{
								case LT_EXPR:
								  {
								    tree _q90 = gimple_assign_rhs1 (_a3);
								    _q90 = do_valueize (valueize, _q90);
								    tree _q91 = gimple_assign_rhs2 (_a3);
								    _q91 = do_valueize (valueize, _q91);
								    if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								      {
									if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									  {
									    if (zerop (_q82))
									      {
										{
										  tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										  if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, GE_EXPR, LT_EXPR))
										    return true;
										}
									      }
									  }
								      }
								    break;
								  }
								default:;
								}
						          }
						        break;
						      case LT_EXPR:
						        {
							  tree _q90 = TREE_OPERAND (_q80, 0);
							  if ((TREE_CODE (_q90) == SSA_NAME
							       || is_gimple_min_invariant (_q90)))
							    {
							      _q90 = do_valueize (valueize, _q90);
							      tree _q91 = TREE_OPERAND (_q80, 1);
							      if ((TREE_CODE (_q91) == SSA_NAME
							           || is_gimple_min_invariant (_q91)))
							        {
								  _q91 = do_valueize (valueize, _q91);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									{
									  if (zerop (_q82))
									    {
									      {
										tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, GE_EXPR, LT_EXPR))
										  return true;
									      }
									    }
								        }
								    }
							        }
							    }
						          break;
						        }
						      default:;
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			      }
			  }
		        break;
		      }
		    case GT_EXPR:
		      {
			tree _q30 = TREE_OPERAND (_q20, 0);
			if ((TREE_CODE (_q30) == SSA_NAME
			     || is_gimple_min_invariant (_q30)))
			  {
			    _q30 = do_valueize (valueize, _q30);
			    tree _q31 = TREE_OPERAND (_q20, 1);
			    if ((TREE_CODE (_q31) == SSA_NAME
			         || is_gimple_min_invariant (_q31)))
			      {
				_q31 = do_valueize (valueize, _q31);
				if (zerop (_q22))
				  {
				    switch (TREE_CODE (_p1))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p1))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case COND_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    tree _q82 = gimple_assign_rhs3 (_a2);
						    _q82 = do_valueize (valueize, _q82);
						    switch (TREE_CODE (_q80))
						      {
						      case SSA_NAME:
						        if (gimple *_d3 = get_def (valueize, _q80))
						          {
							    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							      switch (gimple_assign_rhs_code (_a3))
								{
								case LE_EXPR:
								  {
								    tree _q90 = gimple_assign_rhs1 (_a3);
								    _q90 = do_valueize (valueize, _q90);
								    tree _q91 = gimple_assign_rhs2 (_a3);
								    _q91 = do_valueize (valueize, _q91);
								    if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								      {
									if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									  {
									    if (zerop (_q82))
									      {
										{
										  tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										  if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, GT_EXPR, LE_EXPR))
										    return true;
										}
									      }
									  }
								      }
								    break;
								  }
								default:;
								}
						          }
						        break;
						      case LE_EXPR:
						        {
							  tree _q90 = TREE_OPERAND (_q80, 0);
							  if ((TREE_CODE (_q90) == SSA_NAME
							       || is_gimple_min_invariant (_q90)))
							    {
							      _q90 = do_valueize (valueize, _q90);
							      tree _q91 = TREE_OPERAND (_q80, 1);
							      if ((TREE_CODE (_q91) == SSA_NAME
							           || is_gimple_min_invariant (_q91)))
							        {
								  _q91 = do_valueize (valueize, _q91);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									{
									  if (zerop (_q82))
									    {
									      {
										tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, GT_EXPR, LE_EXPR))
										  return true;
									      }
									    }
								        }
								    }
							        }
							    }
						          break;
						        }
						      default:;
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			      }
			  }
		        break;
		      }
		    case UNORDERED_EXPR:
		      {
			tree _q30 = TREE_OPERAND (_q20, 0);
			if ((TREE_CODE (_q30) == SSA_NAME
			     || is_gimple_min_invariant (_q30)))
			  {
			    _q30 = do_valueize (valueize, _q30);
			    tree _q31 = TREE_OPERAND (_q20, 1);
			    if ((TREE_CODE (_q31) == SSA_NAME
			         || is_gimple_min_invariant (_q31)))
			      {
				_q31 = do_valueize (valueize, _q31);
				if (tree_swap_operands_p (_q30, _q31))
				  std::swap (_q30, _q31);
				if (zerop (_q22))
				  {
				    switch (TREE_CODE (_p1))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p1))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case COND_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    tree _q82 = gimple_assign_rhs3 (_a2);
						    _q82 = do_valueize (valueize, _q82);
						    switch (TREE_CODE (_q80))
						      {
						      case SSA_NAME:
						        if (gimple *_d3 = get_def (valueize, _q80))
						          {
							    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							      switch (gimple_assign_rhs_code (_a3))
								{
								case ORDERED_EXPR:
								  {
								    tree _q90 = gimple_assign_rhs1 (_a3);
								    _q90 = do_valueize (valueize, _q90);
								    tree _q91 = gimple_assign_rhs2 (_a3);
								    _q91 = do_valueize (valueize, _q91);
								    if (tree_swap_operands_p (_q90, _q91))
								      std::swap (_q90, _q91);
								    if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								      {
									if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									  {
									    if (zerop (_q82))
									      {
										{
										  tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										  if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, UNORDERED_EXPR, ORDERED_EXPR))
										    return true;
										}
									      }
									  }
								      }
								    break;
								  }
								default:;
								}
						          }
						        break;
						      case ORDERED_EXPR:
						        {
							  tree _q90 = TREE_OPERAND (_q80, 0);
							  if ((TREE_CODE (_q90) == SSA_NAME
							       || is_gimple_min_invariant (_q90)))
							    {
							      _q90 = do_valueize (valueize, _q90);
							      tree _q91 = TREE_OPERAND (_q80, 1);
							      if ((TREE_CODE (_q91) == SSA_NAME
							           || is_gimple_min_invariant (_q91)))
							        {
								  _q91 = do_valueize (valueize, _q91);
								  if (tree_swap_operands_p (_q90, _q91))
								    std::swap (_q90, _q91);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									{
									  if (zerop (_q82))
									    {
									      {
										tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, UNORDERED_EXPR, ORDERED_EXPR))
										  return true;
									      }
									    }
								        }
								    }
							        }
							    }
						          break;
						        }
						      default:;
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			      }
			  }
		        break;
		      }
		    case ORDERED_EXPR:
		      {
			tree _q30 = TREE_OPERAND (_q20, 0);
			if ((TREE_CODE (_q30) == SSA_NAME
			     || is_gimple_min_invariant (_q30)))
			  {
			    _q30 = do_valueize (valueize, _q30);
			    tree _q31 = TREE_OPERAND (_q20, 1);
			    if ((TREE_CODE (_q31) == SSA_NAME
			         || is_gimple_min_invariant (_q31)))
			      {
				_q31 = do_valueize (valueize, _q31);
				if (tree_swap_operands_p (_q30, _q31))
				  std::swap (_q30, _q31);
				if (zerop (_q22))
				  {
				    switch (TREE_CODE (_p1))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p1))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case COND_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    tree _q82 = gimple_assign_rhs3 (_a2);
						    _q82 = do_valueize (valueize, _q82);
						    switch (TREE_CODE (_q80))
						      {
						      case SSA_NAME:
						        if (gimple *_d3 = get_def (valueize, _q80))
						          {
							    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							      switch (gimple_assign_rhs_code (_a3))
								{
								case UNORDERED_EXPR:
								  {
								    tree _q90 = gimple_assign_rhs1 (_a3);
								    _q90 = do_valueize (valueize, _q90);
								    tree _q91 = gimple_assign_rhs2 (_a3);
								    _q91 = do_valueize (valueize, _q91);
								    if (tree_swap_operands_p (_q90, _q91))
								      std::swap (_q90, _q91);
								    if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								      {
									if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									  {
									    if (zerop (_q82))
									      {
										{
										  tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										  if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, ORDERED_EXPR, UNORDERED_EXPR))
										    return true;
										}
									      }
									  }
								      }
								    break;
								  }
								default:;
								}
						          }
						        break;
						      case UNORDERED_EXPR:
						        {
							  tree _q90 = TREE_OPERAND (_q80, 0);
							  if ((TREE_CODE (_q90) == SSA_NAME
							       || is_gimple_min_invariant (_q90)))
							    {
							      _q90 = do_valueize (valueize, _q90);
							      tree _q91 = TREE_OPERAND (_q80, 1);
							      if ((TREE_CODE (_q91) == SSA_NAME
							           || is_gimple_min_invariant (_q91)))
							        {
								  _q91 = do_valueize (valueize, _q91);
								  if (tree_swap_operands_p (_q90, _q91))
								    std::swap (_q90, _q91);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									{
									  if (zerop (_q82))
									    {
									      {
										tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, ORDERED_EXPR, UNORDERED_EXPR))
										  return true;
									      }
									    }
								        }
								    }
							        }
							    }
						          break;
						        }
						      default:;
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			      }
			  }
		        break;
		      }
		    case UNLT_EXPR:
		      {
			tree _q30 = TREE_OPERAND (_q20, 0);
			if ((TREE_CODE (_q30) == SSA_NAME
			     || is_gimple_min_invariant (_q30)))
			  {
			    _q30 = do_valueize (valueize, _q30);
			    tree _q31 = TREE_OPERAND (_q20, 1);
			    if ((TREE_CODE (_q31) == SSA_NAME
			         || is_gimple_min_invariant (_q31)))
			      {
				_q31 = do_valueize (valueize, _q31);
				if (zerop (_q22))
				  {
				    switch (TREE_CODE (_p1))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p1))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case COND_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    tree _q82 = gimple_assign_rhs3 (_a2);
						    _q82 = do_valueize (valueize, _q82);
						    switch (TREE_CODE (_q80))
						      {
						      case SSA_NAME:
						        if (gimple *_d3 = get_def (valueize, _q80))
						          {
							    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							      switch (gimple_assign_rhs_code (_a3))
								{
								case GE_EXPR:
								  {
								    tree _q90 = gimple_assign_rhs1 (_a3);
								    _q90 = do_valueize (valueize, _q90);
								    tree _q91 = gimple_assign_rhs2 (_a3);
								    _q91 = do_valueize (valueize, _q91);
								    if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								      {
									if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									  {
									    if (zerop (_q82))
									      {
										{
										  tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										  if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, UNLT_EXPR, GE_EXPR))
										    return true;
										}
									      }
									  }
								      }
								    break;
								  }
								default:;
								}
						          }
						        break;
						      case GE_EXPR:
						        {
							  tree _q90 = TREE_OPERAND (_q80, 0);
							  if ((TREE_CODE (_q90) == SSA_NAME
							       || is_gimple_min_invariant (_q90)))
							    {
							      _q90 = do_valueize (valueize, _q90);
							      tree _q91 = TREE_OPERAND (_q80, 1);
							      if ((TREE_CODE (_q91) == SSA_NAME
							           || is_gimple_min_invariant (_q91)))
							        {
								  _q91 = do_valueize (valueize, _q91);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									{
									  if (zerop (_q82))
									    {
									      {
										tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, UNLT_EXPR, GE_EXPR))
										  return true;
									      }
									    }
								        }
								    }
							        }
							    }
						          break;
						        }
						      default:;
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			      }
			  }
		        break;
		      }
		    case UNLE_EXPR:
		      {
			tree _q30 = TREE_OPERAND (_q20, 0);
			if ((TREE_CODE (_q30) == SSA_NAME
			     || is_gimple_min_invariant (_q30)))
			  {
			    _q30 = do_valueize (valueize, _q30);
			    tree _q31 = TREE_OPERAND (_q20, 1);
			    if ((TREE_CODE (_q31) == SSA_NAME
			         || is_gimple_min_invariant (_q31)))
			      {
				_q31 = do_valueize (valueize, _q31);
				if (zerop (_q22))
				  {
				    switch (TREE_CODE (_p1))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p1))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case COND_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    tree _q82 = gimple_assign_rhs3 (_a2);
						    _q82 = do_valueize (valueize, _q82);
						    switch (TREE_CODE (_q80))
						      {
						      case SSA_NAME:
						        if (gimple *_d3 = get_def (valueize, _q80))
						          {
							    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							      switch (gimple_assign_rhs_code (_a3))
								{
								case GT_EXPR:
								  {
								    tree _q90 = gimple_assign_rhs1 (_a3);
								    _q90 = do_valueize (valueize, _q90);
								    tree _q91 = gimple_assign_rhs2 (_a3);
								    _q91 = do_valueize (valueize, _q91);
								    if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								      {
									if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									  {
									    if (zerop (_q82))
									      {
										{
										  tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										  if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, UNLE_EXPR, GT_EXPR))
										    return true;
										}
									      }
									  }
								      }
								    break;
								  }
								default:;
								}
						          }
						        break;
						      case GT_EXPR:
						        {
							  tree _q90 = TREE_OPERAND (_q80, 0);
							  if ((TREE_CODE (_q90) == SSA_NAME
							       || is_gimple_min_invariant (_q90)))
							    {
							      _q90 = do_valueize (valueize, _q90);
							      tree _q91 = TREE_OPERAND (_q80, 1);
							      if ((TREE_CODE (_q91) == SSA_NAME
							           || is_gimple_min_invariant (_q91)))
							        {
								  _q91 = do_valueize (valueize, _q91);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									{
									  if (zerop (_q82))
									    {
									      {
										tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, UNLE_EXPR, GT_EXPR))
										  return true;
									      }
									    }
								        }
								    }
							        }
							    }
						          break;
						        }
						      default:;
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			      }
			  }
		        break;
		      }
		    case UNGT_EXPR:
		      {
			tree _q30 = TREE_OPERAND (_q20, 0);
			if ((TREE_CODE (_q30) == SSA_NAME
			     || is_gimple_min_invariant (_q30)))
			  {
			    _q30 = do_valueize (valueize, _q30);
			    tree _q31 = TREE_OPERAND (_q20, 1);
			    if ((TREE_CODE (_q31) == SSA_NAME
			         || is_gimple_min_invariant (_q31)))
			      {
				_q31 = do_valueize (valueize, _q31);
				if (zerop (_q22))
				  {
				    switch (TREE_CODE (_p1))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p1))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case COND_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    tree _q82 = gimple_assign_rhs3 (_a2);
						    _q82 = do_valueize (valueize, _q82);
						    switch (TREE_CODE (_q80))
						      {
						      case SSA_NAME:
						        if (gimple *_d3 = get_def (valueize, _q80))
						          {
							    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							      switch (gimple_assign_rhs_code (_a3))
								{
								case LE_EXPR:
								  {
								    tree _q90 = gimple_assign_rhs1 (_a3);
								    _q90 = do_valueize (valueize, _q90);
								    tree _q91 = gimple_assign_rhs2 (_a3);
								    _q91 = do_valueize (valueize, _q91);
								    if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								      {
									if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									  {
									    if (zerop (_q82))
									      {
										{
										  tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										  if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, UNGT_EXPR, LE_EXPR))
										    return true;
										}
									      }
									  }
								      }
								    break;
								  }
								default:;
								}
						          }
						        break;
						      case LE_EXPR:
						        {
							  tree _q90 = TREE_OPERAND (_q80, 0);
							  if ((TREE_CODE (_q90) == SSA_NAME
							       || is_gimple_min_invariant (_q90)))
							    {
							      _q90 = do_valueize (valueize, _q90);
							      tree _q91 = TREE_OPERAND (_q80, 1);
							      if ((TREE_CODE (_q91) == SSA_NAME
							           || is_gimple_min_invariant (_q91)))
							        {
								  _q91 = do_valueize (valueize, _q91);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									{
									  if (zerop (_q82))
									    {
									      {
										tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, UNGT_EXPR, LE_EXPR))
										  return true;
									      }
									    }
								        }
								    }
							        }
							    }
						          break;
						        }
						      default:;
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			      }
			  }
		        break;
		      }
		    case UNGE_EXPR:
		      {
			tree _q30 = TREE_OPERAND (_q20, 0);
			if ((TREE_CODE (_q30) == SSA_NAME
			     || is_gimple_min_invariant (_q30)))
			  {
			    _q30 = do_valueize (valueize, _q30);
			    tree _q31 = TREE_OPERAND (_q20, 1);
			    if ((TREE_CODE (_q31) == SSA_NAME
			         || is_gimple_min_invariant (_q31)))
			      {
				_q31 = do_valueize (valueize, _q31);
				if (zerop (_q22))
				  {
				    switch (TREE_CODE (_p1))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p1))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case COND_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    tree _q82 = gimple_assign_rhs3 (_a2);
						    _q82 = do_valueize (valueize, _q82);
						    switch (TREE_CODE (_q80))
						      {
						      case SSA_NAME:
						        if (gimple *_d3 = get_def (valueize, _q80))
						          {
							    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							      switch (gimple_assign_rhs_code (_a3))
								{
								case LT_EXPR:
								  {
								    tree _q90 = gimple_assign_rhs1 (_a3);
								    _q90 = do_valueize (valueize, _q90);
								    tree _q91 = gimple_assign_rhs2 (_a3);
								    _q91 = do_valueize (valueize, _q91);
								    if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								      {
									if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									  {
									    if (zerop (_q82))
									      {
										{
										  tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										  if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, UNGE_EXPR, LT_EXPR))
										    return true;
										}
									      }
									  }
								      }
								    break;
								  }
								default:;
								}
						          }
						        break;
						      case LT_EXPR:
						        {
							  tree _q90 = TREE_OPERAND (_q80, 0);
							  if ((TREE_CODE (_q90) == SSA_NAME
							       || is_gimple_min_invariant (_q90)))
							    {
							      _q90 = do_valueize (valueize, _q90);
							      tree _q91 = TREE_OPERAND (_q80, 1);
							      if ((TREE_CODE (_q91) == SSA_NAME
							           || is_gimple_min_invariant (_q91)))
							        {
								  _q91 = do_valueize (valueize, _q91);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									{
									  if (zerop (_q82))
									    {
									      {
										tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, UNGE_EXPR, LT_EXPR))
										  return true;
									      }
									    }
								        }
								    }
							        }
							    }
						          break;
						        }
						      default:;
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			      }
			  }
		        break;
		      }
		    case UNEQ_EXPR:
		      {
			tree _q30 = TREE_OPERAND (_q20, 0);
			if ((TREE_CODE (_q30) == SSA_NAME
			     || is_gimple_min_invariant (_q30)))
			  {
			    _q30 = do_valueize (valueize, _q30);
			    tree _q31 = TREE_OPERAND (_q20, 1);
			    if ((TREE_CODE (_q31) == SSA_NAME
			         || is_gimple_min_invariant (_q31)))
			      {
				_q31 = do_valueize (valueize, _q31);
				if (tree_swap_operands_p (_q30, _q31))
				  std::swap (_q30, _q31);
				if (zerop (_q22))
				  {
				    switch (TREE_CODE (_p1))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p1))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case COND_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    tree _q82 = gimple_assign_rhs3 (_a2);
						    _q82 = do_valueize (valueize, _q82);
						    switch (TREE_CODE (_q80))
						      {
						      case SSA_NAME:
						        if (gimple *_d3 = get_def (valueize, _q80))
						          {
							    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							      switch (gimple_assign_rhs_code (_a3))
								{
								case LTGT_EXPR:
								  {
								    tree _q90 = gimple_assign_rhs1 (_a3);
								    _q90 = do_valueize (valueize, _q90);
								    tree _q91 = gimple_assign_rhs2 (_a3);
								    _q91 = do_valueize (valueize, _q91);
								    if (tree_swap_operands_p (_q90, _q91))
								      std::swap (_q90, _q91);
								    if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								      {
									if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									  {
									    if (zerop (_q82))
									      {
										{
										  tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										  if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, UNEQ_EXPR, LTGT_EXPR))
										    return true;
										}
									      }
									  }
								      }
								    break;
								  }
								default:;
								}
						          }
						        break;
						      case LTGT_EXPR:
						        {
							  tree _q90 = TREE_OPERAND (_q80, 0);
							  if ((TREE_CODE (_q90) == SSA_NAME
							       || is_gimple_min_invariant (_q90)))
							    {
							      _q90 = do_valueize (valueize, _q90);
							      tree _q91 = TREE_OPERAND (_q80, 1);
							      if ((TREE_CODE (_q91) == SSA_NAME
							           || is_gimple_min_invariant (_q91)))
							        {
								  _q91 = do_valueize (valueize, _q91);
								  if (tree_swap_operands_p (_q90, _q91))
								    std::swap (_q90, _q91);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									{
									  if (zerop (_q82))
									    {
									      {
										tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, UNEQ_EXPR, LTGT_EXPR))
										  return true;
									      }
									    }
								        }
								    }
							        }
							    }
						          break;
						        }
						      default:;
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			      }
			  }
		        break;
		      }
		    case LTGT_EXPR:
		      {
			tree _q30 = TREE_OPERAND (_q20, 0);
			if ((TREE_CODE (_q30) == SSA_NAME
			     || is_gimple_min_invariant (_q30)))
			  {
			    _q30 = do_valueize (valueize, _q30);
			    tree _q31 = TREE_OPERAND (_q20, 1);
			    if ((TREE_CODE (_q31) == SSA_NAME
			         || is_gimple_min_invariant (_q31)))
			      {
				_q31 = do_valueize (valueize, _q31);
				if (tree_swap_operands_p (_q30, _q31))
				  std::swap (_q30, _q31);
				if (zerop (_q22))
				  {
				    switch (TREE_CODE (_p1))
				      {
				      case SSA_NAME:
				        if (gimple *_d2 = get_def (valueize, _p1))
				          {
					    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
					      switch (gimple_assign_rhs_code (_a2))
						{
						case COND_EXPR:
						  {
						    tree _q80 = gimple_assign_rhs1 (_a2);
						    _q80 = do_valueize (valueize, _q80);
						    tree _q81 = gimple_assign_rhs2 (_a2);
						    _q81 = do_valueize (valueize, _q81);
						    tree _q82 = gimple_assign_rhs3 (_a2);
						    _q82 = do_valueize (valueize, _q82);
						    switch (TREE_CODE (_q80))
						      {
						      case SSA_NAME:
						        if (gimple *_d3 = get_def (valueize, _q80))
						          {
							    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
							      switch (gimple_assign_rhs_code (_a3))
								{
								case UNEQ_EXPR:
								  {
								    tree _q90 = gimple_assign_rhs1 (_a3);
								    _q90 = do_valueize (valueize, _q90);
								    tree _q91 = gimple_assign_rhs2 (_a3);
								    _q91 = do_valueize (valueize, _q91);
								    if (tree_swap_operands_p (_q90, _q91))
								      std::swap (_q90, _q91);
								    if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								      {
									if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									  {
									    if (zerop (_q82))
									      {
										{
										  tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										  if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, LTGT_EXPR, UNEQ_EXPR))
										    return true;
										}
									      }
									  }
								      }
								    break;
								  }
								default:;
								}
						          }
						        break;
						      case UNEQ_EXPR:
						        {
							  tree _q90 = TREE_OPERAND (_q80, 0);
							  if ((TREE_CODE (_q90) == SSA_NAME
							       || is_gimple_min_invariant (_q90)))
							    {
							      _q90 = do_valueize (valueize, _q90);
							      tree _q91 = TREE_OPERAND (_q80, 1);
							      if ((TREE_CODE (_q91) == SSA_NAME
							           || is_gimple_min_invariant (_q91)))
							        {
								  _q91 = do_valueize (valueize, _q91);
								  if (tree_swap_operands_p (_q90, _q91))
								    std::swap (_q90, _q91);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									{
									  if (zerop (_q82))
									    {
									      {
										tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q80, _q81 };
										if (gimple_simplify_35 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, LTGT_EXPR, UNEQ_EXPR))
										  return true;
									      }
									    }
								        }
								    }
							        }
							    }
						          break;
						        }
						      default:;
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			      }
			  }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case VEC_COND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  tree _q22 = gimple_assign_rhs3 (_a1);
		  _q22 = do_valueize (valueize, _q22);
		  if (integer_zerop (_q22))
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p1))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case VEC_COND_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      tree _q62 = gimple_assign_rhs3 (_a2);
				      _q62 = do_valueize (valueize, _q62);
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  if (integer_zerop (_q61))
					    {
					      {
						tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q62 };
						const enum tree_code op = BIT_IOR_EXPR;
						gimple_seq *lseq = seq;
						if (lseq
						    && (!single_use (captures[0])
						        || !single_use (captures[3])))
						  lseq = NULL;
						if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2038;
						{
						  res_op->set_op (VEC_COND_EXPR, type, 3);
						  res_op->ops[0] = captures[1];
						  res_op->ops[1] = captures[2];
						  res_op->ops[2] = captures[4];
						  res_op->resimplify (lseq, valueize);
						  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1017, __FILE__, __LINE__, true);
						  return true;
						}
next_after_fail2038:;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
		  if (integer_zerop (_q21))
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p1))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case VEC_COND_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      tree _q62 = gimple_assign_rhs3 (_a2);
				      _q62 = do_valueize (valueize, _q62);
				      if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
					{
					  if (integer_zerop (_q62))
					    {
					      {
						tree captures[5] ATTRIBUTE_UNUSED = { _p1, _q20, _q61, _p0, _q22 };
						const enum tree_code op = BIT_IOR_EXPR;
						gimple_seq *lseq = seq;
						if (lseq
						    && (!single_use (captures[0])
						        || !single_use (captures[3])))
						  lseq = NULL;
						if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2039;
						{
						  res_op->set_op (VEC_COND_EXPR, type, 3);
						  res_op->ops[0] = captures[1];
						  res_op->ops[1] = captures[2];
						  res_op->ops[2] = captures[4];
						  res_op->resimplify (lseq, valueize);
						  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1017, __FILE__, __LINE__, true);
						  return true;
						}
next_after_fail2039:;
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case LT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (integer_zerop (_q22))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case VEC_COND_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      tree _q82 = gimple_assign_rhs3 (_a3);
						      _q82 = do_valueize (valueize, _q82);
						      switch (TREE_CODE (_q80))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q80))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case GE_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
									{
									  if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									    {
									      if (integer_zerop (_q82))
										{
										  {
										    tree captures[8] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31, _q21, _p1, _q80, _q81 };
										    if (gimple_simplify_36 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, LT_EXPR, GE_EXPR))
										      return true;
										  }
									        }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      case LE_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (integer_zerop (_q22))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case VEC_COND_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      tree _q82 = gimple_assign_rhs3 (_a3);
						      _q82 = do_valueize (valueize, _q82);
						      switch (TREE_CODE (_q80))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q80))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case GT_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
									{
									  if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									    {
									      if (integer_zerop (_q82))
										{
										  {
										    tree captures[8] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31, _q21, _p1, _q80, _q81 };
										    if (gimple_simplify_36 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, LE_EXPR, GT_EXPR))
										      return true;
										  }
									        }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      case EQ_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  if (integer_zerop (_q22))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case VEC_COND_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      tree _q82 = gimple_assign_rhs3 (_a3);
						      _q82 = do_valueize (valueize, _q82);
						      switch (TREE_CODE (_q80))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q80))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case NE_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if (tree_swap_operands_p (_q90, _q91))
								        std::swap (_q90, _q91);
								      if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
									{
									  if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									    {
									      if (integer_zerop (_q82))
										{
										  {
										    tree captures[8] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31, _q21, _p1, _q80, _q81 };
										    if (gimple_simplify_36 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, EQ_EXPR, NE_EXPR))
										      return true;
										  }
									        }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      case NE_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  if (integer_zerop (_q22))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case VEC_COND_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      tree _q82 = gimple_assign_rhs3 (_a3);
						      _q82 = do_valueize (valueize, _q82);
						      switch (TREE_CODE (_q80))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q80))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case EQ_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if (tree_swap_operands_p (_q90, _q91))
								        std::swap (_q90, _q91);
								      if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
									{
									  if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									    {
									      if (integer_zerop (_q82))
										{
										  {
										    tree captures[8] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31, _q21, _p1, _q80, _q81 };
										    if (gimple_simplify_36 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, NE_EXPR, EQ_EXPR))
										      return true;
										  }
									        }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      case GE_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (integer_zerop (_q22))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case VEC_COND_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      tree _q82 = gimple_assign_rhs3 (_a3);
						      _q82 = do_valueize (valueize, _q82);
						      switch (TREE_CODE (_q80))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q80))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case LT_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
									{
									  if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									    {
									      if (integer_zerop (_q82))
										{
										  {
										    tree captures[8] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31, _q21, _p1, _q80, _q81 };
										    if (gimple_simplify_36 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, GE_EXPR, LT_EXPR))
										      return true;
										  }
									        }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      case GT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (integer_zerop (_q22))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case VEC_COND_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      tree _q82 = gimple_assign_rhs3 (_a3);
						      _q82 = do_valueize (valueize, _q82);
						      switch (TREE_CODE (_q80))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q80))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case LE_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
									{
									  if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									    {
									      if (integer_zerop (_q82))
										{
										  {
										    tree captures[8] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31, _q21, _p1, _q80, _q81 };
										    if (gimple_simplify_36 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, GT_EXPR, LE_EXPR))
										      return true;
										  }
									        }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      case UNORDERED_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  if (integer_zerop (_q22))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case VEC_COND_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      tree _q82 = gimple_assign_rhs3 (_a3);
						      _q82 = do_valueize (valueize, _q82);
						      switch (TREE_CODE (_q80))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q80))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case ORDERED_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if (tree_swap_operands_p (_q90, _q91))
								        std::swap (_q90, _q91);
								      if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
									{
									  if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									    {
									      if (integer_zerop (_q82))
										{
										  {
										    tree captures[8] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31, _q21, _p1, _q80, _q81 };
										    if (gimple_simplify_36 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, UNORDERED_EXPR, ORDERED_EXPR))
										      return true;
										  }
									        }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      case ORDERED_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  if (integer_zerop (_q22))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case VEC_COND_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      tree _q82 = gimple_assign_rhs3 (_a3);
						      _q82 = do_valueize (valueize, _q82);
						      switch (TREE_CODE (_q80))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q80))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case UNORDERED_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if (tree_swap_operands_p (_q90, _q91))
								        std::swap (_q90, _q91);
								      if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
									{
									  if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									    {
									      if (integer_zerop (_q82))
										{
										  {
										    tree captures[8] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31, _q21, _p1, _q80, _q81 };
										    if (gimple_simplify_36 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, ORDERED_EXPR, UNORDERED_EXPR))
										      return true;
										  }
									        }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      case UNLT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (integer_zerop (_q22))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case VEC_COND_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      tree _q82 = gimple_assign_rhs3 (_a3);
						      _q82 = do_valueize (valueize, _q82);
						      switch (TREE_CODE (_q80))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q80))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case GE_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
									{
									  if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									    {
									      if (integer_zerop (_q82))
										{
										  {
										    tree captures[8] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31, _q21, _p1, _q80, _q81 };
										    if (gimple_simplify_36 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, UNLT_EXPR, GE_EXPR))
										      return true;
										  }
									        }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      case UNLE_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (integer_zerop (_q22))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case VEC_COND_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      tree _q82 = gimple_assign_rhs3 (_a3);
						      _q82 = do_valueize (valueize, _q82);
						      switch (TREE_CODE (_q80))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q80))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case GT_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
									{
									  if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									    {
									      if (integer_zerop (_q82))
										{
										  {
										    tree captures[8] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31, _q21, _p1, _q80, _q81 };
										    if (gimple_simplify_36 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, UNLE_EXPR, GT_EXPR))
										      return true;
										  }
									        }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      case UNGT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (integer_zerop (_q22))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case VEC_COND_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      tree _q82 = gimple_assign_rhs3 (_a3);
						      _q82 = do_valueize (valueize, _q82);
						      switch (TREE_CODE (_q80))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q80))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case LE_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
									{
									  if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									    {
									      if (integer_zerop (_q82))
										{
										  {
										    tree captures[8] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31, _q21, _p1, _q80, _q81 };
										    if (gimple_simplify_36 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, UNGT_EXPR, LE_EXPR))
										      return true;
										  }
									        }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      case UNGE_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (integer_zerop (_q22))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case VEC_COND_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      tree _q82 = gimple_assign_rhs3 (_a3);
						      _q82 = do_valueize (valueize, _q82);
						      switch (TREE_CODE (_q80))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q80))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case LT_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
									{
									  if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									    {
									      if (integer_zerop (_q82))
										{
										  {
										    tree captures[8] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31, _q21, _p1, _q80, _q81 };
										    if (gimple_simplify_36 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, UNGE_EXPR, LT_EXPR))
										      return true;
										  }
									        }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      case UNEQ_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  if (integer_zerop (_q22))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case VEC_COND_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      tree _q82 = gimple_assign_rhs3 (_a3);
						      _q82 = do_valueize (valueize, _q82);
						      switch (TREE_CODE (_q80))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q80))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case LTGT_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if (tree_swap_operands_p (_q90, _q91))
								        std::swap (_q90, _q91);
								      if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
									{
									  if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									    {
									      if (integer_zerop (_q82))
										{
										  {
										    tree captures[8] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31, _q21, _p1, _q80, _q81 };
										    if (gimple_simplify_36 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, UNEQ_EXPR, LTGT_EXPR))
										      return true;
										  }
									        }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      case LTGT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  if (integer_zerop (_q22))
				    {
				      switch (TREE_CODE (_p1))
				        {
					case SSA_NAME:
					  if (gimple *_d3 = get_def (valueize, _p1))
					    {
					      if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					        switch (gimple_assign_rhs_code (_a3))
						  {
						  case VEC_COND_EXPR:
						    {
						      tree _q80 = gimple_assign_rhs1 (_a3);
						      _q80 = do_valueize (valueize, _q80);
						      tree _q81 = gimple_assign_rhs2 (_a3);
						      _q81 = do_valueize (valueize, _q81);
						      tree _q82 = gimple_assign_rhs3 (_a3);
						      _q82 = do_valueize (valueize, _q82);
						      switch (TREE_CODE (_q80))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _q80))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case UNEQ_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if (tree_swap_operands_p (_q90, _q91))
								        std::swap (_q90, _q91);
								      if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
									{
									  if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									    {
									      if (integer_zerop (_q82))
										{
										  {
										    tree captures[8] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31, _q21, _p1, _q80, _q81 };
										    if (gimple_simplify_36 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, LTGT_EXPR, UNEQ_EXPR))
										      return true;
										  }
									        }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						      break;
						    }
						  default:;
						  }
					    }
					  break;
				        default:;
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case BIT_AND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_q30))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q30))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case LT_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  switch (TREE_CODE (_q80))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q80))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q90 = gimple_assign_rhs1 (_a5);
										  _q90 = do_valueize (valueize, _q90);
										  switch (TREE_CODE (_q90))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q90))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case GE_EXPR:
											        {
												  tree _q100 = gimple_assign_rhs1 (_a6);
												  _q100 = do_valueize (valueize, _q100);
												  tree _q101 = gimple_assign_rhs2 (_a6);
												  _q101 = do_valueize (valueize, _q101);
												  if ((_q100 == _q40 && ! TREE_SIDE_EFFECTS (_q100)) || (operand_equal_p (_q100, _q40, 0) && types_match (_q100, _q40)))
												    {
												      if ((_q101 == _q41 && ! TREE_SIDE_EFFECTS (_q101)) || (operand_equal_p (_q101, _q41, 0) && types_match (_q101, _q41)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q30, _q40, _q41, _q21, _q90, _q81 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, LT_EXPR, GE_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q81))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q81))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q100 = gimple_assign_rhs1 (_a5);
										  _q100 = do_valueize (valueize, _q100);
										  switch (TREE_CODE (_q100))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q100))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case GE_EXPR:
											        {
												  tree _q110 = gimple_assign_rhs1 (_a6);
												  _q110 = do_valueize (valueize, _q110);
												  tree _q111 = gimple_assign_rhs2 (_a6);
												  _q111 = do_valueize (valueize, _q111);
												  if ((_q110 == _q40 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q40, 0) && types_match (_q110, _q40)))
												    {
												      if ((_q111 == _q41 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q41, 0) && types_match (_q111, _q41)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q30, _q40, _q41, _q21, _q100, _q80 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, LT_EXPR, GE_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case LE_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  switch (TREE_CODE (_q80))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q80))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q90 = gimple_assign_rhs1 (_a5);
										  _q90 = do_valueize (valueize, _q90);
										  switch (TREE_CODE (_q90))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q90))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case GT_EXPR:
											        {
												  tree _q100 = gimple_assign_rhs1 (_a6);
												  _q100 = do_valueize (valueize, _q100);
												  tree _q101 = gimple_assign_rhs2 (_a6);
												  _q101 = do_valueize (valueize, _q101);
												  if ((_q100 == _q40 && ! TREE_SIDE_EFFECTS (_q100)) || (operand_equal_p (_q100, _q40, 0) && types_match (_q100, _q40)))
												    {
												      if ((_q101 == _q41 && ! TREE_SIDE_EFFECTS (_q101)) || (operand_equal_p (_q101, _q41, 0) && types_match (_q101, _q41)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q30, _q40, _q41, _q21, _q90, _q81 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, LE_EXPR, GT_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q81))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q81))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q100 = gimple_assign_rhs1 (_a5);
										  _q100 = do_valueize (valueize, _q100);
										  switch (TREE_CODE (_q100))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q100))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case GT_EXPR:
											        {
												  tree _q110 = gimple_assign_rhs1 (_a6);
												  _q110 = do_valueize (valueize, _q110);
												  tree _q111 = gimple_assign_rhs2 (_a6);
												  _q111 = do_valueize (valueize, _q111);
												  if ((_q110 == _q40 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q40, 0) && types_match (_q110, _q40)))
												    {
												      if ((_q111 == _q41 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q41, 0) && types_match (_q111, _q41)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q30, _q40, _q41, _q21, _q100, _q80 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, LE_EXPR, GT_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case EQ_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  if (tree_swap_operands_p (_q40, _q41))
						    std::swap (_q40, _q41);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  switch (TREE_CODE (_q80))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q80))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q90 = gimple_assign_rhs1 (_a5);
										  _q90 = do_valueize (valueize, _q90);
										  switch (TREE_CODE (_q90))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q90))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case NE_EXPR:
											        {
												  tree _q100 = gimple_assign_rhs1 (_a6);
												  _q100 = do_valueize (valueize, _q100);
												  tree _q101 = gimple_assign_rhs2 (_a6);
												  _q101 = do_valueize (valueize, _q101);
												  if (tree_swap_operands_p (_q100, _q101))
												    std::swap (_q100, _q101);
												  if ((_q100 == _q40 && ! TREE_SIDE_EFFECTS (_q100)) || (operand_equal_p (_q100, _q40, 0) && types_match (_q100, _q40)))
												    {
												      if ((_q101 == _q41 && ! TREE_SIDE_EFFECTS (_q101)) || (operand_equal_p (_q101, _q41, 0) && types_match (_q101, _q41)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q30, _q40, _q41, _q21, _q90, _q81 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q81))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q81))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q100 = gimple_assign_rhs1 (_a5);
										  _q100 = do_valueize (valueize, _q100);
										  switch (TREE_CODE (_q100))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q100))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case NE_EXPR:
											        {
												  tree _q110 = gimple_assign_rhs1 (_a6);
												  _q110 = do_valueize (valueize, _q110);
												  tree _q111 = gimple_assign_rhs2 (_a6);
												  _q111 = do_valueize (valueize, _q111);
												  if (tree_swap_operands_p (_q110, _q111))
												    std::swap (_q110, _q111);
												  if ((_q110 == _q40 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q40, 0) && types_match (_q110, _q40)))
												    {
												      if ((_q111 == _q41 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q41, 0) && types_match (_q111, _q41)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q30, _q40, _q41, _q21, _q100, _q80 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case NE_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  if (tree_swap_operands_p (_q40, _q41))
						    std::swap (_q40, _q41);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  switch (TREE_CODE (_q80))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q80))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q90 = gimple_assign_rhs1 (_a5);
										  _q90 = do_valueize (valueize, _q90);
										  switch (TREE_CODE (_q90))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q90))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case EQ_EXPR:
											        {
												  tree _q100 = gimple_assign_rhs1 (_a6);
												  _q100 = do_valueize (valueize, _q100);
												  tree _q101 = gimple_assign_rhs2 (_a6);
												  _q101 = do_valueize (valueize, _q101);
												  if (tree_swap_operands_p (_q100, _q101))
												    std::swap (_q100, _q101);
												  if ((_q100 == _q40 && ! TREE_SIDE_EFFECTS (_q100)) || (operand_equal_p (_q100, _q40, 0) && types_match (_q100, _q40)))
												    {
												      if ((_q101 == _q41 && ! TREE_SIDE_EFFECTS (_q101)) || (operand_equal_p (_q101, _q41, 0) && types_match (_q101, _q41)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q30, _q40, _q41, _q21, _q90, _q81 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q81))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q81))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q100 = gimple_assign_rhs1 (_a5);
										  _q100 = do_valueize (valueize, _q100);
										  switch (TREE_CODE (_q100))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q100))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case EQ_EXPR:
											        {
												  tree _q110 = gimple_assign_rhs1 (_a6);
												  _q110 = do_valueize (valueize, _q110);
												  tree _q111 = gimple_assign_rhs2 (_a6);
												  _q111 = do_valueize (valueize, _q111);
												  if (tree_swap_operands_p (_q110, _q111))
												    std::swap (_q110, _q111);
												  if ((_q110 == _q40 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q40, 0) && types_match (_q110, _q40)))
												    {
												      if ((_q111 == _q41 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q41, 0) && types_match (_q111, _q41)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q30, _q40, _q41, _q21, _q100, _q80 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case GE_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  switch (TREE_CODE (_q80))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q80))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q90 = gimple_assign_rhs1 (_a5);
										  _q90 = do_valueize (valueize, _q90);
										  switch (TREE_CODE (_q90))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q90))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LT_EXPR:
											        {
												  tree _q100 = gimple_assign_rhs1 (_a6);
												  _q100 = do_valueize (valueize, _q100);
												  tree _q101 = gimple_assign_rhs2 (_a6);
												  _q101 = do_valueize (valueize, _q101);
												  if ((_q100 == _q40 && ! TREE_SIDE_EFFECTS (_q100)) || (operand_equal_p (_q100, _q40, 0) && types_match (_q100, _q40)))
												    {
												      if ((_q101 == _q41 && ! TREE_SIDE_EFFECTS (_q101)) || (operand_equal_p (_q101, _q41, 0) && types_match (_q101, _q41)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q30, _q40, _q41, _q21, _q90, _q81 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, GE_EXPR, LT_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q81))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q81))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q100 = gimple_assign_rhs1 (_a5);
										  _q100 = do_valueize (valueize, _q100);
										  switch (TREE_CODE (_q100))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q100))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LT_EXPR:
											        {
												  tree _q110 = gimple_assign_rhs1 (_a6);
												  _q110 = do_valueize (valueize, _q110);
												  tree _q111 = gimple_assign_rhs2 (_a6);
												  _q111 = do_valueize (valueize, _q111);
												  if ((_q110 == _q40 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q40, 0) && types_match (_q110, _q40)))
												    {
												      if ((_q111 == _q41 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q41, 0) && types_match (_q111, _q41)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q30, _q40, _q41, _q21, _q100, _q80 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, GE_EXPR, LT_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case GT_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  switch (TREE_CODE (_q80))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q80))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q90 = gimple_assign_rhs1 (_a5);
										  _q90 = do_valueize (valueize, _q90);
										  switch (TREE_CODE (_q90))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q90))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LE_EXPR:
											        {
												  tree _q100 = gimple_assign_rhs1 (_a6);
												  _q100 = do_valueize (valueize, _q100);
												  tree _q101 = gimple_assign_rhs2 (_a6);
												  _q101 = do_valueize (valueize, _q101);
												  if ((_q100 == _q40 && ! TREE_SIDE_EFFECTS (_q100)) || (operand_equal_p (_q100, _q40, 0) && types_match (_q100, _q40)))
												    {
												      if ((_q101 == _q41 && ! TREE_SIDE_EFFECTS (_q101)) || (operand_equal_p (_q101, _q41, 0) && types_match (_q101, _q41)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q30, _q40, _q41, _q21, _q90, _q81 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, GT_EXPR, LE_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q81))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q81))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q100 = gimple_assign_rhs1 (_a5);
										  _q100 = do_valueize (valueize, _q100);
										  switch (TREE_CODE (_q100))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q100))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LE_EXPR:
											        {
												  tree _q110 = gimple_assign_rhs1 (_a6);
												  _q110 = do_valueize (valueize, _q110);
												  tree _q111 = gimple_assign_rhs2 (_a6);
												  _q111 = do_valueize (valueize, _q111);
												  if ((_q110 == _q40 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q40, 0) && types_match (_q110, _q40)))
												    {
												      if ((_q111 == _q41 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q41, 0) && types_match (_q111, _q41)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q30, _q40, _q41, _q21, _q100, _q80 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, GT_EXPR, LE_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case UNORDERED_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  if (tree_swap_operands_p (_q40, _q41))
						    std::swap (_q40, _q41);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  switch (TREE_CODE (_q80))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q80))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q90 = gimple_assign_rhs1 (_a5);
										  _q90 = do_valueize (valueize, _q90);
										  switch (TREE_CODE (_q90))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q90))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case ORDERED_EXPR:
											        {
												  tree _q100 = gimple_assign_rhs1 (_a6);
												  _q100 = do_valueize (valueize, _q100);
												  tree _q101 = gimple_assign_rhs2 (_a6);
												  _q101 = do_valueize (valueize, _q101);
												  if (tree_swap_operands_p (_q100, _q101))
												    std::swap (_q100, _q101);
												  if ((_q100 == _q40 && ! TREE_SIDE_EFFECTS (_q100)) || (operand_equal_p (_q100, _q40, 0) && types_match (_q100, _q40)))
												    {
												      if ((_q101 == _q41 && ! TREE_SIDE_EFFECTS (_q101)) || (operand_equal_p (_q101, _q41, 0) && types_match (_q101, _q41)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q30, _q40, _q41, _q21, _q90, _q81 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNORDERED_EXPR, ORDERED_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q81))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q81))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q100 = gimple_assign_rhs1 (_a5);
										  _q100 = do_valueize (valueize, _q100);
										  switch (TREE_CODE (_q100))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q100))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case ORDERED_EXPR:
											        {
												  tree _q110 = gimple_assign_rhs1 (_a6);
												  _q110 = do_valueize (valueize, _q110);
												  tree _q111 = gimple_assign_rhs2 (_a6);
												  _q111 = do_valueize (valueize, _q111);
												  if (tree_swap_operands_p (_q110, _q111))
												    std::swap (_q110, _q111);
												  if ((_q110 == _q40 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q40, 0) && types_match (_q110, _q40)))
												    {
												      if ((_q111 == _q41 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q41, 0) && types_match (_q111, _q41)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q30, _q40, _q41, _q21, _q100, _q80 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNORDERED_EXPR, ORDERED_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case ORDERED_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  if (tree_swap_operands_p (_q40, _q41))
						    std::swap (_q40, _q41);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  switch (TREE_CODE (_q80))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q80))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q90 = gimple_assign_rhs1 (_a5);
										  _q90 = do_valueize (valueize, _q90);
										  switch (TREE_CODE (_q90))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q90))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case UNORDERED_EXPR:
											        {
												  tree _q100 = gimple_assign_rhs1 (_a6);
												  _q100 = do_valueize (valueize, _q100);
												  tree _q101 = gimple_assign_rhs2 (_a6);
												  _q101 = do_valueize (valueize, _q101);
												  if (tree_swap_operands_p (_q100, _q101))
												    std::swap (_q100, _q101);
												  if ((_q100 == _q40 && ! TREE_SIDE_EFFECTS (_q100)) || (operand_equal_p (_q100, _q40, 0) && types_match (_q100, _q40)))
												    {
												      if ((_q101 == _q41 && ! TREE_SIDE_EFFECTS (_q101)) || (operand_equal_p (_q101, _q41, 0) && types_match (_q101, _q41)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q30, _q40, _q41, _q21, _q90, _q81 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, ORDERED_EXPR, UNORDERED_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q81))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q81))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q100 = gimple_assign_rhs1 (_a5);
										  _q100 = do_valueize (valueize, _q100);
										  switch (TREE_CODE (_q100))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q100))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case UNORDERED_EXPR:
											        {
												  tree _q110 = gimple_assign_rhs1 (_a6);
												  _q110 = do_valueize (valueize, _q110);
												  tree _q111 = gimple_assign_rhs2 (_a6);
												  _q111 = do_valueize (valueize, _q111);
												  if (tree_swap_operands_p (_q110, _q111))
												    std::swap (_q110, _q111);
												  if ((_q110 == _q40 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q40, 0) && types_match (_q110, _q40)))
												    {
												      if ((_q111 == _q41 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q41, 0) && types_match (_q111, _q41)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q30, _q40, _q41, _q21, _q100, _q80 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, ORDERED_EXPR, UNORDERED_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case UNLT_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  switch (TREE_CODE (_q80))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q80))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q90 = gimple_assign_rhs1 (_a5);
										  _q90 = do_valueize (valueize, _q90);
										  switch (TREE_CODE (_q90))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q90))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case GE_EXPR:
											        {
												  tree _q100 = gimple_assign_rhs1 (_a6);
												  _q100 = do_valueize (valueize, _q100);
												  tree _q101 = gimple_assign_rhs2 (_a6);
												  _q101 = do_valueize (valueize, _q101);
												  if ((_q100 == _q40 && ! TREE_SIDE_EFFECTS (_q100)) || (operand_equal_p (_q100, _q40, 0) && types_match (_q100, _q40)))
												    {
												      if ((_q101 == _q41 && ! TREE_SIDE_EFFECTS (_q101)) || (operand_equal_p (_q101, _q41, 0) && types_match (_q101, _q41)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q30, _q40, _q41, _q21, _q90, _q81 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNLT_EXPR, GE_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q81))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q81))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q100 = gimple_assign_rhs1 (_a5);
										  _q100 = do_valueize (valueize, _q100);
										  switch (TREE_CODE (_q100))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q100))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case GE_EXPR:
											        {
												  tree _q110 = gimple_assign_rhs1 (_a6);
												  _q110 = do_valueize (valueize, _q110);
												  tree _q111 = gimple_assign_rhs2 (_a6);
												  _q111 = do_valueize (valueize, _q111);
												  if ((_q110 == _q40 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q40, 0) && types_match (_q110, _q40)))
												    {
												      if ((_q111 == _q41 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q41, 0) && types_match (_q111, _q41)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q30, _q40, _q41, _q21, _q100, _q80 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNLT_EXPR, GE_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case UNLE_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  switch (TREE_CODE (_q80))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q80))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q90 = gimple_assign_rhs1 (_a5);
										  _q90 = do_valueize (valueize, _q90);
										  switch (TREE_CODE (_q90))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q90))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case GT_EXPR:
											        {
												  tree _q100 = gimple_assign_rhs1 (_a6);
												  _q100 = do_valueize (valueize, _q100);
												  tree _q101 = gimple_assign_rhs2 (_a6);
												  _q101 = do_valueize (valueize, _q101);
												  if ((_q100 == _q40 && ! TREE_SIDE_EFFECTS (_q100)) || (operand_equal_p (_q100, _q40, 0) && types_match (_q100, _q40)))
												    {
												      if ((_q101 == _q41 && ! TREE_SIDE_EFFECTS (_q101)) || (operand_equal_p (_q101, _q41, 0) && types_match (_q101, _q41)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q30, _q40, _q41, _q21, _q90, _q81 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNLE_EXPR, GT_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q81))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q81))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q100 = gimple_assign_rhs1 (_a5);
										  _q100 = do_valueize (valueize, _q100);
										  switch (TREE_CODE (_q100))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q100))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case GT_EXPR:
											        {
												  tree _q110 = gimple_assign_rhs1 (_a6);
												  _q110 = do_valueize (valueize, _q110);
												  tree _q111 = gimple_assign_rhs2 (_a6);
												  _q111 = do_valueize (valueize, _q111);
												  if ((_q110 == _q40 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q40, 0) && types_match (_q110, _q40)))
												    {
												      if ((_q111 == _q41 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q41, 0) && types_match (_q111, _q41)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q30, _q40, _q41, _q21, _q100, _q80 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNLE_EXPR, GT_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case UNGT_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  switch (TREE_CODE (_q80))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q80))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q90 = gimple_assign_rhs1 (_a5);
										  _q90 = do_valueize (valueize, _q90);
										  switch (TREE_CODE (_q90))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q90))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LE_EXPR:
											        {
												  tree _q100 = gimple_assign_rhs1 (_a6);
												  _q100 = do_valueize (valueize, _q100);
												  tree _q101 = gimple_assign_rhs2 (_a6);
												  _q101 = do_valueize (valueize, _q101);
												  if ((_q100 == _q40 && ! TREE_SIDE_EFFECTS (_q100)) || (operand_equal_p (_q100, _q40, 0) && types_match (_q100, _q40)))
												    {
												      if ((_q101 == _q41 && ! TREE_SIDE_EFFECTS (_q101)) || (operand_equal_p (_q101, _q41, 0) && types_match (_q101, _q41)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q30, _q40, _q41, _q21, _q90, _q81 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNGT_EXPR, LE_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q81))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q81))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q100 = gimple_assign_rhs1 (_a5);
										  _q100 = do_valueize (valueize, _q100);
										  switch (TREE_CODE (_q100))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q100))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LE_EXPR:
											        {
												  tree _q110 = gimple_assign_rhs1 (_a6);
												  _q110 = do_valueize (valueize, _q110);
												  tree _q111 = gimple_assign_rhs2 (_a6);
												  _q111 = do_valueize (valueize, _q111);
												  if ((_q110 == _q40 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q40, 0) && types_match (_q110, _q40)))
												    {
												      if ((_q111 == _q41 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q41, 0) && types_match (_q111, _q41)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q30, _q40, _q41, _q21, _q100, _q80 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNGT_EXPR, LE_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case UNGE_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  switch (TREE_CODE (_q80))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q80))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q90 = gimple_assign_rhs1 (_a5);
										  _q90 = do_valueize (valueize, _q90);
										  switch (TREE_CODE (_q90))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q90))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LT_EXPR:
											        {
												  tree _q100 = gimple_assign_rhs1 (_a6);
												  _q100 = do_valueize (valueize, _q100);
												  tree _q101 = gimple_assign_rhs2 (_a6);
												  _q101 = do_valueize (valueize, _q101);
												  if ((_q100 == _q40 && ! TREE_SIDE_EFFECTS (_q100)) || (operand_equal_p (_q100, _q40, 0) && types_match (_q100, _q40)))
												    {
												      if ((_q101 == _q41 && ! TREE_SIDE_EFFECTS (_q101)) || (operand_equal_p (_q101, _q41, 0) && types_match (_q101, _q41)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q30, _q40, _q41, _q21, _q90, _q81 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNGE_EXPR, LT_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q81))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q81))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q100 = gimple_assign_rhs1 (_a5);
										  _q100 = do_valueize (valueize, _q100);
										  switch (TREE_CODE (_q100))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q100))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LT_EXPR:
											        {
												  tree _q110 = gimple_assign_rhs1 (_a6);
												  _q110 = do_valueize (valueize, _q110);
												  tree _q111 = gimple_assign_rhs2 (_a6);
												  _q111 = do_valueize (valueize, _q111);
												  if ((_q110 == _q40 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q40, 0) && types_match (_q110, _q40)))
												    {
												      if ((_q111 == _q41 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q41, 0) && types_match (_q111, _q41)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q30, _q40, _q41, _q21, _q100, _q80 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNGE_EXPR, LT_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case UNEQ_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  if (tree_swap_operands_p (_q40, _q41))
						    std::swap (_q40, _q41);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  switch (TREE_CODE (_q80))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q80))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q90 = gimple_assign_rhs1 (_a5);
										  _q90 = do_valueize (valueize, _q90);
										  switch (TREE_CODE (_q90))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q90))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LTGT_EXPR:
											        {
												  tree _q100 = gimple_assign_rhs1 (_a6);
												  _q100 = do_valueize (valueize, _q100);
												  tree _q101 = gimple_assign_rhs2 (_a6);
												  _q101 = do_valueize (valueize, _q101);
												  if (tree_swap_operands_p (_q100, _q101))
												    std::swap (_q100, _q101);
												  if ((_q100 == _q40 && ! TREE_SIDE_EFFECTS (_q100)) || (operand_equal_p (_q100, _q40, 0) && types_match (_q100, _q40)))
												    {
												      if ((_q101 == _q41 && ! TREE_SIDE_EFFECTS (_q101)) || (operand_equal_p (_q101, _q41, 0) && types_match (_q101, _q41)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q30, _q40, _q41, _q21, _q90, _q81 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNEQ_EXPR, LTGT_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q81))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q81))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q100 = gimple_assign_rhs1 (_a5);
										  _q100 = do_valueize (valueize, _q100);
										  switch (TREE_CODE (_q100))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q100))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LTGT_EXPR:
											        {
												  tree _q110 = gimple_assign_rhs1 (_a6);
												  _q110 = do_valueize (valueize, _q110);
												  tree _q111 = gimple_assign_rhs2 (_a6);
												  _q111 = do_valueize (valueize, _q111);
												  if (tree_swap_operands_p (_q110, _q111))
												    std::swap (_q110, _q111);
												  if ((_q110 == _q40 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q40, 0) && types_match (_q110, _q40)))
												    {
												      if ((_q111 == _q41 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q41, 0) && types_match (_q111, _q41)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q30, _q40, _q41, _q21, _q100, _q80 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNEQ_EXPR, LTGT_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case LTGT_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  if (tree_swap_operands_p (_q40, _q41))
						    std::swap (_q40, _q41);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  switch (TREE_CODE (_q80))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q80))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q90 = gimple_assign_rhs1 (_a5);
										  _q90 = do_valueize (valueize, _q90);
										  switch (TREE_CODE (_q90))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q90))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case UNEQ_EXPR:
											        {
												  tree _q100 = gimple_assign_rhs1 (_a6);
												  _q100 = do_valueize (valueize, _q100);
												  tree _q101 = gimple_assign_rhs2 (_a6);
												  _q101 = do_valueize (valueize, _q101);
												  if (tree_swap_operands_p (_q100, _q101))
												    std::swap (_q100, _q101);
												  if ((_q100 == _q40 && ! TREE_SIDE_EFFECTS (_q100)) || (operand_equal_p (_q100, _q40, 0) && types_match (_q100, _q40)))
												    {
												      if ((_q101 == _q41 && ! TREE_SIDE_EFFECTS (_q101)) || (operand_equal_p (_q101, _q41, 0) && types_match (_q101, _q41)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q30, _q40, _q41, _q21, _q90, _q81 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, LTGT_EXPR, UNEQ_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q81))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q81))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q100 = gimple_assign_rhs1 (_a5);
										  _q100 = do_valueize (valueize, _q100);
										  switch (TREE_CODE (_q100))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q100))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case UNEQ_EXPR:
											        {
												  tree _q110 = gimple_assign_rhs1 (_a6);
												  _q110 = do_valueize (valueize, _q110);
												  tree _q111 = gimple_assign_rhs2 (_a6);
												  _q111 = do_valueize (valueize, _q111);
												  if (tree_swap_operands_p (_q110, _q111))
												    std::swap (_q110, _q111);
												  if ((_q110 == _q40 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q40, 0) && types_match (_q110, _q40)))
												    {
												      if ((_q111 == _q41 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q41, 0) && types_match (_q111, _q41)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q30, _q40, _q41, _q21, _q100, _q80 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, LTGT_EXPR, UNEQ_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  switch (TREE_CODE (_q40))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q40))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case LT_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  switch (TREE_CODE (_q80))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q80))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q90 = gimple_assign_rhs1 (_a5);
										  _q90 = do_valueize (valueize, _q90);
										  switch (TREE_CODE (_q90))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q90))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case GE_EXPR:
											        {
												  tree _q100 = gimple_assign_rhs1 (_a6);
												  _q100 = do_valueize (valueize, _q100);
												  tree _q101 = gimple_assign_rhs2 (_a6);
												  _q101 = do_valueize (valueize, _q101);
												  if ((_q100 == _q50 && ! TREE_SIDE_EFFECTS (_q100)) || (operand_equal_p (_q100, _q50, 0) && types_match (_q100, _q50)))
												    {
												      if ((_q101 == _q51 && ! TREE_SIDE_EFFECTS (_q101)) || (operand_equal_p (_q101, _q51, 0) && types_match (_q101, _q51)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q40, _q50, _q51, _q20, _q90, _q81 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, LT_EXPR, GE_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q81))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q81))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q100 = gimple_assign_rhs1 (_a5);
										  _q100 = do_valueize (valueize, _q100);
										  switch (TREE_CODE (_q100))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q100))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case GE_EXPR:
											        {
												  tree _q110 = gimple_assign_rhs1 (_a6);
												  _q110 = do_valueize (valueize, _q110);
												  tree _q111 = gimple_assign_rhs2 (_a6);
												  _q111 = do_valueize (valueize, _q111);
												  if ((_q110 == _q50 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q50, 0) && types_match (_q110, _q50)))
												    {
												      if ((_q111 == _q51 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q51, 0) && types_match (_q111, _q51)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q40, _q50, _q51, _q20, _q100, _q80 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, LT_EXPR, GE_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case LE_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  switch (TREE_CODE (_q80))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q80))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q90 = gimple_assign_rhs1 (_a5);
										  _q90 = do_valueize (valueize, _q90);
										  switch (TREE_CODE (_q90))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q90))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case GT_EXPR:
											        {
												  tree _q100 = gimple_assign_rhs1 (_a6);
												  _q100 = do_valueize (valueize, _q100);
												  tree _q101 = gimple_assign_rhs2 (_a6);
												  _q101 = do_valueize (valueize, _q101);
												  if ((_q100 == _q50 && ! TREE_SIDE_EFFECTS (_q100)) || (operand_equal_p (_q100, _q50, 0) && types_match (_q100, _q50)))
												    {
												      if ((_q101 == _q51 && ! TREE_SIDE_EFFECTS (_q101)) || (operand_equal_p (_q101, _q51, 0) && types_match (_q101, _q51)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q40, _q50, _q51, _q20, _q90, _q81 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, LE_EXPR, GT_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q81))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q81))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q100 = gimple_assign_rhs1 (_a5);
										  _q100 = do_valueize (valueize, _q100);
										  switch (TREE_CODE (_q100))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q100))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case GT_EXPR:
											        {
												  tree _q110 = gimple_assign_rhs1 (_a6);
												  _q110 = do_valueize (valueize, _q110);
												  tree _q111 = gimple_assign_rhs2 (_a6);
												  _q111 = do_valueize (valueize, _q111);
												  if ((_q110 == _q50 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q50, 0) && types_match (_q110, _q50)))
												    {
												      if ((_q111 == _q51 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q51, 0) && types_match (_q111, _q51)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q40, _q50, _q51, _q20, _q100, _q80 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, LE_EXPR, GT_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case EQ_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  if (tree_swap_operands_p (_q50, _q51))
						    std::swap (_q50, _q51);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  switch (TREE_CODE (_q80))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q80))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q90 = gimple_assign_rhs1 (_a5);
										  _q90 = do_valueize (valueize, _q90);
										  switch (TREE_CODE (_q90))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q90))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case NE_EXPR:
											        {
												  tree _q100 = gimple_assign_rhs1 (_a6);
												  _q100 = do_valueize (valueize, _q100);
												  tree _q101 = gimple_assign_rhs2 (_a6);
												  _q101 = do_valueize (valueize, _q101);
												  if (tree_swap_operands_p (_q100, _q101))
												    std::swap (_q100, _q101);
												  if ((_q100 == _q50 && ! TREE_SIDE_EFFECTS (_q100)) || (operand_equal_p (_q100, _q50, 0) && types_match (_q100, _q50)))
												    {
												      if ((_q101 == _q51 && ! TREE_SIDE_EFFECTS (_q101)) || (operand_equal_p (_q101, _q51, 0) && types_match (_q101, _q51)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q40, _q50, _q51, _q20, _q90, _q81 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q81))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q81))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q100 = gimple_assign_rhs1 (_a5);
										  _q100 = do_valueize (valueize, _q100);
										  switch (TREE_CODE (_q100))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q100))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case NE_EXPR:
											        {
												  tree _q110 = gimple_assign_rhs1 (_a6);
												  _q110 = do_valueize (valueize, _q110);
												  tree _q111 = gimple_assign_rhs2 (_a6);
												  _q111 = do_valueize (valueize, _q111);
												  if (tree_swap_operands_p (_q110, _q111))
												    std::swap (_q110, _q111);
												  if ((_q110 == _q50 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q50, 0) && types_match (_q110, _q50)))
												    {
												      if ((_q111 == _q51 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q51, 0) && types_match (_q111, _q51)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q40, _q50, _q51, _q20, _q100, _q80 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case NE_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  if (tree_swap_operands_p (_q50, _q51))
						    std::swap (_q50, _q51);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  switch (TREE_CODE (_q80))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q80))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q90 = gimple_assign_rhs1 (_a5);
										  _q90 = do_valueize (valueize, _q90);
										  switch (TREE_CODE (_q90))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q90))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case EQ_EXPR:
											        {
												  tree _q100 = gimple_assign_rhs1 (_a6);
												  _q100 = do_valueize (valueize, _q100);
												  tree _q101 = gimple_assign_rhs2 (_a6);
												  _q101 = do_valueize (valueize, _q101);
												  if (tree_swap_operands_p (_q100, _q101))
												    std::swap (_q100, _q101);
												  if ((_q100 == _q50 && ! TREE_SIDE_EFFECTS (_q100)) || (operand_equal_p (_q100, _q50, 0) && types_match (_q100, _q50)))
												    {
												      if ((_q101 == _q51 && ! TREE_SIDE_EFFECTS (_q101)) || (operand_equal_p (_q101, _q51, 0) && types_match (_q101, _q51)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q40, _q50, _q51, _q20, _q90, _q81 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q81))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q81))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q100 = gimple_assign_rhs1 (_a5);
										  _q100 = do_valueize (valueize, _q100);
										  switch (TREE_CODE (_q100))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q100))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case EQ_EXPR:
											        {
												  tree _q110 = gimple_assign_rhs1 (_a6);
												  _q110 = do_valueize (valueize, _q110);
												  tree _q111 = gimple_assign_rhs2 (_a6);
												  _q111 = do_valueize (valueize, _q111);
												  if (tree_swap_operands_p (_q110, _q111))
												    std::swap (_q110, _q111);
												  if ((_q110 == _q50 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q50, 0) && types_match (_q110, _q50)))
												    {
												      if ((_q111 == _q51 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q51, 0) && types_match (_q111, _q51)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q40, _q50, _q51, _q20, _q100, _q80 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case GE_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  switch (TREE_CODE (_q80))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q80))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q90 = gimple_assign_rhs1 (_a5);
										  _q90 = do_valueize (valueize, _q90);
										  switch (TREE_CODE (_q90))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q90))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LT_EXPR:
											        {
												  tree _q100 = gimple_assign_rhs1 (_a6);
												  _q100 = do_valueize (valueize, _q100);
												  tree _q101 = gimple_assign_rhs2 (_a6);
												  _q101 = do_valueize (valueize, _q101);
												  if ((_q100 == _q50 && ! TREE_SIDE_EFFECTS (_q100)) || (operand_equal_p (_q100, _q50, 0) && types_match (_q100, _q50)))
												    {
												      if ((_q101 == _q51 && ! TREE_SIDE_EFFECTS (_q101)) || (operand_equal_p (_q101, _q51, 0) && types_match (_q101, _q51)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q40, _q50, _q51, _q20, _q90, _q81 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, GE_EXPR, LT_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q81))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q81))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q100 = gimple_assign_rhs1 (_a5);
										  _q100 = do_valueize (valueize, _q100);
										  switch (TREE_CODE (_q100))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q100))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LT_EXPR:
											        {
												  tree _q110 = gimple_assign_rhs1 (_a6);
												  _q110 = do_valueize (valueize, _q110);
												  tree _q111 = gimple_assign_rhs2 (_a6);
												  _q111 = do_valueize (valueize, _q111);
												  if ((_q110 == _q50 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q50, 0) && types_match (_q110, _q50)))
												    {
												      if ((_q111 == _q51 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q51, 0) && types_match (_q111, _q51)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q40, _q50, _q51, _q20, _q100, _q80 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, GE_EXPR, LT_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case GT_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  switch (TREE_CODE (_q80))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q80))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q90 = gimple_assign_rhs1 (_a5);
										  _q90 = do_valueize (valueize, _q90);
										  switch (TREE_CODE (_q90))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q90))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LE_EXPR:
											        {
												  tree _q100 = gimple_assign_rhs1 (_a6);
												  _q100 = do_valueize (valueize, _q100);
												  tree _q101 = gimple_assign_rhs2 (_a6);
												  _q101 = do_valueize (valueize, _q101);
												  if ((_q100 == _q50 && ! TREE_SIDE_EFFECTS (_q100)) || (operand_equal_p (_q100, _q50, 0) && types_match (_q100, _q50)))
												    {
												      if ((_q101 == _q51 && ! TREE_SIDE_EFFECTS (_q101)) || (operand_equal_p (_q101, _q51, 0) && types_match (_q101, _q51)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q40, _q50, _q51, _q20, _q90, _q81 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, GT_EXPR, LE_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q81))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q81))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q100 = gimple_assign_rhs1 (_a5);
										  _q100 = do_valueize (valueize, _q100);
										  switch (TREE_CODE (_q100))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q100))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LE_EXPR:
											        {
												  tree _q110 = gimple_assign_rhs1 (_a6);
												  _q110 = do_valueize (valueize, _q110);
												  tree _q111 = gimple_assign_rhs2 (_a6);
												  _q111 = do_valueize (valueize, _q111);
												  if ((_q110 == _q50 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q50, 0) && types_match (_q110, _q50)))
												    {
												      if ((_q111 == _q51 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q51, 0) && types_match (_q111, _q51)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q40, _q50, _q51, _q20, _q100, _q80 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, GT_EXPR, LE_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case UNORDERED_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  if (tree_swap_operands_p (_q50, _q51))
						    std::swap (_q50, _q51);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  switch (TREE_CODE (_q80))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q80))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q90 = gimple_assign_rhs1 (_a5);
										  _q90 = do_valueize (valueize, _q90);
										  switch (TREE_CODE (_q90))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q90))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case ORDERED_EXPR:
											        {
												  tree _q100 = gimple_assign_rhs1 (_a6);
												  _q100 = do_valueize (valueize, _q100);
												  tree _q101 = gimple_assign_rhs2 (_a6);
												  _q101 = do_valueize (valueize, _q101);
												  if (tree_swap_operands_p (_q100, _q101))
												    std::swap (_q100, _q101);
												  if ((_q100 == _q50 && ! TREE_SIDE_EFFECTS (_q100)) || (operand_equal_p (_q100, _q50, 0) && types_match (_q100, _q50)))
												    {
												      if ((_q101 == _q51 && ! TREE_SIDE_EFFECTS (_q101)) || (operand_equal_p (_q101, _q51, 0) && types_match (_q101, _q51)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q40, _q50, _q51, _q20, _q90, _q81 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNORDERED_EXPR, ORDERED_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q81))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q81))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q100 = gimple_assign_rhs1 (_a5);
										  _q100 = do_valueize (valueize, _q100);
										  switch (TREE_CODE (_q100))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q100))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case ORDERED_EXPR:
											        {
												  tree _q110 = gimple_assign_rhs1 (_a6);
												  _q110 = do_valueize (valueize, _q110);
												  tree _q111 = gimple_assign_rhs2 (_a6);
												  _q111 = do_valueize (valueize, _q111);
												  if (tree_swap_operands_p (_q110, _q111))
												    std::swap (_q110, _q111);
												  if ((_q110 == _q50 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q50, 0) && types_match (_q110, _q50)))
												    {
												      if ((_q111 == _q51 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q51, 0) && types_match (_q111, _q51)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q40, _q50, _q51, _q20, _q100, _q80 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNORDERED_EXPR, ORDERED_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case ORDERED_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  if (tree_swap_operands_p (_q50, _q51))
						    std::swap (_q50, _q51);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  switch (TREE_CODE (_q80))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q80))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q90 = gimple_assign_rhs1 (_a5);
										  _q90 = do_valueize (valueize, _q90);
										  switch (TREE_CODE (_q90))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q90))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case UNORDERED_EXPR:
											        {
												  tree _q100 = gimple_assign_rhs1 (_a6);
												  _q100 = do_valueize (valueize, _q100);
												  tree _q101 = gimple_assign_rhs2 (_a6);
												  _q101 = do_valueize (valueize, _q101);
												  if (tree_swap_operands_p (_q100, _q101))
												    std::swap (_q100, _q101);
												  if ((_q100 == _q50 && ! TREE_SIDE_EFFECTS (_q100)) || (operand_equal_p (_q100, _q50, 0) && types_match (_q100, _q50)))
												    {
												      if ((_q101 == _q51 && ! TREE_SIDE_EFFECTS (_q101)) || (operand_equal_p (_q101, _q51, 0) && types_match (_q101, _q51)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q40, _q50, _q51, _q20, _q90, _q81 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, ORDERED_EXPR, UNORDERED_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q81))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q81))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q100 = gimple_assign_rhs1 (_a5);
										  _q100 = do_valueize (valueize, _q100);
										  switch (TREE_CODE (_q100))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q100))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case UNORDERED_EXPR:
											        {
												  tree _q110 = gimple_assign_rhs1 (_a6);
												  _q110 = do_valueize (valueize, _q110);
												  tree _q111 = gimple_assign_rhs2 (_a6);
												  _q111 = do_valueize (valueize, _q111);
												  if (tree_swap_operands_p (_q110, _q111))
												    std::swap (_q110, _q111);
												  if ((_q110 == _q50 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q50, 0) && types_match (_q110, _q50)))
												    {
												      if ((_q111 == _q51 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q51, 0) && types_match (_q111, _q51)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q40, _q50, _q51, _q20, _q100, _q80 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, ORDERED_EXPR, UNORDERED_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case UNLT_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  switch (TREE_CODE (_q80))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q80))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q90 = gimple_assign_rhs1 (_a5);
										  _q90 = do_valueize (valueize, _q90);
										  switch (TREE_CODE (_q90))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q90))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case GE_EXPR:
											        {
												  tree _q100 = gimple_assign_rhs1 (_a6);
												  _q100 = do_valueize (valueize, _q100);
												  tree _q101 = gimple_assign_rhs2 (_a6);
												  _q101 = do_valueize (valueize, _q101);
												  if ((_q100 == _q50 && ! TREE_SIDE_EFFECTS (_q100)) || (operand_equal_p (_q100, _q50, 0) && types_match (_q100, _q50)))
												    {
												      if ((_q101 == _q51 && ! TREE_SIDE_EFFECTS (_q101)) || (operand_equal_p (_q101, _q51, 0) && types_match (_q101, _q51)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q40, _q50, _q51, _q20, _q90, _q81 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNLT_EXPR, GE_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q81))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q81))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q100 = gimple_assign_rhs1 (_a5);
										  _q100 = do_valueize (valueize, _q100);
										  switch (TREE_CODE (_q100))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q100))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case GE_EXPR:
											        {
												  tree _q110 = gimple_assign_rhs1 (_a6);
												  _q110 = do_valueize (valueize, _q110);
												  tree _q111 = gimple_assign_rhs2 (_a6);
												  _q111 = do_valueize (valueize, _q111);
												  if ((_q110 == _q50 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q50, 0) && types_match (_q110, _q50)))
												    {
												      if ((_q111 == _q51 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q51, 0) && types_match (_q111, _q51)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q40, _q50, _q51, _q20, _q100, _q80 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNLT_EXPR, GE_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case UNLE_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  switch (TREE_CODE (_q80))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q80))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q90 = gimple_assign_rhs1 (_a5);
										  _q90 = do_valueize (valueize, _q90);
										  switch (TREE_CODE (_q90))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q90))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case GT_EXPR:
											        {
												  tree _q100 = gimple_assign_rhs1 (_a6);
												  _q100 = do_valueize (valueize, _q100);
												  tree _q101 = gimple_assign_rhs2 (_a6);
												  _q101 = do_valueize (valueize, _q101);
												  if ((_q100 == _q50 && ! TREE_SIDE_EFFECTS (_q100)) || (operand_equal_p (_q100, _q50, 0) && types_match (_q100, _q50)))
												    {
												      if ((_q101 == _q51 && ! TREE_SIDE_EFFECTS (_q101)) || (operand_equal_p (_q101, _q51, 0) && types_match (_q101, _q51)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q40, _q50, _q51, _q20, _q90, _q81 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNLE_EXPR, GT_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q81))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q81))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q100 = gimple_assign_rhs1 (_a5);
										  _q100 = do_valueize (valueize, _q100);
										  switch (TREE_CODE (_q100))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q100))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case GT_EXPR:
											        {
												  tree _q110 = gimple_assign_rhs1 (_a6);
												  _q110 = do_valueize (valueize, _q110);
												  tree _q111 = gimple_assign_rhs2 (_a6);
												  _q111 = do_valueize (valueize, _q111);
												  if ((_q110 == _q50 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q50, 0) && types_match (_q110, _q50)))
												    {
												      if ((_q111 == _q51 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q51, 0) && types_match (_q111, _q51)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q40, _q50, _q51, _q20, _q100, _q80 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNLE_EXPR, GT_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case UNGT_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  switch (TREE_CODE (_q80))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q80))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q90 = gimple_assign_rhs1 (_a5);
										  _q90 = do_valueize (valueize, _q90);
										  switch (TREE_CODE (_q90))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q90))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LE_EXPR:
											        {
												  tree _q100 = gimple_assign_rhs1 (_a6);
												  _q100 = do_valueize (valueize, _q100);
												  tree _q101 = gimple_assign_rhs2 (_a6);
												  _q101 = do_valueize (valueize, _q101);
												  if ((_q100 == _q50 && ! TREE_SIDE_EFFECTS (_q100)) || (operand_equal_p (_q100, _q50, 0) && types_match (_q100, _q50)))
												    {
												      if ((_q101 == _q51 && ! TREE_SIDE_EFFECTS (_q101)) || (operand_equal_p (_q101, _q51, 0) && types_match (_q101, _q51)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q40, _q50, _q51, _q20, _q90, _q81 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNGT_EXPR, LE_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q81))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q81))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q100 = gimple_assign_rhs1 (_a5);
										  _q100 = do_valueize (valueize, _q100);
										  switch (TREE_CODE (_q100))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q100))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LE_EXPR:
											        {
												  tree _q110 = gimple_assign_rhs1 (_a6);
												  _q110 = do_valueize (valueize, _q110);
												  tree _q111 = gimple_assign_rhs2 (_a6);
												  _q111 = do_valueize (valueize, _q111);
												  if ((_q110 == _q50 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q50, 0) && types_match (_q110, _q50)))
												    {
												      if ((_q111 == _q51 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q51, 0) && types_match (_q111, _q51)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q40, _q50, _q51, _q20, _q100, _q80 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNGT_EXPR, LE_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case UNGE_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  switch (TREE_CODE (_q80))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q80))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q90 = gimple_assign_rhs1 (_a5);
										  _q90 = do_valueize (valueize, _q90);
										  switch (TREE_CODE (_q90))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q90))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LT_EXPR:
											        {
												  tree _q100 = gimple_assign_rhs1 (_a6);
												  _q100 = do_valueize (valueize, _q100);
												  tree _q101 = gimple_assign_rhs2 (_a6);
												  _q101 = do_valueize (valueize, _q101);
												  if ((_q100 == _q50 && ! TREE_SIDE_EFFECTS (_q100)) || (operand_equal_p (_q100, _q50, 0) && types_match (_q100, _q50)))
												    {
												      if ((_q101 == _q51 && ! TREE_SIDE_EFFECTS (_q101)) || (operand_equal_p (_q101, _q51, 0) && types_match (_q101, _q51)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q40, _q50, _q51, _q20, _q90, _q81 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNGE_EXPR, LT_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q81))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q81))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q100 = gimple_assign_rhs1 (_a5);
										  _q100 = do_valueize (valueize, _q100);
										  switch (TREE_CODE (_q100))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q100))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LT_EXPR:
											        {
												  tree _q110 = gimple_assign_rhs1 (_a6);
												  _q110 = do_valueize (valueize, _q110);
												  tree _q111 = gimple_assign_rhs2 (_a6);
												  _q111 = do_valueize (valueize, _q111);
												  if ((_q110 == _q50 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q50, 0) && types_match (_q110, _q50)))
												    {
												      if ((_q111 == _q51 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q51, 0) && types_match (_q111, _q51)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q40, _q50, _q51, _q20, _q100, _q80 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNGE_EXPR, LT_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case UNEQ_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  if (tree_swap_operands_p (_q50, _q51))
						    std::swap (_q50, _q51);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  switch (TREE_CODE (_q80))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q80))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q90 = gimple_assign_rhs1 (_a5);
										  _q90 = do_valueize (valueize, _q90);
										  switch (TREE_CODE (_q90))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q90))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LTGT_EXPR:
											        {
												  tree _q100 = gimple_assign_rhs1 (_a6);
												  _q100 = do_valueize (valueize, _q100);
												  tree _q101 = gimple_assign_rhs2 (_a6);
												  _q101 = do_valueize (valueize, _q101);
												  if (tree_swap_operands_p (_q100, _q101))
												    std::swap (_q100, _q101);
												  if ((_q100 == _q50 && ! TREE_SIDE_EFFECTS (_q100)) || (operand_equal_p (_q100, _q50, 0) && types_match (_q100, _q50)))
												    {
												      if ((_q101 == _q51 && ! TREE_SIDE_EFFECTS (_q101)) || (operand_equal_p (_q101, _q51, 0) && types_match (_q101, _q51)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q40, _q50, _q51, _q20, _q90, _q81 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNEQ_EXPR, LTGT_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q81))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q81))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q100 = gimple_assign_rhs1 (_a5);
										  _q100 = do_valueize (valueize, _q100);
										  switch (TREE_CODE (_q100))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q100))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LTGT_EXPR:
											        {
												  tree _q110 = gimple_assign_rhs1 (_a6);
												  _q110 = do_valueize (valueize, _q110);
												  tree _q111 = gimple_assign_rhs2 (_a6);
												  _q111 = do_valueize (valueize, _q111);
												  if (tree_swap_operands_p (_q110, _q111))
												    std::swap (_q110, _q111);
												  if ((_q110 == _q50 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q50, 0) && types_match (_q110, _q50)))
												    {
												      if ((_q111 == _q51 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q51, 0) && types_match (_q111, _q51)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q40, _q50, _q51, _q20, _q100, _q80 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNEQ_EXPR, LTGT_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case LTGT_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  if (tree_swap_operands_p (_q50, _q51))
						    std::swap (_q50, _q51);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  switch (TREE_CODE (_q80))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q80))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q90 = gimple_assign_rhs1 (_a5);
										  _q90 = do_valueize (valueize, _q90);
										  switch (TREE_CODE (_q90))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q90))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case UNEQ_EXPR:
											        {
												  tree _q100 = gimple_assign_rhs1 (_a6);
												  _q100 = do_valueize (valueize, _q100);
												  tree _q101 = gimple_assign_rhs2 (_a6);
												  _q101 = do_valueize (valueize, _q101);
												  if (tree_swap_operands_p (_q100, _q101))
												    std::swap (_q100, _q101);
												  if ((_q100 == _q50 && ! TREE_SIDE_EFFECTS (_q100)) || (operand_equal_p (_q100, _q50, 0) && types_match (_q100, _q50)))
												    {
												      if ((_q101 == _q51 && ! TREE_SIDE_EFFECTS (_q101)) || (operand_equal_p (_q101, _q51, 0) && types_match (_q101, _q51)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q40, _q50, _q51, _q20, _q90, _q81 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, LTGT_EXPR, UNEQ_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q81))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q81))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      CASE_CONVERT:
									        {
										  tree _q100 = gimple_assign_rhs1 (_a5);
										  _q100 = do_valueize (valueize, _q100);
										  switch (TREE_CODE (_q100))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q100))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case UNEQ_EXPR:
											        {
												  tree _q110 = gimple_assign_rhs1 (_a6);
												  _q110 = do_valueize (valueize, _q110);
												  tree _q111 = gimple_assign_rhs2 (_a6);
												  _q111 = do_valueize (valueize, _q111);
												  if (tree_swap_operands_p (_q110, _q111))
												    std::swap (_q110, _q111);
												  if ((_q110 == _q50 && ! TREE_SIDE_EFFECTS (_q110)) || (operand_equal_p (_q110, _q50, 0) && types_match (_q110, _q50)))
												    {
												      if ((_q111 == _q51 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q51, 0) && types_match (_q111, _q51)))
													{
													  {
													    tree captures[6] ATTRIBUTE_UNUSED = { _q40, _q50, _q51, _q20, _q100, _q80 };
													    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, LTGT_EXPR, UNEQ_EXPR))
													      return true;
													  }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case LT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  switch (TREE_CODE (_q70))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q70))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case GE_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
								    {
								      if ((_q81 == _q31 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q31, 0) && types_match (_q81, _q31)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q70, _q71 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, LT_EXPR, GE_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  switch (TREE_CODE (_q71))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q71))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case GE_EXPR:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a4);
								  _q90 = do_valueize (valueize, _q90);
								  tree _q91 = gimple_assign_rhs2 (_a4);
								  _q91 = do_valueize (valueize, _q91);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q71, _q70 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, LT_EXPR, GE_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case LE_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  switch (TREE_CODE (_q70))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q70))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case GT_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
								    {
								      if ((_q81 == _q31 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q31, 0) && types_match (_q81, _q31)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q70, _q71 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, LE_EXPR, GT_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  switch (TREE_CODE (_q71))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q71))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case GT_EXPR:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a4);
								  _q90 = do_valueize (valueize, _q90);
								  tree _q91 = gimple_assign_rhs2 (_a4);
								  _q91 = do_valueize (valueize, _q91);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q71, _q70 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, LE_EXPR, GT_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case EQ_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  switch (TREE_CODE (_q70))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q70))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case NE_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
								    {
								      if ((_q81 == _q31 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q31, 0) && types_match (_q81, _q31)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q70, _q71 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  switch (TREE_CODE (_q71))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q71))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case NE_EXPR:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a4);
								  _q90 = do_valueize (valueize, _q90);
								  tree _q91 = gimple_assign_rhs2 (_a4);
								  _q91 = do_valueize (valueize, _q91);
								  if (tree_swap_operands_p (_q90, _q91))
								    std::swap (_q90, _q91);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q71, _q70 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case NE_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  switch (TREE_CODE (_q70))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q70))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case EQ_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
								    {
								      if ((_q81 == _q31 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q31, 0) && types_match (_q81, _q31)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q70, _q71 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  switch (TREE_CODE (_q71))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q71))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case EQ_EXPR:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a4);
								  _q90 = do_valueize (valueize, _q90);
								  tree _q91 = gimple_assign_rhs2 (_a4);
								  _q91 = do_valueize (valueize, _q91);
								  if (tree_swap_operands_p (_q90, _q91))
								    std::swap (_q90, _q91);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q71, _q70 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case GE_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  switch (TREE_CODE (_q70))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q70))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case LT_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
								    {
								      if ((_q81 == _q31 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q31, 0) && types_match (_q81, _q31)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q70, _q71 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, GE_EXPR, LT_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  switch (TREE_CODE (_q71))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q71))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case LT_EXPR:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a4);
								  _q90 = do_valueize (valueize, _q90);
								  tree _q91 = gimple_assign_rhs2 (_a4);
								  _q91 = do_valueize (valueize, _q91);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q71, _q70 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, GE_EXPR, LT_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case GT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  switch (TREE_CODE (_q70))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q70))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case LE_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
								    {
								      if ((_q81 == _q31 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q31, 0) && types_match (_q81, _q31)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q70, _q71 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, GT_EXPR, LE_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  switch (TREE_CODE (_q71))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q71))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case LE_EXPR:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a4);
								  _q90 = do_valueize (valueize, _q90);
								  tree _q91 = gimple_assign_rhs2 (_a4);
								  _q91 = do_valueize (valueize, _q91);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q71, _q70 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, GT_EXPR, LE_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case UNORDERED_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  switch (TREE_CODE (_q70))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q70))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case ORDERED_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
								    {
								      if ((_q81 == _q31 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q31, 0) && types_match (_q81, _q31)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q70, _q71 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNORDERED_EXPR, ORDERED_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  switch (TREE_CODE (_q71))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q71))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case ORDERED_EXPR:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a4);
								  _q90 = do_valueize (valueize, _q90);
								  tree _q91 = gimple_assign_rhs2 (_a4);
								  _q91 = do_valueize (valueize, _q91);
								  if (tree_swap_operands_p (_q90, _q91))
								    std::swap (_q90, _q91);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q71, _q70 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNORDERED_EXPR, ORDERED_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case ORDERED_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  switch (TREE_CODE (_q70))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q70))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case UNORDERED_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
								    {
								      if ((_q81 == _q31 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q31, 0) && types_match (_q81, _q31)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q70, _q71 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, ORDERED_EXPR, UNORDERED_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  switch (TREE_CODE (_q71))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q71))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case UNORDERED_EXPR:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a4);
								  _q90 = do_valueize (valueize, _q90);
								  tree _q91 = gimple_assign_rhs2 (_a4);
								  _q91 = do_valueize (valueize, _q91);
								  if (tree_swap_operands_p (_q90, _q91))
								    std::swap (_q90, _q91);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q71, _q70 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, ORDERED_EXPR, UNORDERED_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case UNLT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  switch (TREE_CODE (_q70))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q70))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case GE_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
								    {
								      if ((_q81 == _q31 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q31, 0) && types_match (_q81, _q31)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q70, _q71 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNLT_EXPR, GE_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  switch (TREE_CODE (_q71))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q71))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case GE_EXPR:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a4);
								  _q90 = do_valueize (valueize, _q90);
								  tree _q91 = gimple_assign_rhs2 (_a4);
								  _q91 = do_valueize (valueize, _q91);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q71, _q70 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNLT_EXPR, GE_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case UNLE_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  switch (TREE_CODE (_q70))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q70))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case GT_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
								    {
								      if ((_q81 == _q31 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q31, 0) && types_match (_q81, _q31)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q70, _q71 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNLE_EXPR, GT_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  switch (TREE_CODE (_q71))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q71))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case GT_EXPR:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a4);
								  _q90 = do_valueize (valueize, _q90);
								  tree _q91 = gimple_assign_rhs2 (_a4);
								  _q91 = do_valueize (valueize, _q91);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q71, _q70 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNLE_EXPR, GT_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case UNGT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  switch (TREE_CODE (_q70))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q70))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case LE_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
								    {
								      if ((_q81 == _q31 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q31, 0) && types_match (_q81, _q31)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q70, _q71 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNGT_EXPR, LE_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  switch (TREE_CODE (_q71))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q71))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case LE_EXPR:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a4);
								  _q90 = do_valueize (valueize, _q90);
								  tree _q91 = gimple_assign_rhs2 (_a4);
								  _q91 = do_valueize (valueize, _q91);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q71, _q70 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNGT_EXPR, LE_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case UNGE_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  switch (TREE_CODE (_q70))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q70))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case LT_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
								    {
								      if ((_q81 == _q31 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q31, 0) && types_match (_q81, _q31)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q70, _q71 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNGE_EXPR, LT_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  switch (TREE_CODE (_q71))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q71))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case LT_EXPR:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a4);
								  _q90 = do_valueize (valueize, _q90);
								  tree _q91 = gimple_assign_rhs2 (_a4);
								  _q91 = do_valueize (valueize, _q91);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q71, _q70 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNGE_EXPR, LT_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case UNEQ_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  switch (TREE_CODE (_q70))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q70))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case LTGT_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
								    {
								      if ((_q81 == _q31 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q31, 0) && types_match (_q81, _q31)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q70, _q71 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNEQ_EXPR, LTGT_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  switch (TREE_CODE (_q71))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q71))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case LTGT_EXPR:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a4);
								  _q90 = do_valueize (valueize, _q90);
								  tree _q91 = gimple_assign_rhs2 (_a4);
								  _q91 = do_valueize (valueize, _q91);
								  if (tree_swap_operands_p (_q90, _q91))
								    std::swap (_q90, _q91);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q71, _q70 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNEQ_EXPR, LTGT_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case LTGT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  switch (TREE_CODE (_q70))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q70))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case UNEQ_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  if ((_q80 == _q30 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q30, 0) && types_match (_q80, _q30)))
								    {
								      if ((_q81 == _q31 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q31, 0) && types_match (_q81, _q31)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q70, _q71 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, LTGT_EXPR, UNEQ_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  switch (TREE_CODE (_q71))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q71))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case UNEQ_EXPR:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a4);
								  _q90 = do_valueize (valueize, _q90);
								  tree _q91 = gimple_assign_rhs2 (_a4);
								  _q91 = do_valueize (valueize, _q91);
								  if (tree_swap_operands_p (_q90, _q91))
								    std::swap (_q90, _q91);
								  if ((_q90 == _q30 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q30, 0) && types_match (_q90, _q30)))
								    {
								      if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q20, _q30, _q31, _q21, _q71, _q70 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, LTGT_EXPR, UNEQ_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case LT_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  switch (TREE_CODE (_q70))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q70))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case GE_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
								    {
								      if ((_q81 == _q41 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q41, 0) && types_match (_q81, _q41)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q21, _q40, _q41, _q20, _q70, _q71 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, LT_EXPR, GE_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  switch (TREE_CODE (_q71))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q71))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case GE_EXPR:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a4);
								  _q90 = do_valueize (valueize, _q90);
								  tree _q91 = gimple_assign_rhs2 (_a4);
								  _q91 = do_valueize (valueize, _q91);
								  if ((_q90 == _q40 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q40, 0) && types_match (_q90, _q40)))
								    {
								      if ((_q91 == _q41 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q41, 0) && types_match (_q91, _q41)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q21, _q40, _q41, _q20, _q71, _q70 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, LT_EXPR, GE_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case LE_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  switch (TREE_CODE (_q70))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q70))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case GT_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
								    {
								      if ((_q81 == _q41 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q41, 0) && types_match (_q81, _q41)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q21, _q40, _q41, _q20, _q70, _q71 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, LE_EXPR, GT_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  switch (TREE_CODE (_q71))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q71))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case GT_EXPR:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a4);
								  _q90 = do_valueize (valueize, _q90);
								  tree _q91 = gimple_assign_rhs2 (_a4);
								  _q91 = do_valueize (valueize, _q91);
								  if ((_q90 == _q40 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q40, 0) && types_match (_q90, _q40)))
								    {
								      if ((_q91 == _q41 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q41, 0) && types_match (_q91, _q41)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q21, _q40, _q41, _q20, _q71, _q70 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, LE_EXPR, GT_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case EQ_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  switch (TREE_CODE (_q70))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q70))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case NE_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
								    {
								      if ((_q81 == _q41 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q41, 0) && types_match (_q81, _q41)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q21, _q40, _q41, _q20, _q70, _q71 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  switch (TREE_CODE (_q71))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q71))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case NE_EXPR:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a4);
								  _q90 = do_valueize (valueize, _q90);
								  tree _q91 = gimple_assign_rhs2 (_a4);
								  _q91 = do_valueize (valueize, _q91);
								  if (tree_swap_operands_p (_q90, _q91))
								    std::swap (_q90, _q91);
								  if ((_q90 == _q40 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q40, 0) && types_match (_q90, _q40)))
								    {
								      if ((_q91 == _q41 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q41, 0) && types_match (_q91, _q41)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q21, _q40, _q41, _q20, _q71, _q70 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case NE_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  switch (TREE_CODE (_q70))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q70))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case EQ_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
								    {
								      if ((_q81 == _q41 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q41, 0) && types_match (_q81, _q41)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q21, _q40, _q41, _q20, _q70, _q71 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  switch (TREE_CODE (_q71))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q71))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case EQ_EXPR:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a4);
								  _q90 = do_valueize (valueize, _q90);
								  tree _q91 = gimple_assign_rhs2 (_a4);
								  _q91 = do_valueize (valueize, _q91);
								  if (tree_swap_operands_p (_q90, _q91))
								    std::swap (_q90, _q91);
								  if ((_q90 == _q40 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q40, 0) && types_match (_q90, _q40)))
								    {
								      if ((_q91 == _q41 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q41, 0) && types_match (_q91, _q41)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q21, _q40, _q41, _q20, _q71, _q70 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case GE_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  switch (TREE_CODE (_q70))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q70))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case LT_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
								    {
								      if ((_q81 == _q41 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q41, 0) && types_match (_q81, _q41)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q21, _q40, _q41, _q20, _q70, _q71 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, GE_EXPR, LT_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  switch (TREE_CODE (_q71))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q71))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case LT_EXPR:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a4);
								  _q90 = do_valueize (valueize, _q90);
								  tree _q91 = gimple_assign_rhs2 (_a4);
								  _q91 = do_valueize (valueize, _q91);
								  if ((_q90 == _q40 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q40, 0) && types_match (_q90, _q40)))
								    {
								      if ((_q91 == _q41 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q41, 0) && types_match (_q91, _q41)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q21, _q40, _q41, _q20, _q71, _q70 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, GE_EXPR, LT_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case GT_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  switch (TREE_CODE (_q70))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q70))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case LE_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
								    {
								      if ((_q81 == _q41 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q41, 0) && types_match (_q81, _q41)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q21, _q40, _q41, _q20, _q70, _q71 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, GT_EXPR, LE_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  switch (TREE_CODE (_q71))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q71))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case LE_EXPR:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a4);
								  _q90 = do_valueize (valueize, _q90);
								  tree _q91 = gimple_assign_rhs2 (_a4);
								  _q91 = do_valueize (valueize, _q91);
								  if ((_q90 == _q40 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q40, 0) && types_match (_q90, _q40)))
								    {
								      if ((_q91 == _q41 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q41, 0) && types_match (_q91, _q41)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q21, _q40, _q41, _q20, _q71, _q70 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, GT_EXPR, LE_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case UNORDERED_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  switch (TREE_CODE (_q70))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q70))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case ORDERED_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
								    {
								      if ((_q81 == _q41 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q41, 0) && types_match (_q81, _q41)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q21, _q40, _q41, _q20, _q70, _q71 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNORDERED_EXPR, ORDERED_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  switch (TREE_CODE (_q71))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q71))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case ORDERED_EXPR:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a4);
								  _q90 = do_valueize (valueize, _q90);
								  tree _q91 = gimple_assign_rhs2 (_a4);
								  _q91 = do_valueize (valueize, _q91);
								  if (tree_swap_operands_p (_q90, _q91))
								    std::swap (_q90, _q91);
								  if ((_q90 == _q40 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q40, 0) && types_match (_q90, _q40)))
								    {
								      if ((_q91 == _q41 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q41, 0) && types_match (_q91, _q41)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q21, _q40, _q41, _q20, _q71, _q70 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNORDERED_EXPR, ORDERED_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case ORDERED_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  switch (TREE_CODE (_q70))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q70))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case UNORDERED_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
								    {
								      if ((_q81 == _q41 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q41, 0) && types_match (_q81, _q41)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q21, _q40, _q41, _q20, _q70, _q71 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, ORDERED_EXPR, UNORDERED_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  switch (TREE_CODE (_q71))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q71))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case UNORDERED_EXPR:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a4);
								  _q90 = do_valueize (valueize, _q90);
								  tree _q91 = gimple_assign_rhs2 (_a4);
								  _q91 = do_valueize (valueize, _q91);
								  if (tree_swap_operands_p (_q90, _q91))
								    std::swap (_q90, _q91);
								  if ((_q90 == _q40 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q40, 0) && types_match (_q90, _q40)))
								    {
								      if ((_q91 == _q41 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q41, 0) && types_match (_q91, _q41)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q21, _q40, _q41, _q20, _q71, _q70 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, ORDERED_EXPR, UNORDERED_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case UNLT_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  switch (TREE_CODE (_q70))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q70))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case GE_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
								    {
								      if ((_q81 == _q41 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q41, 0) && types_match (_q81, _q41)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q21, _q40, _q41, _q20, _q70, _q71 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNLT_EXPR, GE_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  switch (TREE_CODE (_q71))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q71))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case GE_EXPR:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a4);
								  _q90 = do_valueize (valueize, _q90);
								  tree _q91 = gimple_assign_rhs2 (_a4);
								  _q91 = do_valueize (valueize, _q91);
								  if ((_q90 == _q40 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q40, 0) && types_match (_q90, _q40)))
								    {
								      if ((_q91 == _q41 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q41, 0) && types_match (_q91, _q41)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q21, _q40, _q41, _q20, _q71, _q70 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNLT_EXPR, GE_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case UNLE_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  switch (TREE_CODE (_q70))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q70))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case GT_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
								    {
								      if ((_q81 == _q41 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q41, 0) && types_match (_q81, _q41)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q21, _q40, _q41, _q20, _q70, _q71 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNLE_EXPR, GT_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  switch (TREE_CODE (_q71))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q71))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case GT_EXPR:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a4);
								  _q90 = do_valueize (valueize, _q90);
								  tree _q91 = gimple_assign_rhs2 (_a4);
								  _q91 = do_valueize (valueize, _q91);
								  if ((_q90 == _q40 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q40, 0) && types_match (_q90, _q40)))
								    {
								      if ((_q91 == _q41 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q41, 0) && types_match (_q91, _q41)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q21, _q40, _q41, _q20, _q71, _q70 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNLE_EXPR, GT_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case UNGT_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  switch (TREE_CODE (_q70))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q70))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case LE_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
								    {
								      if ((_q81 == _q41 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q41, 0) && types_match (_q81, _q41)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q21, _q40, _q41, _q20, _q70, _q71 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNGT_EXPR, LE_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  switch (TREE_CODE (_q71))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q71))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case LE_EXPR:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a4);
								  _q90 = do_valueize (valueize, _q90);
								  tree _q91 = gimple_assign_rhs2 (_a4);
								  _q91 = do_valueize (valueize, _q91);
								  if ((_q90 == _q40 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q40, 0) && types_match (_q90, _q40)))
								    {
								      if ((_q91 == _q41 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q41, 0) && types_match (_q91, _q41)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q21, _q40, _q41, _q20, _q71, _q70 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNGT_EXPR, LE_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case UNGE_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  switch (TREE_CODE (_q70))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q70))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case LT_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
								    {
								      if ((_q81 == _q41 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q41, 0) && types_match (_q81, _q41)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q21, _q40, _q41, _q20, _q70, _q71 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNGE_EXPR, LT_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  switch (TREE_CODE (_q71))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q71))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case LT_EXPR:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a4);
								  _q90 = do_valueize (valueize, _q90);
								  tree _q91 = gimple_assign_rhs2 (_a4);
								  _q91 = do_valueize (valueize, _q91);
								  if ((_q90 == _q40 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q40, 0) && types_match (_q90, _q40)))
								    {
								      if ((_q91 == _q41 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q41, 0) && types_match (_q91, _q41)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q21, _q40, _q41, _q20, _q71, _q70 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNGE_EXPR, LT_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case UNEQ_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  switch (TREE_CODE (_q70))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q70))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case LTGT_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
								    {
								      if ((_q81 == _q41 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q41, 0) && types_match (_q81, _q41)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q21, _q40, _q41, _q20, _q70, _q71 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNEQ_EXPR, LTGT_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  switch (TREE_CODE (_q71))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q71))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case LTGT_EXPR:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a4);
								  _q90 = do_valueize (valueize, _q90);
								  tree _q91 = gimple_assign_rhs2 (_a4);
								  _q91 = do_valueize (valueize, _q91);
								  if (tree_swap_operands_p (_q90, _q91))
								    std::swap (_q90, _q91);
								  if ((_q90 == _q40 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q40, 0) && types_match (_q90, _q40)))
								    {
								      if ((_q91 == _q41 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q41, 0) && types_match (_q91, _q41)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q21, _q40, _q41, _q20, _q71, _q70 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, UNEQ_EXPR, LTGT_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case LTGT_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  switch (TREE_CODE (_q70))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q70))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case UNEQ_EXPR:
							        {
								  tree _q80 = gimple_assign_rhs1 (_a4);
								  _q80 = do_valueize (valueize, _q80);
								  tree _q81 = gimple_assign_rhs2 (_a4);
								  _q81 = do_valueize (valueize, _q81);
								  if (tree_swap_operands_p (_q80, _q81))
								    std::swap (_q80, _q81);
								  if ((_q80 == _q40 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q40, 0) && types_match (_q80, _q40)))
								    {
								      if ((_q81 == _q41 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q41, 0) && types_match (_q81, _q41)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q21, _q40, _q41, _q20, _q70, _q71 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, LTGT_EXPR, UNEQ_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
						  switch (TREE_CODE (_q71))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _q71))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case UNEQ_EXPR:
							        {
								  tree _q90 = gimple_assign_rhs1 (_a4);
								  _q90 = do_valueize (valueize, _q90);
								  tree _q91 = gimple_assign_rhs2 (_a4);
								  _q91 = do_valueize (valueize, _q91);
								  if (tree_swap_operands_p (_q90, _q91))
								    std::swap (_q90, _q91);
								  if ((_q90 == _q40 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q40, 0) && types_match (_q90, _q40)))
								    {
								      if ((_q91 == _q41 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q41, 0) && types_match (_q91, _q41)))
									{
									  {
									    tree captures[6] ATTRIBUTE_UNUSED = { _q21, _q40, _q41, _q20, _q71, _q70 };
									    if (gimple_simplify_153 (res_op, seq, valueize, type, captures, LTGT_EXPR, UNEQ_EXPR))
									      return true;
									  }
								        }
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case VEC_COND_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  tree _q32 = gimple_assign_rhs3 (_a2);
				  _q32 = do_valueize (valueize, _q32);
				  switch (TREE_CODE (_q30))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q30))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case LT_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q100 = gimple_assign_rhs1 (_a4);
								  _q100 = do_valueize (valueize, _q100);
								  tree _q101 = gimple_assign_rhs2 (_a4);
								  _q101 = do_valueize (valueize, _q101);
								  if (tree_swap_operands_p (_q100, _q101))
								    std::swap (_q100, _q101);
								  switch (TREE_CODE (_q100))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q100))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q110 = gimple_assign_rhs1 (_a5);
										  _q110 = do_valueize (valueize, _q110);
										  tree _q111 = gimple_assign_rhs2 (_a5);
										  _q111 = do_valueize (valueize, _q111);
										  tree _q112 = gimple_assign_rhs3 (_a5);
										  _q112 = do_valueize (valueize, _q112);
										  switch (TREE_CODE (_q110))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q110))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case GE_EXPR:
											        {
												  tree _q120 = gimple_assign_rhs1 (_a6);
												  _q120 = do_valueize (valueize, _q120);
												  tree _q121 = gimple_assign_rhs2 (_a6);
												  _q121 = do_valueize (valueize, _q121);
												  if ((_q120 == _q40 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q40, 0) && types_match (_q120, _q40)))
												    {
												      if ((_q121 == _q41 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q41, 0) && types_match (_q121, _q41)))
													{
													  if ((_q111 == _q31 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q31, 0) && types_match (_q111, _q31)))
													    {
													      if ((_q112 == _q32 && ! TREE_SIDE_EFFECTS (_q112)) || (operand_equal_p (_q112, _q32, 0) && types_match (_q112, _q32)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q20, _q30, _q40, _q41, _q31, _q32, _q21, _q100, _q110, _q101 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, LT_EXPR, GE_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q101))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q101))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q120 = gimple_assign_rhs1 (_a5);
										  _q120 = do_valueize (valueize, _q120);
										  tree _q121 = gimple_assign_rhs2 (_a5);
										  _q121 = do_valueize (valueize, _q121);
										  tree _q122 = gimple_assign_rhs3 (_a5);
										  _q122 = do_valueize (valueize, _q122);
										  switch (TREE_CODE (_q120))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q120))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case GE_EXPR:
											        {
												  tree _q130 = gimple_assign_rhs1 (_a6);
												  _q130 = do_valueize (valueize, _q130);
												  tree _q131 = gimple_assign_rhs2 (_a6);
												  _q131 = do_valueize (valueize, _q131);
												  if ((_q130 == _q40 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q40, 0) && types_match (_q130, _q40)))
												    {
												      if ((_q131 == _q41 && ! TREE_SIDE_EFFECTS (_q131)) || (operand_equal_p (_q131, _q41, 0) && types_match (_q131, _q41)))
													{
													  if ((_q121 == _q31 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q31, 0) && types_match (_q121, _q31)))
													    {
													      if ((_q122 == _q32 && ! TREE_SIDE_EFFECTS (_q122)) || (operand_equal_p (_q122, _q32, 0) && types_match (_q122, _q32)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q20, _q30, _q40, _q41, _q31, _q32, _q21, _q101, _q120, _q100 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, LT_EXPR, GE_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case LE_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q100 = gimple_assign_rhs1 (_a4);
								  _q100 = do_valueize (valueize, _q100);
								  tree _q101 = gimple_assign_rhs2 (_a4);
								  _q101 = do_valueize (valueize, _q101);
								  if (tree_swap_operands_p (_q100, _q101))
								    std::swap (_q100, _q101);
								  switch (TREE_CODE (_q100))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q100))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q110 = gimple_assign_rhs1 (_a5);
										  _q110 = do_valueize (valueize, _q110);
										  tree _q111 = gimple_assign_rhs2 (_a5);
										  _q111 = do_valueize (valueize, _q111);
										  tree _q112 = gimple_assign_rhs3 (_a5);
										  _q112 = do_valueize (valueize, _q112);
										  switch (TREE_CODE (_q110))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q110))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case GT_EXPR:
											        {
												  tree _q120 = gimple_assign_rhs1 (_a6);
												  _q120 = do_valueize (valueize, _q120);
												  tree _q121 = gimple_assign_rhs2 (_a6);
												  _q121 = do_valueize (valueize, _q121);
												  if ((_q120 == _q40 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q40, 0) && types_match (_q120, _q40)))
												    {
												      if ((_q121 == _q41 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q41, 0) && types_match (_q121, _q41)))
													{
													  if ((_q111 == _q31 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q31, 0) && types_match (_q111, _q31)))
													    {
													      if ((_q112 == _q32 && ! TREE_SIDE_EFFECTS (_q112)) || (operand_equal_p (_q112, _q32, 0) && types_match (_q112, _q32)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q20, _q30, _q40, _q41, _q31, _q32, _q21, _q100, _q110, _q101 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, LE_EXPR, GT_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q101))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q101))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q120 = gimple_assign_rhs1 (_a5);
										  _q120 = do_valueize (valueize, _q120);
										  tree _q121 = gimple_assign_rhs2 (_a5);
										  _q121 = do_valueize (valueize, _q121);
										  tree _q122 = gimple_assign_rhs3 (_a5);
										  _q122 = do_valueize (valueize, _q122);
										  switch (TREE_CODE (_q120))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q120))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case GT_EXPR:
											        {
												  tree _q130 = gimple_assign_rhs1 (_a6);
												  _q130 = do_valueize (valueize, _q130);
												  tree _q131 = gimple_assign_rhs2 (_a6);
												  _q131 = do_valueize (valueize, _q131);
												  if ((_q130 == _q40 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q40, 0) && types_match (_q130, _q40)))
												    {
												      if ((_q131 == _q41 && ! TREE_SIDE_EFFECTS (_q131)) || (operand_equal_p (_q131, _q41, 0) && types_match (_q131, _q41)))
													{
													  if ((_q121 == _q31 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q31, 0) && types_match (_q121, _q31)))
													    {
													      if ((_q122 == _q32 && ! TREE_SIDE_EFFECTS (_q122)) || (operand_equal_p (_q122, _q32, 0) && types_match (_q122, _q32)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q20, _q30, _q40, _q41, _q31, _q32, _q21, _q101, _q120, _q100 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, LE_EXPR, GT_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case EQ_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  if (tree_swap_operands_p (_q40, _q41))
						    std::swap (_q40, _q41);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q100 = gimple_assign_rhs1 (_a4);
								  _q100 = do_valueize (valueize, _q100);
								  tree _q101 = gimple_assign_rhs2 (_a4);
								  _q101 = do_valueize (valueize, _q101);
								  if (tree_swap_operands_p (_q100, _q101))
								    std::swap (_q100, _q101);
								  switch (TREE_CODE (_q100))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q100))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q110 = gimple_assign_rhs1 (_a5);
										  _q110 = do_valueize (valueize, _q110);
										  tree _q111 = gimple_assign_rhs2 (_a5);
										  _q111 = do_valueize (valueize, _q111);
										  tree _q112 = gimple_assign_rhs3 (_a5);
										  _q112 = do_valueize (valueize, _q112);
										  switch (TREE_CODE (_q110))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q110))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case NE_EXPR:
											        {
												  tree _q120 = gimple_assign_rhs1 (_a6);
												  _q120 = do_valueize (valueize, _q120);
												  tree _q121 = gimple_assign_rhs2 (_a6);
												  _q121 = do_valueize (valueize, _q121);
												  if (tree_swap_operands_p (_q120, _q121))
												    std::swap (_q120, _q121);
												  if ((_q120 == _q40 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q40, 0) && types_match (_q120, _q40)))
												    {
												      if ((_q121 == _q41 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q41, 0) && types_match (_q121, _q41)))
													{
													  if ((_q111 == _q31 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q31, 0) && types_match (_q111, _q31)))
													    {
													      if ((_q112 == _q32 && ! TREE_SIDE_EFFECTS (_q112)) || (operand_equal_p (_q112, _q32, 0) && types_match (_q112, _q32)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q20, _q30, _q40, _q41, _q31, _q32, _q21, _q100, _q110, _q101 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q101))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q101))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q120 = gimple_assign_rhs1 (_a5);
										  _q120 = do_valueize (valueize, _q120);
										  tree _q121 = gimple_assign_rhs2 (_a5);
										  _q121 = do_valueize (valueize, _q121);
										  tree _q122 = gimple_assign_rhs3 (_a5);
										  _q122 = do_valueize (valueize, _q122);
										  switch (TREE_CODE (_q120))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q120))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case NE_EXPR:
											        {
												  tree _q130 = gimple_assign_rhs1 (_a6);
												  _q130 = do_valueize (valueize, _q130);
												  tree _q131 = gimple_assign_rhs2 (_a6);
												  _q131 = do_valueize (valueize, _q131);
												  if (tree_swap_operands_p (_q130, _q131))
												    std::swap (_q130, _q131);
												  if ((_q130 == _q40 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q40, 0) && types_match (_q130, _q40)))
												    {
												      if ((_q131 == _q41 && ! TREE_SIDE_EFFECTS (_q131)) || (operand_equal_p (_q131, _q41, 0) && types_match (_q131, _q41)))
													{
													  if ((_q121 == _q31 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q31, 0) && types_match (_q121, _q31)))
													    {
													      if ((_q122 == _q32 && ! TREE_SIDE_EFFECTS (_q122)) || (operand_equal_p (_q122, _q32, 0) && types_match (_q122, _q32)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q20, _q30, _q40, _q41, _q31, _q32, _q21, _q101, _q120, _q100 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case NE_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  if (tree_swap_operands_p (_q40, _q41))
						    std::swap (_q40, _q41);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q100 = gimple_assign_rhs1 (_a4);
								  _q100 = do_valueize (valueize, _q100);
								  tree _q101 = gimple_assign_rhs2 (_a4);
								  _q101 = do_valueize (valueize, _q101);
								  if (tree_swap_operands_p (_q100, _q101))
								    std::swap (_q100, _q101);
								  switch (TREE_CODE (_q100))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q100))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q110 = gimple_assign_rhs1 (_a5);
										  _q110 = do_valueize (valueize, _q110);
										  tree _q111 = gimple_assign_rhs2 (_a5);
										  _q111 = do_valueize (valueize, _q111);
										  tree _q112 = gimple_assign_rhs3 (_a5);
										  _q112 = do_valueize (valueize, _q112);
										  switch (TREE_CODE (_q110))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q110))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case EQ_EXPR:
											        {
												  tree _q120 = gimple_assign_rhs1 (_a6);
												  _q120 = do_valueize (valueize, _q120);
												  tree _q121 = gimple_assign_rhs2 (_a6);
												  _q121 = do_valueize (valueize, _q121);
												  if (tree_swap_operands_p (_q120, _q121))
												    std::swap (_q120, _q121);
												  if ((_q120 == _q40 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q40, 0) && types_match (_q120, _q40)))
												    {
												      if ((_q121 == _q41 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q41, 0) && types_match (_q121, _q41)))
													{
													  if ((_q111 == _q31 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q31, 0) && types_match (_q111, _q31)))
													    {
													      if ((_q112 == _q32 && ! TREE_SIDE_EFFECTS (_q112)) || (operand_equal_p (_q112, _q32, 0) && types_match (_q112, _q32)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q20, _q30, _q40, _q41, _q31, _q32, _q21, _q100, _q110, _q101 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q101))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q101))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q120 = gimple_assign_rhs1 (_a5);
										  _q120 = do_valueize (valueize, _q120);
										  tree _q121 = gimple_assign_rhs2 (_a5);
										  _q121 = do_valueize (valueize, _q121);
										  tree _q122 = gimple_assign_rhs3 (_a5);
										  _q122 = do_valueize (valueize, _q122);
										  switch (TREE_CODE (_q120))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q120))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case EQ_EXPR:
											        {
												  tree _q130 = gimple_assign_rhs1 (_a6);
												  _q130 = do_valueize (valueize, _q130);
												  tree _q131 = gimple_assign_rhs2 (_a6);
												  _q131 = do_valueize (valueize, _q131);
												  if (tree_swap_operands_p (_q130, _q131))
												    std::swap (_q130, _q131);
												  if ((_q130 == _q40 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q40, 0) && types_match (_q130, _q40)))
												    {
												      if ((_q131 == _q41 && ! TREE_SIDE_EFFECTS (_q131)) || (operand_equal_p (_q131, _q41, 0) && types_match (_q131, _q41)))
													{
													  if ((_q121 == _q31 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q31, 0) && types_match (_q121, _q31)))
													    {
													      if ((_q122 == _q32 && ! TREE_SIDE_EFFECTS (_q122)) || (operand_equal_p (_q122, _q32, 0) && types_match (_q122, _q32)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q20, _q30, _q40, _q41, _q31, _q32, _q21, _q101, _q120, _q100 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case GE_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q100 = gimple_assign_rhs1 (_a4);
								  _q100 = do_valueize (valueize, _q100);
								  tree _q101 = gimple_assign_rhs2 (_a4);
								  _q101 = do_valueize (valueize, _q101);
								  if (tree_swap_operands_p (_q100, _q101))
								    std::swap (_q100, _q101);
								  switch (TREE_CODE (_q100))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q100))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q110 = gimple_assign_rhs1 (_a5);
										  _q110 = do_valueize (valueize, _q110);
										  tree _q111 = gimple_assign_rhs2 (_a5);
										  _q111 = do_valueize (valueize, _q111);
										  tree _q112 = gimple_assign_rhs3 (_a5);
										  _q112 = do_valueize (valueize, _q112);
										  switch (TREE_CODE (_q110))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q110))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LT_EXPR:
											        {
												  tree _q120 = gimple_assign_rhs1 (_a6);
												  _q120 = do_valueize (valueize, _q120);
												  tree _q121 = gimple_assign_rhs2 (_a6);
												  _q121 = do_valueize (valueize, _q121);
												  if ((_q120 == _q40 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q40, 0) && types_match (_q120, _q40)))
												    {
												      if ((_q121 == _q41 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q41, 0) && types_match (_q121, _q41)))
													{
													  if ((_q111 == _q31 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q31, 0) && types_match (_q111, _q31)))
													    {
													      if ((_q112 == _q32 && ! TREE_SIDE_EFFECTS (_q112)) || (operand_equal_p (_q112, _q32, 0) && types_match (_q112, _q32)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q20, _q30, _q40, _q41, _q31, _q32, _q21, _q100, _q110, _q101 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, GE_EXPR, LT_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q101))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q101))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q120 = gimple_assign_rhs1 (_a5);
										  _q120 = do_valueize (valueize, _q120);
										  tree _q121 = gimple_assign_rhs2 (_a5);
										  _q121 = do_valueize (valueize, _q121);
										  tree _q122 = gimple_assign_rhs3 (_a5);
										  _q122 = do_valueize (valueize, _q122);
										  switch (TREE_CODE (_q120))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q120))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LT_EXPR:
											        {
												  tree _q130 = gimple_assign_rhs1 (_a6);
												  _q130 = do_valueize (valueize, _q130);
												  tree _q131 = gimple_assign_rhs2 (_a6);
												  _q131 = do_valueize (valueize, _q131);
												  if ((_q130 == _q40 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q40, 0) && types_match (_q130, _q40)))
												    {
												      if ((_q131 == _q41 && ! TREE_SIDE_EFFECTS (_q131)) || (operand_equal_p (_q131, _q41, 0) && types_match (_q131, _q41)))
													{
													  if ((_q121 == _q31 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q31, 0) && types_match (_q121, _q31)))
													    {
													      if ((_q122 == _q32 && ! TREE_SIDE_EFFECTS (_q122)) || (operand_equal_p (_q122, _q32, 0) && types_match (_q122, _q32)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q20, _q30, _q40, _q41, _q31, _q32, _q21, _q101, _q120, _q100 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, GE_EXPR, LT_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case GT_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q100 = gimple_assign_rhs1 (_a4);
								  _q100 = do_valueize (valueize, _q100);
								  tree _q101 = gimple_assign_rhs2 (_a4);
								  _q101 = do_valueize (valueize, _q101);
								  if (tree_swap_operands_p (_q100, _q101))
								    std::swap (_q100, _q101);
								  switch (TREE_CODE (_q100))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q100))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q110 = gimple_assign_rhs1 (_a5);
										  _q110 = do_valueize (valueize, _q110);
										  tree _q111 = gimple_assign_rhs2 (_a5);
										  _q111 = do_valueize (valueize, _q111);
										  tree _q112 = gimple_assign_rhs3 (_a5);
										  _q112 = do_valueize (valueize, _q112);
										  switch (TREE_CODE (_q110))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q110))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LE_EXPR:
											        {
												  tree _q120 = gimple_assign_rhs1 (_a6);
												  _q120 = do_valueize (valueize, _q120);
												  tree _q121 = gimple_assign_rhs2 (_a6);
												  _q121 = do_valueize (valueize, _q121);
												  if ((_q120 == _q40 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q40, 0) && types_match (_q120, _q40)))
												    {
												      if ((_q121 == _q41 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q41, 0) && types_match (_q121, _q41)))
													{
													  if ((_q111 == _q31 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q31, 0) && types_match (_q111, _q31)))
													    {
													      if ((_q112 == _q32 && ! TREE_SIDE_EFFECTS (_q112)) || (operand_equal_p (_q112, _q32, 0) && types_match (_q112, _q32)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q20, _q30, _q40, _q41, _q31, _q32, _q21, _q100, _q110, _q101 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, GT_EXPR, LE_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q101))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q101))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q120 = gimple_assign_rhs1 (_a5);
										  _q120 = do_valueize (valueize, _q120);
										  tree _q121 = gimple_assign_rhs2 (_a5);
										  _q121 = do_valueize (valueize, _q121);
										  tree _q122 = gimple_assign_rhs3 (_a5);
										  _q122 = do_valueize (valueize, _q122);
										  switch (TREE_CODE (_q120))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q120))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LE_EXPR:
											        {
												  tree _q130 = gimple_assign_rhs1 (_a6);
												  _q130 = do_valueize (valueize, _q130);
												  tree _q131 = gimple_assign_rhs2 (_a6);
												  _q131 = do_valueize (valueize, _q131);
												  if ((_q130 == _q40 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q40, 0) && types_match (_q130, _q40)))
												    {
												      if ((_q131 == _q41 && ! TREE_SIDE_EFFECTS (_q131)) || (operand_equal_p (_q131, _q41, 0) && types_match (_q131, _q41)))
													{
													  if ((_q121 == _q31 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q31, 0) && types_match (_q121, _q31)))
													    {
													      if ((_q122 == _q32 && ! TREE_SIDE_EFFECTS (_q122)) || (operand_equal_p (_q122, _q32, 0) && types_match (_q122, _q32)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q20, _q30, _q40, _q41, _q31, _q32, _q21, _q101, _q120, _q100 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, GT_EXPR, LE_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case UNORDERED_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  if (tree_swap_operands_p (_q40, _q41))
						    std::swap (_q40, _q41);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q100 = gimple_assign_rhs1 (_a4);
								  _q100 = do_valueize (valueize, _q100);
								  tree _q101 = gimple_assign_rhs2 (_a4);
								  _q101 = do_valueize (valueize, _q101);
								  if (tree_swap_operands_p (_q100, _q101))
								    std::swap (_q100, _q101);
								  switch (TREE_CODE (_q100))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q100))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q110 = gimple_assign_rhs1 (_a5);
										  _q110 = do_valueize (valueize, _q110);
										  tree _q111 = gimple_assign_rhs2 (_a5);
										  _q111 = do_valueize (valueize, _q111);
										  tree _q112 = gimple_assign_rhs3 (_a5);
										  _q112 = do_valueize (valueize, _q112);
										  switch (TREE_CODE (_q110))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q110))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case ORDERED_EXPR:
											        {
												  tree _q120 = gimple_assign_rhs1 (_a6);
												  _q120 = do_valueize (valueize, _q120);
												  tree _q121 = gimple_assign_rhs2 (_a6);
												  _q121 = do_valueize (valueize, _q121);
												  if (tree_swap_operands_p (_q120, _q121))
												    std::swap (_q120, _q121);
												  if ((_q120 == _q40 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q40, 0) && types_match (_q120, _q40)))
												    {
												      if ((_q121 == _q41 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q41, 0) && types_match (_q121, _q41)))
													{
													  if ((_q111 == _q31 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q31, 0) && types_match (_q111, _q31)))
													    {
													      if ((_q112 == _q32 && ! TREE_SIDE_EFFECTS (_q112)) || (operand_equal_p (_q112, _q32, 0) && types_match (_q112, _q32)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q20, _q30, _q40, _q41, _q31, _q32, _q21, _q100, _q110, _q101 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, UNORDERED_EXPR, ORDERED_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q101))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q101))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q120 = gimple_assign_rhs1 (_a5);
										  _q120 = do_valueize (valueize, _q120);
										  tree _q121 = gimple_assign_rhs2 (_a5);
										  _q121 = do_valueize (valueize, _q121);
										  tree _q122 = gimple_assign_rhs3 (_a5);
										  _q122 = do_valueize (valueize, _q122);
										  switch (TREE_CODE (_q120))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q120))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case ORDERED_EXPR:
											        {
												  tree _q130 = gimple_assign_rhs1 (_a6);
												  _q130 = do_valueize (valueize, _q130);
												  tree _q131 = gimple_assign_rhs2 (_a6);
												  _q131 = do_valueize (valueize, _q131);
												  if (tree_swap_operands_p (_q130, _q131))
												    std::swap (_q130, _q131);
												  if ((_q130 == _q40 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q40, 0) && types_match (_q130, _q40)))
												    {
												      if ((_q131 == _q41 && ! TREE_SIDE_EFFECTS (_q131)) || (operand_equal_p (_q131, _q41, 0) && types_match (_q131, _q41)))
													{
													  if ((_q121 == _q31 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q31, 0) && types_match (_q121, _q31)))
													    {
													      if ((_q122 == _q32 && ! TREE_SIDE_EFFECTS (_q122)) || (operand_equal_p (_q122, _q32, 0) && types_match (_q122, _q32)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q20, _q30, _q40, _q41, _q31, _q32, _q21, _q101, _q120, _q100 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, UNORDERED_EXPR, ORDERED_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case ORDERED_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  if (tree_swap_operands_p (_q40, _q41))
						    std::swap (_q40, _q41);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q100 = gimple_assign_rhs1 (_a4);
								  _q100 = do_valueize (valueize, _q100);
								  tree _q101 = gimple_assign_rhs2 (_a4);
								  _q101 = do_valueize (valueize, _q101);
								  if (tree_swap_operands_p (_q100, _q101))
								    std::swap (_q100, _q101);
								  switch (TREE_CODE (_q100))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q100))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q110 = gimple_assign_rhs1 (_a5);
										  _q110 = do_valueize (valueize, _q110);
										  tree _q111 = gimple_assign_rhs2 (_a5);
										  _q111 = do_valueize (valueize, _q111);
										  tree _q112 = gimple_assign_rhs3 (_a5);
										  _q112 = do_valueize (valueize, _q112);
										  switch (TREE_CODE (_q110))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q110))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case UNORDERED_EXPR:
											        {
												  tree _q120 = gimple_assign_rhs1 (_a6);
												  _q120 = do_valueize (valueize, _q120);
												  tree _q121 = gimple_assign_rhs2 (_a6);
												  _q121 = do_valueize (valueize, _q121);
												  if (tree_swap_operands_p (_q120, _q121))
												    std::swap (_q120, _q121);
												  if ((_q120 == _q40 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q40, 0) && types_match (_q120, _q40)))
												    {
												      if ((_q121 == _q41 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q41, 0) && types_match (_q121, _q41)))
													{
													  if ((_q111 == _q31 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q31, 0) && types_match (_q111, _q31)))
													    {
													      if ((_q112 == _q32 && ! TREE_SIDE_EFFECTS (_q112)) || (operand_equal_p (_q112, _q32, 0) && types_match (_q112, _q32)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q20, _q30, _q40, _q41, _q31, _q32, _q21, _q100, _q110, _q101 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, ORDERED_EXPR, UNORDERED_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q101))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q101))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q120 = gimple_assign_rhs1 (_a5);
										  _q120 = do_valueize (valueize, _q120);
										  tree _q121 = gimple_assign_rhs2 (_a5);
										  _q121 = do_valueize (valueize, _q121);
										  tree _q122 = gimple_assign_rhs3 (_a5);
										  _q122 = do_valueize (valueize, _q122);
										  switch (TREE_CODE (_q120))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q120))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case UNORDERED_EXPR:
											        {
												  tree _q130 = gimple_assign_rhs1 (_a6);
												  _q130 = do_valueize (valueize, _q130);
												  tree _q131 = gimple_assign_rhs2 (_a6);
												  _q131 = do_valueize (valueize, _q131);
												  if (tree_swap_operands_p (_q130, _q131))
												    std::swap (_q130, _q131);
												  if ((_q130 == _q40 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q40, 0) && types_match (_q130, _q40)))
												    {
												      if ((_q131 == _q41 && ! TREE_SIDE_EFFECTS (_q131)) || (operand_equal_p (_q131, _q41, 0) && types_match (_q131, _q41)))
													{
													  if ((_q121 == _q31 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q31, 0) && types_match (_q121, _q31)))
													    {
													      if ((_q122 == _q32 && ! TREE_SIDE_EFFECTS (_q122)) || (operand_equal_p (_q122, _q32, 0) && types_match (_q122, _q32)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q20, _q30, _q40, _q41, _q31, _q32, _q21, _q101, _q120, _q100 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, ORDERED_EXPR, UNORDERED_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case UNLT_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q100 = gimple_assign_rhs1 (_a4);
								  _q100 = do_valueize (valueize, _q100);
								  tree _q101 = gimple_assign_rhs2 (_a4);
								  _q101 = do_valueize (valueize, _q101);
								  if (tree_swap_operands_p (_q100, _q101))
								    std::swap (_q100, _q101);
								  switch (TREE_CODE (_q100))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q100))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q110 = gimple_assign_rhs1 (_a5);
										  _q110 = do_valueize (valueize, _q110);
										  tree _q111 = gimple_assign_rhs2 (_a5);
										  _q111 = do_valueize (valueize, _q111);
										  tree _q112 = gimple_assign_rhs3 (_a5);
										  _q112 = do_valueize (valueize, _q112);
										  switch (TREE_CODE (_q110))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q110))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case GE_EXPR:
											        {
												  tree _q120 = gimple_assign_rhs1 (_a6);
												  _q120 = do_valueize (valueize, _q120);
												  tree _q121 = gimple_assign_rhs2 (_a6);
												  _q121 = do_valueize (valueize, _q121);
												  if ((_q120 == _q40 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q40, 0) && types_match (_q120, _q40)))
												    {
												      if ((_q121 == _q41 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q41, 0) && types_match (_q121, _q41)))
													{
													  if ((_q111 == _q31 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q31, 0) && types_match (_q111, _q31)))
													    {
													      if ((_q112 == _q32 && ! TREE_SIDE_EFFECTS (_q112)) || (operand_equal_p (_q112, _q32, 0) && types_match (_q112, _q32)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q20, _q30, _q40, _q41, _q31, _q32, _q21, _q100, _q110, _q101 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, UNLT_EXPR, GE_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q101))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q101))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q120 = gimple_assign_rhs1 (_a5);
										  _q120 = do_valueize (valueize, _q120);
										  tree _q121 = gimple_assign_rhs2 (_a5);
										  _q121 = do_valueize (valueize, _q121);
										  tree _q122 = gimple_assign_rhs3 (_a5);
										  _q122 = do_valueize (valueize, _q122);
										  switch (TREE_CODE (_q120))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q120))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case GE_EXPR:
											        {
												  tree _q130 = gimple_assign_rhs1 (_a6);
												  _q130 = do_valueize (valueize, _q130);
												  tree _q131 = gimple_assign_rhs2 (_a6);
												  _q131 = do_valueize (valueize, _q131);
												  if ((_q130 == _q40 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q40, 0) && types_match (_q130, _q40)))
												    {
												      if ((_q131 == _q41 && ! TREE_SIDE_EFFECTS (_q131)) || (operand_equal_p (_q131, _q41, 0) && types_match (_q131, _q41)))
													{
													  if ((_q121 == _q31 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q31, 0) && types_match (_q121, _q31)))
													    {
													      if ((_q122 == _q32 && ! TREE_SIDE_EFFECTS (_q122)) || (operand_equal_p (_q122, _q32, 0) && types_match (_q122, _q32)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q20, _q30, _q40, _q41, _q31, _q32, _q21, _q101, _q120, _q100 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, UNLT_EXPR, GE_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case UNLE_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q100 = gimple_assign_rhs1 (_a4);
								  _q100 = do_valueize (valueize, _q100);
								  tree _q101 = gimple_assign_rhs2 (_a4);
								  _q101 = do_valueize (valueize, _q101);
								  if (tree_swap_operands_p (_q100, _q101))
								    std::swap (_q100, _q101);
								  switch (TREE_CODE (_q100))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q100))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q110 = gimple_assign_rhs1 (_a5);
										  _q110 = do_valueize (valueize, _q110);
										  tree _q111 = gimple_assign_rhs2 (_a5);
										  _q111 = do_valueize (valueize, _q111);
										  tree _q112 = gimple_assign_rhs3 (_a5);
										  _q112 = do_valueize (valueize, _q112);
										  switch (TREE_CODE (_q110))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q110))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case GT_EXPR:
											        {
												  tree _q120 = gimple_assign_rhs1 (_a6);
												  _q120 = do_valueize (valueize, _q120);
												  tree _q121 = gimple_assign_rhs2 (_a6);
												  _q121 = do_valueize (valueize, _q121);
												  if ((_q120 == _q40 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q40, 0) && types_match (_q120, _q40)))
												    {
												      if ((_q121 == _q41 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q41, 0) && types_match (_q121, _q41)))
													{
													  if ((_q111 == _q31 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q31, 0) && types_match (_q111, _q31)))
													    {
													      if ((_q112 == _q32 && ! TREE_SIDE_EFFECTS (_q112)) || (operand_equal_p (_q112, _q32, 0) && types_match (_q112, _q32)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q20, _q30, _q40, _q41, _q31, _q32, _q21, _q100, _q110, _q101 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, UNLE_EXPR, GT_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q101))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q101))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q120 = gimple_assign_rhs1 (_a5);
										  _q120 = do_valueize (valueize, _q120);
										  tree _q121 = gimple_assign_rhs2 (_a5);
										  _q121 = do_valueize (valueize, _q121);
										  tree _q122 = gimple_assign_rhs3 (_a5);
										  _q122 = do_valueize (valueize, _q122);
										  switch (TREE_CODE (_q120))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q120))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case GT_EXPR:
											        {
												  tree _q130 = gimple_assign_rhs1 (_a6);
												  _q130 = do_valueize (valueize, _q130);
												  tree _q131 = gimple_assign_rhs2 (_a6);
												  _q131 = do_valueize (valueize, _q131);
												  if ((_q130 == _q40 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q40, 0) && types_match (_q130, _q40)))
												    {
												      if ((_q131 == _q41 && ! TREE_SIDE_EFFECTS (_q131)) || (operand_equal_p (_q131, _q41, 0) && types_match (_q131, _q41)))
													{
													  if ((_q121 == _q31 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q31, 0) && types_match (_q121, _q31)))
													    {
													      if ((_q122 == _q32 && ! TREE_SIDE_EFFECTS (_q122)) || (operand_equal_p (_q122, _q32, 0) && types_match (_q122, _q32)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q20, _q30, _q40, _q41, _q31, _q32, _q21, _q101, _q120, _q100 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, UNLE_EXPR, GT_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case UNGT_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q100 = gimple_assign_rhs1 (_a4);
								  _q100 = do_valueize (valueize, _q100);
								  tree _q101 = gimple_assign_rhs2 (_a4);
								  _q101 = do_valueize (valueize, _q101);
								  if (tree_swap_operands_p (_q100, _q101))
								    std::swap (_q100, _q101);
								  switch (TREE_CODE (_q100))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q100))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q110 = gimple_assign_rhs1 (_a5);
										  _q110 = do_valueize (valueize, _q110);
										  tree _q111 = gimple_assign_rhs2 (_a5);
										  _q111 = do_valueize (valueize, _q111);
										  tree _q112 = gimple_assign_rhs3 (_a5);
										  _q112 = do_valueize (valueize, _q112);
										  switch (TREE_CODE (_q110))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q110))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LE_EXPR:
											        {
												  tree _q120 = gimple_assign_rhs1 (_a6);
												  _q120 = do_valueize (valueize, _q120);
												  tree _q121 = gimple_assign_rhs2 (_a6);
												  _q121 = do_valueize (valueize, _q121);
												  if ((_q120 == _q40 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q40, 0) && types_match (_q120, _q40)))
												    {
												      if ((_q121 == _q41 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q41, 0) && types_match (_q121, _q41)))
													{
													  if ((_q111 == _q31 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q31, 0) && types_match (_q111, _q31)))
													    {
													      if ((_q112 == _q32 && ! TREE_SIDE_EFFECTS (_q112)) || (operand_equal_p (_q112, _q32, 0) && types_match (_q112, _q32)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q20, _q30, _q40, _q41, _q31, _q32, _q21, _q100, _q110, _q101 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, UNGT_EXPR, LE_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q101))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q101))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q120 = gimple_assign_rhs1 (_a5);
										  _q120 = do_valueize (valueize, _q120);
										  tree _q121 = gimple_assign_rhs2 (_a5);
										  _q121 = do_valueize (valueize, _q121);
										  tree _q122 = gimple_assign_rhs3 (_a5);
										  _q122 = do_valueize (valueize, _q122);
										  switch (TREE_CODE (_q120))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q120))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LE_EXPR:
											        {
												  tree _q130 = gimple_assign_rhs1 (_a6);
												  _q130 = do_valueize (valueize, _q130);
												  tree _q131 = gimple_assign_rhs2 (_a6);
												  _q131 = do_valueize (valueize, _q131);
												  if ((_q130 == _q40 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q40, 0) && types_match (_q130, _q40)))
												    {
												      if ((_q131 == _q41 && ! TREE_SIDE_EFFECTS (_q131)) || (operand_equal_p (_q131, _q41, 0) && types_match (_q131, _q41)))
													{
													  if ((_q121 == _q31 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q31, 0) && types_match (_q121, _q31)))
													    {
													      if ((_q122 == _q32 && ! TREE_SIDE_EFFECTS (_q122)) || (operand_equal_p (_q122, _q32, 0) && types_match (_q122, _q32)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q20, _q30, _q40, _q41, _q31, _q32, _q21, _q101, _q120, _q100 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, UNGT_EXPR, LE_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case UNGE_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q100 = gimple_assign_rhs1 (_a4);
								  _q100 = do_valueize (valueize, _q100);
								  tree _q101 = gimple_assign_rhs2 (_a4);
								  _q101 = do_valueize (valueize, _q101);
								  if (tree_swap_operands_p (_q100, _q101))
								    std::swap (_q100, _q101);
								  switch (TREE_CODE (_q100))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q100))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q110 = gimple_assign_rhs1 (_a5);
										  _q110 = do_valueize (valueize, _q110);
										  tree _q111 = gimple_assign_rhs2 (_a5);
										  _q111 = do_valueize (valueize, _q111);
										  tree _q112 = gimple_assign_rhs3 (_a5);
										  _q112 = do_valueize (valueize, _q112);
										  switch (TREE_CODE (_q110))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q110))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LT_EXPR:
											        {
												  tree _q120 = gimple_assign_rhs1 (_a6);
												  _q120 = do_valueize (valueize, _q120);
												  tree _q121 = gimple_assign_rhs2 (_a6);
												  _q121 = do_valueize (valueize, _q121);
												  if ((_q120 == _q40 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q40, 0) && types_match (_q120, _q40)))
												    {
												      if ((_q121 == _q41 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q41, 0) && types_match (_q121, _q41)))
													{
													  if ((_q111 == _q31 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q31, 0) && types_match (_q111, _q31)))
													    {
													      if ((_q112 == _q32 && ! TREE_SIDE_EFFECTS (_q112)) || (operand_equal_p (_q112, _q32, 0) && types_match (_q112, _q32)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q20, _q30, _q40, _q41, _q31, _q32, _q21, _q100, _q110, _q101 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, UNGE_EXPR, LT_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q101))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q101))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q120 = gimple_assign_rhs1 (_a5);
										  _q120 = do_valueize (valueize, _q120);
										  tree _q121 = gimple_assign_rhs2 (_a5);
										  _q121 = do_valueize (valueize, _q121);
										  tree _q122 = gimple_assign_rhs3 (_a5);
										  _q122 = do_valueize (valueize, _q122);
										  switch (TREE_CODE (_q120))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q120))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LT_EXPR:
											        {
												  tree _q130 = gimple_assign_rhs1 (_a6);
												  _q130 = do_valueize (valueize, _q130);
												  tree _q131 = gimple_assign_rhs2 (_a6);
												  _q131 = do_valueize (valueize, _q131);
												  if ((_q130 == _q40 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q40, 0) && types_match (_q130, _q40)))
												    {
												      if ((_q131 == _q41 && ! TREE_SIDE_EFFECTS (_q131)) || (operand_equal_p (_q131, _q41, 0) && types_match (_q131, _q41)))
													{
													  if ((_q121 == _q31 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q31, 0) && types_match (_q121, _q31)))
													    {
													      if ((_q122 == _q32 && ! TREE_SIDE_EFFECTS (_q122)) || (operand_equal_p (_q122, _q32, 0) && types_match (_q122, _q32)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q20, _q30, _q40, _q41, _q31, _q32, _q21, _q101, _q120, _q100 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, UNGE_EXPR, LT_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case UNEQ_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  if (tree_swap_operands_p (_q40, _q41))
						    std::swap (_q40, _q41);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q100 = gimple_assign_rhs1 (_a4);
								  _q100 = do_valueize (valueize, _q100);
								  tree _q101 = gimple_assign_rhs2 (_a4);
								  _q101 = do_valueize (valueize, _q101);
								  if (tree_swap_operands_p (_q100, _q101))
								    std::swap (_q100, _q101);
								  switch (TREE_CODE (_q100))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q100))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q110 = gimple_assign_rhs1 (_a5);
										  _q110 = do_valueize (valueize, _q110);
										  tree _q111 = gimple_assign_rhs2 (_a5);
										  _q111 = do_valueize (valueize, _q111);
										  tree _q112 = gimple_assign_rhs3 (_a5);
										  _q112 = do_valueize (valueize, _q112);
										  switch (TREE_CODE (_q110))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q110))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LTGT_EXPR:
											        {
												  tree _q120 = gimple_assign_rhs1 (_a6);
												  _q120 = do_valueize (valueize, _q120);
												  tree _q121 = gimple_assign_rhs2 (_a6);
												  _q121 = do_valueize (valueize, _q121);
												  if (tree_swap_operands_p (_q120, _q121))
												    std::swap (_q120, _q121);
												  if ((_q120 == _q40 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q40, 0) && types_match (_q120, _q40)))
												    {
												      if ((_q121 == _q41 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q41, 0) && types_match (_q121, _q41)))
													{
													  if ((_q111 == _q31 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q31, 0) && types_match (_q111, _q31)))
													    {
													      if ((_q112 == _q32 && ! TREE_SIDE_EFFECTS (_q112)) || (operand_equal_p (_q112, _q32, 0) && types_match (_q112, _q32)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q20, _q30, _q40, _q41, _q31, _q32, _q21, _q100, _q110, _q101 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, UNEQ_EXPR, LTGT_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q101))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q101))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q120 = gimple_assign_rhs1 (_a5);
										  _q120 = do_valueize (valueize, _q120);
										  tree _q121 = gimple_assign_rhs2 (_a5);
										  _q121 = do_valueize (valueize, _q121);
										  tree _q122 = gimple_assign_rhs3 (_a5);
										  _q122 = do_valueize (valueize, _q122);
										  switch (TREE_CODE (_q120))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q120))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LTGT_EXPR:
											        {
												  tree _q130 = gimple_assign_rhs1 (_a6);
												  _q130 = do_valueize (valueize, _q130);
												  tree _q131 = gimple_assign_rhs2 (_a6);
												  _q131 = do_valueize (valueize, _q131);
												  if (tree_swap_operands_p (_q130, _q131))
												    std::swap (_q130, _q131);
												  if ((_q130 == _q40 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q40, 0) && types_match (_q130, _q40)))
												    {
												      if ((_q131 == _q41 && ! TREE_SIDE_EFFECTS (_q131)) || (operand_equal_p (_q131, _q41, 0) && types_match (_q131, _q41)))
													{
													  if ((_q121 == _q31 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q31, 0) && types_match (_q121, _q31)))
													    {
													      if ((_q122 == _q32 && ! TREE_SIDE_EFFECTS (_q122)) || (operand_equal_p (_q122, _q32, 0) && types_match (_q122, _q32)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q20, _q30, _q40, _q41, _q31, _q32, _q21, _q101, _q120, _q100 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, UNEQ_EXPR, LTGT_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case LTGT_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  if (tree_swap_operands_p (_q40, _q41))
						    std::swap (_q40, _q41);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q100 = gimple_assign_rhs1 (_a4);
								  _q100 = do_valueize (valueize, _q100);
								  tree _q101 = gimple_assign_rhs2 (_a4);
								  _q101 = do_valueize (valueize, _q101);
								  if (tree_swap_operands_p (_q100, _q101))
								    std::swap (_q100, _q101);
								  switch (TREE_CODE (_q100))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q100))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q110 = gimple_assign_rhs1 (_a5);
										  _q110 = do_valueize (valueize, _q110);
										  tree _q111 = gimple_assign_rhs2 (_a5);
										  _q111 = do_valueize (valueize, _q111);
										  tree _q112 = gimple_assign_rhs3 (_a5);
										  _q112 = do_valueize (valueize, _q112);
										  switch (TREE_CODE (_q110))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q110))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case UNEQ_EXPR:
											        {
												  tree _q120 = gimple_assign_rhs1 (_a6);
												  _q120 = do_valueize (valueize, _q120);
												  tree _q121 = gimple_assign_rhs2 (_a6);
												  _q121 = do_valueize (valueize, _q121);
												  if (tree_swap_operands_p (_q120, _q121))
												    std::swap (_q120, _q121);
												  if ((_q120 == _q40 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q40, 0) && types_match (_q120, _q40)))
												    {
												      if ((_q121 == _q41 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q41, 0) && types_match (_q121, _q41)))
													{
													  if ((_q111 == _q31 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q31, 0) && types_match (_q111, _q31)))
													    {
													      if ((_q112 == _q32 && ! TREE_SIDE_EFFECTS (_q112)) || (operand_equal_p (_q112, _q32, 0) && types_match (_q112, _q32)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q20, _q30, _q40, _q41, _q31, _q32, _q21, _q100, _q110, _q101 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, LTGT_EXPR, UNEQ_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q101))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q101))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q120 = gimple_assign_rhs1 (_a5);
										  _q120 = do_valueize (valueize, _q120);
										  tree _q121 = gimple_assign_rhs2 (_a5);
										  _q121 = do_valueize (valueize, _q121);
										  tree _q122 = gimple_assign_rhs3 (_a5);
										  _q122 = do_valueize (valueize, _q122);
										  switch (TREE_CODE (_q120))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q120))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case UNEQ_EXPR:
											        {
												  tree _q130 = gimple_assign_rhs1 (_a6);
												  _q130 = do_valueize (valueize, _q130);
												  tree _q131 = gimple_assign_rhs2 (_a6);
												  _q131 = do_valueize (valueize, _q131);
												  if (tree_swap_operands_p (_q130, _q131))
												    std::swap (_q130, _q131);
												  if ((_q130 == _q40 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q40, 0) && types_match (_q130, _q40)))
												    {
												      if ((_q131 == _q41 && ! TREE_SIDE_EFFECTS (_q131)) || (operand_equal_p (_q131, _q41, 0) && types_match (_q131, _q41)))
													{
													  if ((_q121 == _q31 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q31, 0) && types_match (_q121, _q31)))
													    {
													      if ((_q122 == _q32 && ! TREE_SIDE_EFFECTS (_q122)) || (operand_equal_p (_q122, _q32, 0) && types_match (_q122, _q32)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q20, _q30, _q40, _q41, _q31, _q32, _q21, _q101, _q120, _q100 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, LTGT_EXPR, UNEQ_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case VEC_COND_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  tree _q42 = gimple_assign_rhs3 (_a2);
				  _q42 = do_valueize (valueize, _q42);
				  switch (TREE_CODE (_q40))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q40))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case LT_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q100 = gimple_assign_rhs1 (_a4);
								  _q100 = do_valueize (valueize, _q100);
								  tree _q101 = gimple_assign_rhs2 (_a4);
								  _q101 = do_valueize (valueize, _q101);
								  if (tree_swap_operands_p (_q100, _q101))
								    std::swap (_q100, _q101);
								  switch (TREE_CODE (_q100))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q100))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q110 = gimple_assign_rhs1 (_a5);
										  _q110 = do_valueize (valueize, _q110);
										  tree _q111 = gimple_assign_rhs2 (_a5);
										  _q111 = do_valueize (valueize, _q111);
										  tree _q112 = gimple_assign_rhs3 (_a5);
										  _q112 = do_valueize (valueize, _q112);
										  switch (TREE_CODE (_q110))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q110))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case GE_EXPR:
											        {
												  tree _q120 = gimple_assign_rhs1 (_a6);
												  _q120 = do_valueize (valueize, _q120);
												  tree _q121 = gimple_assign_rhs2 (_a6);
												  _q121 = do_valueize (valueize, _q121);
												  if ((_q120 == _q50 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q50, 0) && types_match (_q120, _q50)))
												    {
												      if ((_q121 == _q51 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q51, 0) && types_match (_q121, _q51)))
													{
													  if ((_q111 == _q41 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q41, 0) && types_match (_q111, _q41)))
													    {
													      if ((_q112 == _q42 && ! TREE_SIDE_EFFECTS (_q112)) || (operand_equal_p (_q112, _q42, 0) && types_match (_q112, _q42)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q21, _q40, _q50, _q51, _q41, _q42, _q20, _q100, _q110, _q101 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, LT_EXPR, GE_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q101))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q101))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q120 = gimple_assign_rhs1 (_a5);
										  _q120 = do_valueize (valueize, _q120);
										  tree _q121 = gimple_assign_rhs2 (_a5);
										  _q121 = do_valueize (valueize, _q121);
										  tree _q122 = gimple_assign_rhs3 (_a5);
										  _q122 = do_valueize (valueize, _q122);
										  switch (TREE_CODE (_q120))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q120))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case GE_EXPR:
											        {
												  tree _q130 = gimple_assign_rhs1 (_a6);
												  _q130 = do_valueize (valueize, _q130);
												  tree _q131 = gimple_assign_rhs2 (_a6);
												  _q131 = do_valueize (valueize, _q131);
												  if ((_q130 == _q50 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q50, 0) && types_match (_q130, _q50)))
												    {
												      if ((_q131 == _q51 && ! TREE_SIDE_EFFECTS (_q131)) || (operand_equal_p (_q131, _q51, 0) && types_match (_q131, _q51)))
													{
													  if ((_q121 == _q41 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q41, 0) && types_match (_q121, _q41)))
													    {
													      if ((_q122 == _q42 && ! TREE_SIDE_EFFECTS (_q122)) || (operand_equal_p (_q122, _q42, 0) && types_match (_q122, _q42)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q21, _q40, _q50, _q51, _q41, _q42, _q20, _q101, _q120, _q100 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, LT_EXPR, GE_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case LE_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q100 = gimple_assign_rhs1 (_a4);
								  _q100 = do_valueize (valueize, _q100);
								  tree _q101 = gimple_assign_rhs2 (_a4);
								  _q101 = do_valueize (valueize, _q101);
								  if (tree_swap_operands_p (_q100, _q101))
								    std::swap (_q100, _q101);
								  switch (TREE_CODE (_q100))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q100))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q110 = gimple_assign_rhs1 (_a5);
										  _q110 = do_valueize (valueize, _q110);
										  tree _q111 = gimple_assign_rhs2 (_a5);
										  _q111 = do_valueize (valueize, _q111);
										  tree _q112 = gimple_assign_rhs3 (_a5);
										  _q112 = do_valueize (valueize, _q112);
										  switch (TREE_CODE (_q110))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q110))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case GT_EXPR:
											        {
												  tree _q120 = gimple_assign_rhs1 (_a6);
												  _q120 = do_valueize (valueize, _q120);
												  tree _q121 = gimple_assign_rhs2 (_a6);
												  _q121 = do_valueize (valueize, _q121);
												  if ((_q120 == _q50 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q50, 0) && types_match (_q120, _q50)))
												    {
												      if ((_q121 == _q51 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q51, 0) && types_match (_q121, _q51)))
													{
													  if ((_q111 == _q41 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q41, 0) && types_match (_q111, _q41)))
													    {
													      if ((_q112 == _q42 && ! TREE_SIDE_EFFECTS (_q112)) || (operand_equal_p (_q112, _q42, 0) && types_match (_q112, _q42)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q21, _q40, _q50, _q51, _q41, _q42, _q20, _q100, _q110, _q101 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, LE_EXPR, GT_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q101))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q101))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q120 = gimple_assign_rhs1 (_a5);
										  _q120 = do_valueize (valueize, _q120);
										  tree _q121 = gimple_assign_rhs2 (_a5);
										  _q121 = do_valueize (valueize, _q121);
										  tree _q122 = gimple_assign_rhs3 (_a5);
										  _q122 = do_valueize (valueize, _q122);
										  switch (TREE_CODE (_q120))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q120))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case GT_EXPR:
											        {
												  tree _q130 = gimple_assign_rhs1 (_a6);
												  _q130 = do_valueize (valueize, _q130);
												  tree _q131 = gimple_assign_rhs2 (_a6);
												  _q131 = do_valueize (valueize, _q131);
												  if ((_q130 == _q50 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q50, 0) && types_match (_q130, _q50)))
												    {
												      if ((_q131 == _q51 && ! TREE_SIDE_EFFECTS (_q131)) || (operand_equal_p (_q131, _q51, 0) && types_match (_q131, _q51)))
													{
													  if ((_q121 == _q41 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q41, 0) && types_match (_q121, _q41)))
													    {
													      if ((_q122 == _q42 && ! TREE_SIDE_EFFECTS (_q122)) || (operand_equal_p (_q122, _q42, 0) && types_match (_q122, _q42)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q21, _q40, _q50, _q51, _q41, _q42, _q20, _q101, _q120, _q100 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, LE_EXPR, GT_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case EQ_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  if (tree_swap_operands_p (_q50, _q51))
						    std::swap (_q50, _q51);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q100 = gimple_assign_rhs1 (_a4);
								  _q100 = do_valueize (valueize, _q100);
								  tree _q101 = gimple_assign_rhs2 (_a4);
								  _q101 = do_valueize (valueize, _q101);
								  if (tree_swap_operands_p (_q100, _q101))
								    std::swap (_q100, _q101);
								  switch (TREE_CODE (_q100))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q100))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q110 = gimple_assign_rhs1 (_a5);
										  _q110 = do_valueize (valueize, _q110);
										  tree _q111 = gimple_assign_rhs2 (_a5);
										  _q111 = do_valueize (valueize, _q111);
										  tree _q112 = gimple_assign_rhs3 (_a5);
										  _q112 = do_valueize (valueize, _q112);
										  switch (TREE_CODE (_q110))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q110))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case NE_EXPR:
											        {
												  tree _q120 = gimple_assign_rhs1 (_a6);
												  _q120 = do_valueize (valueize, _q120);
												  tree _q121 = gimple_assign_rhs2 (_a6);
												  _q121 = do_valueize (valueize, _q121);
												  if (tree_swap_operands_p (_q120, _q121))
												    std::swap (_q120, _q121);
												  if ((_q120 == _q50 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q50, 0) && types_match (_q120, _q50)))
												    {
												      if ((_q121 == _q51 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q51, 0) && types_match (_q121, _q51)))
													{
													  if ((_q111 == _q41 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q41, 0) && types_match (_q111, _q41)))
													    {
													      if ((_q112 == _q42 && ! TREE_SIDE_EFFECTS (_q112)) || (operand_equal_p (_q112, _q42, 0) && types_match (_q112, _q42)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q21, _q40, _q50, _q51, _q41, _q42, _q20, _q100, _q110, _q101 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q101))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q101))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q120 = gimple_assign_rhs1 (_a5);
										  _q120 = do_valueize (valueize, _q120);
										  tree _q121 = gimple_assign_rhs2 (_a5);
										  _q121 = do_valueize (valueize, _q121);
										  tree _q122 = gimple_assign_rhs3 (_a5);
										  _q122 = do_valueize (valueize, _q122);
										  switch (TREE_CODE (_q120))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q120))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case NE_EXPR:
											        {
												  tree _q130 = gimple_assign_rhs1 (_a6);
												  _q130 = do_valueize (valueize, _q130);
												  tree _q131 = gimple_assign_rhs2 (_a6);
												  _q131 = do_valueize (valueize, _q131);
												  if (tree_swap_operands_p (_q130, _q131))
												    std::swap (_q130, _q131);
												  if ((_q130 == _q50 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q50, 0) && types_match (_q130, _q50)))
												    {
												      if ((_q131 == _q51 && ! TREE_SIDE_EFFECTS (_q131)) || (operand_equal_p (_q131, _q51, 0) && types_match (_q131, _q51)))
													{
													  if ((_q121 == _q41 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q41, 0) && types_match (_q121, _q41)))
													    {
													      if ((_q122 == _q42 && ! TREE_SIDE_EFFECTS (_q122)) || (operand_equal_p (_q122, _q42, 0) && types_match (_q122, _q42)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q21, _q40, _q50, _q51, _q41, _q42, _q20, _q101, _q120, _q100 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case NE_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  if (tree_swap_operands_p (_q50, _q51))
						    std::swap (_q50, _q51);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q100 = gimple_assign_rhs1 (_a4);
								  _q100 = do_valueize (valueize, _q100);
								  tree _q101 = gimple_assign_rhs2 (_a4);
								  _q101 = do_valueize (valueize, _q101);
								  if (tree_swap_operands_p (_q100, _q101))
								    std::swap (_q100, _q101);
								  switch (TREE_CODE (_q100))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q100))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q110 = gimple_assign_rhs1 (_a5);
										  _q110 = do_valueize (valueize, _q110);
										  tree _q111 = gimple_assign_rhs2 (_a5);
										  _q111 = do_valueize (valueize, _q111);
										  tree _q112 = gimple_assign_rhs3 (_a5);
										  _q112 = do_valueize (valueize, _q112);
										  switch (TREE_CODE (_q110))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q110))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case EQ_EXPR:
											        {
												  tree _q120 = gimple_assign_rhs1 (_a6);
												  _q120 = do_valueize (valueize, _q120);
												  tree _q121 = gimple_assign_rhs2 (_a6);
												  _q121 = do_valueize (valueize, _q121);
												  if (tree_swap_operands_p (_q120, _q121))
												    std::swap (_q120, _q121);
												  if ((_q120 == _q50 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q50, 0) && types_match (_q120, _q50)))
												    {
												      if ((_q121 == _q51 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q51, 0) && types_match (_q121, _q51)))
													{
													  if ((_q111 == _q41 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q41, 0) && types_match (_q111, _q41)))
													    {
													      if ((_q112 == _q42 && ! TREE_SIDE_EFFECTS (_q112)) || (operand_equal_p (_q112, _q42, 0) && types_match (_q112, _q42)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q21, _q40, _q50, _q51, _q41, _q42, _q20, _q100, _q110, _q101 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q101))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q101))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q120 = gimple_assign_rhs1 (_a5);
										  _q120 = do_valueize (valueize, _q120);
										  tree _q121 = gimple_assign_rhs2 (_a5);
										  _q121 = do_valueize (valueize, _q121);
										  tree _q122 = gimple_assign_rhs3 (_a5);
										  _q122 = do_valueize (valueize, _q122);
										  switch (TREE_CODE (_q120))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q120))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case EQ_EXPR:
											        {
												  tree _q130 = gimple_assign_rhs1 (_a6);
												  _q130 = do_valueize (valueize, _q130);
												  tree _q131 = gimple_assign_rhs2 (_a6);
												  _q131 = do_valueize (valueize, _q131);
												  if (tree_swap_operands_p (_q130, _q131))
												    std::swap (_q130, _q131);
												  if ((_q130 == _q50 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q50, 0) && types_match (_q130, _q50)))
												    {
												      if ((_q131 == _q51 && ! TREE_SIDE_EFFECTS (_q131)) || (operand_equal_p (_q131, _q51, 0) && types_match (_q131, _q51)))
													{
													  if ((_q121 == _q41 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q41, 0) && types_match (_q121, _q41)))
													    {
													      if ((_q122 == _q42 && ! TREE_SIDE_EFFECTS (_q122)) || (operand_equal_p (_q122, _q42, 0) && types_match (_q122, _q42)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q21, _q40, _q50, _q51, _q41, _q42, _q20, _q101, _q120, _q100 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case GE_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q100 = gimple_assign_rhs1 (_a4);
								  _q100 = do_valueize (valueize, _q100);
								  tree _q101 = gimple_assign_rhs2 (_a4);
								  _q101 = do_valueize (valueize, _q101);
								  if (tree_swap_operands_p (_q100, _q101))
								    std::swap (_q100, _q101);
								  switch (TREE_CODE (_q100))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q100))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q110 = gimple_assign_rhs1 (_a5);
										  _q110 = do_valueize (valueize, _q110);
										  tree _q111 = gimple_assign_rhs2 (_a5);
										  _q111 = do_valueize (valueize, _q111);
										  tree _q112 = gimple_assign_rhs3 (_a5);
										  _q112 = do_valueize (valueize, _q112);
										  switch (TREE_CODE (_q110))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q110))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LT_EXPR:
											        {
												  tree _q120 = gimple_assign_rhs1 (_a6);
												  _q120 = do_valueize (valueize, _q120);
												  tree _q121 = gimple_assign_rhs2 (_a6);
												  _q121 = do_valueize (valueize, _q121);
												  if ((_q120 == _q50 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q50, 0) && types_match (_q120, _q50)))
												    {
												      if ((_q121 == _q51 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q51, 0) && types_match (_q121, _q51)))
													{
													  if ((_q111 == _q41 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q41, 0) && types_match (_q111, _q41)))
													    {
													      if ((_q112 == _q42 && ! TREE_SIDE_EFFECTS (_q112)) || (operand_equal_p (_q112, _q42, 0) && types_match (_q112, _q42)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q21, _q40, _q50, _q51, _q41, _q42, _q20, _q100, _q110, _q101 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, GE_EXPR, LT_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q101))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q101))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q120 = gimple_assign_rhs1 (_a5);
										  _q120 = do_valueize (valueize, _q120);
										  tree _q121 = gimple_assign_rhs2 (_a5);
										  _q121 = do_valueize (valueize, _q121);
										  tree _q122 = gimple_assign_rhs3 (_a5);
										  _q122 = do_valueize (valueize, _q122);
										  switch (TREE_CODE (_q120))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q120))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LT_EXPR:
											        {
												  tree _q130 = gimple_assign_rhs1 (_a6);
												  _q130 = do_valueize (valueize, _q130);
												  tree _q131 = gimple_assign_rhs2 (_a6);
												  _q131 = do_valueize (valueize, _q131);
												  if ((_q130 == _q50 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q50, 0) && types_match (_q130, _q50)))
												    {
												      if ((_q131 == _q51 && ! TREE_SIDE_EFFECTS (_q131)) || (operand_equal_p (_q131, _q51, 0) && types_match (_q131, _q51)))
													{
													  if ((_q121 == _q41 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q41, 0) && types_match (_q121, _q41)))
													    {
													      if ((_q122 == _q42 && ! TREE_SIDE_EFFECTS (_q122)) || (operand_equal_p (_q122, _q42, 0) && types_match (_q122, _q42)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q21, _q40, _q50, _q51, _q41, _q42, _q20, _q101, _q120, _q100 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, GE_EXPR, LT_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case GT_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q100 = gimple_assign_rhs1 (_a4);
								  _q100 = do_valueize (valueize, _q100);
								  tree _q101 = gimple_assign_rhs2 (_a4);
								  _q101 = do_valueize (valueize, _q101);
								  if (tree_swap_operands_p (_q100, _q101))
								    std::swap (_q100, _q101);
								  switch (TREE_CODE (_q100))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q100))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q110 = gimple_assign_rhs1 (_a5);
										  _q110 = do_valueize (valueize, _q110);
										  tree _q111 = gimple_assign_rhs2 (_a5);
										  _q111 = do_valueize (valueize, _q111);
										  tree _q112 = gimple_assign_rhs3 (_a5);
										  _q112 = do_valueize (valueize, _q112);
										  switch (TREE_CODE (_q110))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q110))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LE_EXPR:
											        {
												  tree _q120 = gimple_assign_rhs1 (_a6);
												  _q120 = do_valueize (valueize, _q120);
												  tree _q121 = gimple_assign_rhs2 (_a6);
												  _q121 = do_valueize (valueize, _q121);
												  if ((_q120 == _q50 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q50, 0) && types_match (_q120, _q50)))
												    {
												      if ((_q121 == _q51 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q51, 0) && types_match (_q121, _q51)))
													{
													  if ((_q111 == _q41 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q41, 0) && types_match (_q111, _q41)))
													    {
													      if ((_q112 == _q42 && ! TREE_SIDE_EFFECTS (_q112)) || (operand_equal_p (_q112, _q42, 0) && types_match (_q112, _q42)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q21, _q40, _q50, _q51, _q41, _q42, _q20, _q100, _q110, _q101 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, GT_EXPR, LE_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q101))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q101))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q120 = gimple_assign_rhs1 (_a5);
										  _q120 = do_valueize (valueize, _q120);
										  tree _q121 = gimple_assign_rhs2 (_a5);
										  _q121 = do_valueize (valueize, _q121);
										  tree _q122 = gimple_assign_rhs3 (_a5);
										  _q122 = do_valueize (valueize, _q122);
										  switch (TREE_CODE (_q120))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q120))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LE_EXPR:
											        {
												  tree _q130 = gimple_assign_rhs1 (_a6);
												  _q130 = do_valueize (valueize, _q130);
												  tree _q131 = gimple_assign_rhs2 (_a6);
												  _q131 = do_valueize (valueize, _q131);
												  if ((_q130 == _q50 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q50, 0) && types_match (_q130, _q50)))
												    {
												      if ((_q131 == _q51 && ! TREE_SIDE_EFFECTS (_q131)) || (operand_equal_p (_q131, _q51, 0) && types_match (_q131, _q51)))
													{
													  if ((_q121 == _q41 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q41, 0) && types_match (_q121, _q41)))
													    {
													      if ((_q122 == _q42 && ! TREE_SIDE_EFFECTS (_q122)) || (operand_equal_p (_q122, _q42, 0) && types_match (_q122, _q42)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q21, _q40, _q50, _q51, _q41, _q42, _q20, _q101, _q120, _q100 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, GT_EXPR, LE_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case UNORDERED_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  if (tree_swap_operands_p (_q50, _q51))
						    std::swap (_q50, _q51);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q100 = gimple_assign_rhs1 (_a4);
								  _q100 = do_valueize (valueize, _q100);
								  tree _q101 = gimple_assign_rhs2 (_a4);
								  _q101 = do_valueize (valueize, _q101);
								  if (tree_swap_operands_p (_q100, _q101))
								    std::swap (_q100, _q101);
								  switch (TREE_CODE (_q100))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q100))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q110 = gimple_assign_rhs1 (_a5);
										  _q110 = do_valueize (valueize, _q110);
										  tree _q111 = gimple_assign_rhs2 (_a5);
										  _q111 = do_valueize (valueize, _q111);
										  tree _q112 = gimple_assign_rhs3 (_a5);
										  _q112 = do_valueize (valueize, _q112);
										  switch (TREE_CODE (_q110))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q110))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case ORDERED_EXPR:
											        {
												  tree _q120 = gimple_assign_rhs1 (_a6);
												  _q120 = do_valueize (valueize, _q120);
												  tree _q121 = gimple_assign_rhs2 (_a6);
												  _q121 = do_valueize (valueize, _q121);
												  if (tree_swap_operands_p (_q120, _q121))
												    std::swap (_q120, _q121);
												  if ((_q120 == _q50 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q50, 0) && types_match (_q120, _q50)))
												    {
												      if ((_q121 == _q51 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q51, 0) && types_match (_q121, _q51)))
													{
													  if ((_q111 == _q41 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q41, 0) && types_match (_q111, _q41)))
													    {
													      if ((_q112 == _q42 && ! TREE_SIDE_EFFECTS (_q112)) || (operand_equal_p (_q112, _q42, 0) && types_match (_q112, _q42)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q21, _q40, _q50, _q51, _q41, _q42, _q20, _q100, _q110, _q101 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, UNORDERED_EXPR, ORDERED_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q101))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q101))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q120 = gimple_assign_rhs1 (_a5);
										  _q120 = do_valueize (valueize, _q120);
										  tree _q121 = gimple_assign_rhs2 (_a5);
										  _q121 = do_valueize (valueize, _q121);
										  tree _q122 = gimple_assign_rhs3 (_a5);
										  _q122 = do_valueize (valueize, _q122);
										  switch (TREE_CODE (_q120))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q120))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case ORDERED_EXPR:
											        {
												  tree _q130 = gimple_assign_rhs1 (_a6);
												  _q130 = do_valueize (valueize, _q130);
												  tree _q131 = gimple_assign_rhs2 (_a6);
												  _q131 = do_valueize (valueize, _q131);
												  if (tree_swap_operands_p (_q130, _q131))
												    std::swap (_q130, _q131);
												  if ((_q130 == _q50 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q50, 0) && types_match (_q130, _q50)))
												    {
												      if ((_q131 == _q51 && ! TREE_SIDE_EFFECTS (_q131)) || (operand_equal_p (_q131, _q51, 0) && types_match (_q131, _q51)))
													{
													  if ((_q121 == _q41 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q41, 0) && types_match (_q121, _q41)))
													    {
													      if ((_q122 == _q42 && ! TREE_SIDE_EFFECTS (_q122)) || (operand_equal_p (_q122, _q42, 0) && types_match (_q122, _q42)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q21, _q40, _q50, _q51, _q41, _q42, _q20, _q101, _q120, _q100 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, UNORDERED_EXPR, ORDERED_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case ORDERED_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  if (tree_swap_operands_p (_q50, _q51))
						    std::swap (_q50, _q51);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q100 = gimple_assign_rhs1 (_a4);
								  _q100 = do_valueize (valueize, _q100);
								  tree _q101 = gimple_assign_rhs2 (_a4);
								  _q101 = do_valueize (valueize, _q101);
								  if (tree_swap_operands_p (_q100, _q101))
								    std::swap (_q100, _q101);
								  switch (TREE_CODE (_q100))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q100))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q110 = gimple_assign_rhs1 (_a5);
										  _q110 = do_valueize (valueize, _q110);
										  tree _q111 = gimple_assign_rhs2 (_a5);
										  _q111 = do_valueize (valueize, _q111);
										  tree _q112 = gimple_assign_rhs3 (_a5);
										  _q112 = do_valueize (valueize, _q112);
										  switch (TREE_CODE (_q110))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q110))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case UNORDERED_EXPR:
											        {
												  tree _q120 = gimple_assign_rhs1 (_a6);
												  _q120 = do_valueize (valueize, _q120);
												  tree _q121 = gimple_assign_rhs2 (_a6);
												  _q121 = do_valueize (valueize, _q121);
												  if (tree_swap_operands_p (_q120, _q121))
												    std::swap (_q120, _q121);
												  if ((_q120 == _q50 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q50, 0) && types_match (_q120, _q50)))
												    {
												      if ((_q121 == _q51 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q51, 0) && types_match (_q121, _q51)))
													{
													  if ((_q111 == _q41 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q41, 0) && types_match (_q111, _q41)))
													    {
													      if ((_q112 == _q42 && ! TREE_SIDE_EFFECTS (_q112)) || (operand_equal_p (_q112, _q42, 0) && types_match (_q112, _q42)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q21, _q40, _q50, _q51, _q41, _q42, _q20, _q100, _q110, _q101 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, ORDERED_EXPR, UNORDERED_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q101))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q101))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q120 = gimple_assign_rhs1 (_a5);
										  _q120 = do_valueize (valueize, _q120);
										  tree _q121 = gimple_assign_rhs2 (_a5);
										  _q121 = do_valueize (valueize, _q121);
										  tree _q122 = gimple_assign_rhs3 (_a5);
										  _q122 = do_valueize (valueize, _q122);
										  switch (TREE_CODE (_q120))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q120))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case UNORDERED_EXPR:
											        {
												  tree _q130 = gimple_assign_rhs1 (_a6);
												  _q130 = do_valueize (valueize, _q130);
												  tree _q131 = gimple_assign_rhs2 (_a6);
												  _q131 = do_valueize (valueize, _q131);
												  if (tree_swap_operands_p (_q130, _q131))
												    std::swap (_q130, _q131);
												  if ((_q130 == _q50 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q50, 0) && types_match (_q130, _q50)))
												    {
												      if ((_q131 == _q51 && ! TREE_SIDE_EFFECTS (_q131)) || (operand_equal_p (_q131, _q51, 0) && types_match (_q131, _q51)))
													{
													  if ((_q121 == _q41 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q41, 0) && types_match (_q121, _q41)))
													    {
													      if ((_q122 == _q42 && ! TREE_SIDE_EFFECTS (_q122)) || (operand_equal_p (_q122, _q42, 0) && types_match (_q122, _q42)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q21, _q40, _q50, _q51, _q41, _q42, _q20, _q101, _q120, _q100 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, ORDERED_EXPR, UNORDERED_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case UNLT_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q100 = gimple_assign_rhs1 (_a4);
								  _q100 = do_valueize (valueize, _q100);
								  tree _q101 = gimple_assign_rhs2 (_a4);
								  _q101 = do_valueize (valueize, _q101);
								  if (tree_swap_operands_p (_q100, _q101))
								    std::swap (_q100, _q101);
								  switch (TREE_CODE (_q100))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q100))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q110 = gimple_assign_rhs1 (_a5);
										  _q110 = do_valueize (valueize, _q110);
										  tree _q111 = gimple_assign_rhs2 (_a5);
										  _q111 = do_valueize (valueize, _q111);
										  tree _q112 = gimple_assign_rhs3 (_a5);
										  _q112 = do_valueize (valueize, _q112);
										  switch (TREE_CODE (_q110))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q110))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case GE_EXPR:
											        {
												  tree _q120 = gimple_assign_rhs1 (_a6);
												  _q120 = do_valueize (valueize, _q120);
												  tree _q121 = gimple_assign_rhs2 (_a6);
												  _q121 = do_valueize (valueize, _q121);
												  if ((_q120 == _q50 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q50, 0) && types_match (_q120, _q50)))
												    {
												      if ((_q121 == _q51 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q51, 0) && types_match (_q121, _q51)))
													{
													  if ((_q111 == _q41 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q41, 0) && types_match (_q111, _q41)))
													    {
													      if ((_q112 == _q42 && ! TREE_SIDE_EFFECTS (_q112)) || (operand_equal_p (_q112, _q42, 0) && types_match (_q112, _q42)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q21, _q40, _q50, _q51, _q41, _q42, _q20, _q100, _q110, _q101 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, UNLT_EXPR, GE_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q101))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q101))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q120 = gimple_assign_rhs1 (_a5);
										  _q120 = do_valueize (valueize, _q120);
										  tree _q121 = gimple_assign_rhs2 (_a5);
										  _q121 = do_valueize (valueize, _q121);
										  tree _q122 = gimple_assign_rhs3 (_a5);
										  _q122 = do_valueize (valueize, _q122);
										  switch (TREE_CODE (_q120))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q120))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case GE_EXPR:
											        {
												  tree _q130 = gimple_assign_rhs1 (_a6);
												  _q130 = do_valueize (valueize, _q130);
												  tree _q131 = gimple_assign_rhs2 (_a6);
												  _q131 = do_valueize (valueize, _q131);
												  if ((_q130 == _q50 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q50, 0) && types_match (_q130, _q50)))
												    {
												      if ((_q131 == _q51 && ! TREE_SIDE_EFFECTS (_q131)) || (operand_equal_p (_q131, _q51, 0) && types_match (_q131, _q51)))
													{
													  if ((_q121 == _q41 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q41, 0) && types_match (_q121, _q41)))
													    {
													      if ((_q122 == _q42 && ! TREE_SIDE_EFFECTS (_q122)) || (operand_equal_p (_q122, _q42, 0) && types_match (_q122, _q42)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q21, _q40, _q50, _q51, _q41, _q42, _q20, _q101, _q120, _q100 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, UNLT_EXPR, GE_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case UNLE_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q100 = gimple_assign_rhs1 (_a4);
								  _q100 = do_valueize (valueize, _q100);
								  tree _q101 = gimple_assign_rhs2 (_a4);
								  _q101 = do_valueize (valueize, _q101);
								  if (tree_swap_operands_p (_q100, _q101))
								    std::swap (_q100, _q101);
								  switch (TREE_CODE (_q100))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q100))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q110 = gimple_assign_rhs1 (_a5);
										  _q110 = do_valueize (valueize, _q110);
										  tree _q111 = gimple_assign_rhs2 (_a5);
										  _q111 = do_valueize (valueize, _q111);
										  tree _q112 = gimple_assign_rhs3 (_a5);
										  _q112 = do_valueize (valueize, _q112);
										  switch (TREE_CODE (_q110))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q110))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case GT_EXPR:
											        {
												  tree _q120 = gimple_assign_rhs1 (_a6);
												  _q120 = do_valueize (valueize, _q120);
												  tree _q121 = gimple_assign_rhs2 (_a6);
												  _q121 = do_valueize (valueize, _q121);
												  if ((_q120 == _q50 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q50, 0) && types_match (_q120, _q50)))
												    {
												      if ((_q121 == _q51 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q51, 0) && types_match (_q121, _q51)))
													{
													  if ((_q111 == _q41 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q41, 0) && types_match (_q111, _q41)))
													    {
													      if ((_q112 == _q42 && ! TREE_SIDE_EFFECTS (_q112)) || (operand_equal_p (_q112, _q42, 0) && types_match (_q112, _q42)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q21, _q40, _q50, _q51, _q41, _q42, _q20, _q100, _q110, _q101 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, UNLE_EXPR, GT_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q101))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q101))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q120 = gimple_assign_rhs1 (_a5);
										  _q120 = do_valueize (valueize, _q120);
										  tree _q121 = gimple_assign_rhs2 (_a5);
										  _q121 = do_valueize (valueize, _q121);
										  tree _q122 = gimple_assign_rhs3 (_a5);
										  _q122 = do_valueize (valueize, _q122);
										  switch (TREE_CODE (_q120))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q120))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case GT_EXPR:
											        {
												  tree _q130 = gimple_assign_rhs1 (_a6);
												  _q130 = do_valueize (valueize, _q130);
												  tree _q131 = gimple_assign_rhs2 (_a6);
												  _q131 = do_valueize (valueize, _q131);
												  if ((_q130 == _q50 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q50, 0) && types_match (_q130, _q50)))
												    {
												      if ((_q131 == _q51 && ! TREE_SIDE_EFFECTS (_q131)) || (operand_equal_p (_q131, _q51, 0) && types_match (_q131, _q51)))
													{
													  if ((_q121 == _q41 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q41, 0) && types_match (_q121, _q41)))
													    {
													      if ((_q122 == _q42 && ! TREE_SIDE_EFFECTS (_q122)) || (operand_equal_p (_q122, _q42, 0) && types_match (_q122, _q42)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q21, _q40, _q50, _q51, _q41, _q42, _q20, _q101, _q120, _q100 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, UNLE_EXPR, GT_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case UNGT_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q100 = gimple_assign_rhs1 (_a4);
								  _q100 = do_valueize (valueize, _q100);
								  tree _q101 = gimple_assign_rhs2 (_a4);
								  _q101 = do_valueize (valueize, _q101);
								  if (tree_swap_operands_p (_q100, _q101))
								    std::swap (_q100, _q101);
								  switch (TREE_CODE (_q100))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q100))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q110 = gimple_assign_rhs1 (_a5);
										  _q110 = do_valueize (valueize, _q110);
										  tree _q111 = gimple_assign_rhs2 (_a5);
										  _q111 = do_valueize (valueize, _q111);
										  tree _q112 = gimple_assign_rhs3 (_a5);
										  _q112 = do_valueize (valueize, _q112);
										  switch (TREE_CODE (_q110))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q110))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LE_EXPR:
											        {
												  tree _q120 = gimple_assign_rhs1 (_a6);
												  _q120 = do_valueize (valueize, _q120);
												  tree _q121 = gimple_assign_rhs2 (_a6);
												  _q121 = do_valueize (valueize, _q121);
												  if ((_q120 == _q50 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q50, 0) && types_match (_q120, _q50)))
												    {
												      if ((_q121 == _q51 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q51, 0) && types_match (_q121, _q51)))
													{
													  if ((_q111 == _q41 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q41, 0) && types_match (_q111, _q41)))
													    {
													      if ((_q112 == _q42 && ! TREE_SIDE_EFFECTS (_q112)) || (operand_equal_p (_q112, _q42, 0) && types_match (_q112, _q42)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q21, _q40, _q50, _q51, _q41, _q42, _q20, _q100, _q110, _q101 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, UNGT_EXPR, LE_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q101))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q101))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q120 = gimple_assign_rhs1 (_a5);
										  _q120 = do_valueize (valueize, _q120);
										  tree _q121 = gimple_assign_rhs2 (_a5);
										  _q121 = do_valueize (valueize, _q121);
										  tree _q122 = gimple_assign_rhs3 (_a5);
										  _q122 = do_valueize (valueize, _q122);
										  switch (TREE_CODE (_q120))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q120))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LE_EXPR:
											        {
												  tree _q130 = gimple_assign_rhs1 (_a6);
												  _q130 = do_valueize (valueize, _q130);
												  tree _q131 = gimple_assign_rhs2 (_a6);
												  _q131 = do_valueize (valueize, _q131);
												  if ((_q130 == _q50 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q50, 0) && types_match (_q130, _q50)))
												    {
												      if ((_q131 == _q51 && ! TREE_SIDE_EFFECTS (_q131)) || (operand_equal_p (_q131, _q51, 0) && types_match (_q131, _q51)))
													{
													  if ((_q121 == _q41 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q41, 0) && types_match (_q121, _q41)))
													    {
													      if ((_q122 == _q42 && ! TREE_SIDE_EFFECTS (_q122)) || (operand_equal_p (_q122, _q42, 0) && types_match (_q122, _q42)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q21, _q40, _q50, _q51, _q41, _q42, _q20, _q101, _q120, _q100 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, UNGT_EXPR, LE_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case UNGE_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q100 = gimple_assign_rhs1 (_a4);
								  _q100 = do_valueize (valueize, _q100);
								  tree _q101 = gimple_assign_rhs2 (_a4);
								  _q101 = do_valueize (valueize, _q101);
								  if (tree_swap_operands_p (_q100, _q101))
								    std::swap (_q100, _q101);
								  switch (TREE_CODE (_q100))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q100))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q110 = gimple_assign_rhs1 (_a5);
										  _q110 = do_valueize (valueize, _q110);
										  tree _q111 = gimple_assign_rhs2 (_a5);
										  _q111 = do_valueize (valueize, _q111);
										  tree _q112 = gimple_assign_rhs3 (_a5);
										  _q112 = do_valueize (valueize, _q112);
										  switch (TREE_CODE (_q110))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q110))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LT_EXPR:
											        {
												  tree _q120 = gimple_assign_rhs1 (_a6);
												  _q120 = do_valueize (valueize, _q120);
												  tree _q121 = gimple_assign_rhs2 (_a6);
												  _q121 = do_valueize (valueize, _q121);
												  if ((_q120 == _q50 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q50, 0) && types_match (_q120, _q50)))
												    {
												      if ((_q121 == _q51 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q51, 0) && types_match (_q121, _q51)))
													{
													  if ((_q111 == _q41 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q41, 0) && types_match (_q111, _q41)))
													    {
													      if ((_q112 == _q42 && ! TREE_SIDE_EFFECTS (_q112)) || (operand_equal_p (_q112, _q42, 0) && types_match (_q112, _q42)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q21, _q40, _q50, _q51, _q41, _q42, _q20, _q100, _q110, _q101 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, UNGE_EXPR, LT_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q101))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q101))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q120 = gimple_assign_rhs1 (_a5);
										  _q120 = do_valueize (valueize, _q120);
										  tree _q121 = gimple_assign_rhs2 (_a5);
										  _q121 = do_valueize (valueize, _q121);
										  tree _q122 = gimple_assign_rhs3 (_a5);
										  _q122 = do_valueize (valueize, _q122);
										  switch (TREE_CODE (_q120))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q120))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LT_EXPR:
											        {
												  tree _q130 = gimple_assign_rhs1 (_a6);
												  _q130 = do_valueize (valueize, _q130);
												  tree _q131 = gimple_assign_rhs2 (_a6);
												  _q131 = do_valueize (valueize, _q131);
												  if ((_q130 == _q50 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q50, 0) && types_match (_q130, _q50)))
												    {
												      if ((_q131 == _q51 && ! TREE_SIDE_EFFECTS (_q131)) || (operand_equal_p (_q131, _q51, 0) && types_match (_q131, _q51)))
													{
													  if ((_q121 == _q41 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q41, 0) && types_match (_q121, _q41)))
													    {
													      if ((_q122 == _q42 && ! TREE_SIDE_EFFECTS (_q122)) || (operand_equal_p (_q122, _q42, 0) && types_match (_q122, _q42)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q21, _q40, _q50, _q51, _q41, _q42, _q20, _q101, _q120, _q100 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, UNGE_EXPR, LT_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case UNEQ_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  if (tree_swap_operands_p (_q50, _q51))
						    std::swap (_q50, _q51);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q100 = gimple_assign_rhs1 (_a4);
								  _q100 = do_valueize (valueize, _q100);
								  tree _q101 = gimple_assign_rhs2 (_a4);
								  _q101 = do_valueize (valueize, _q101);
								  if (tree_swap_operands_p (_q100, _q101))
								    std::swap (_q100, _q101);
								  switch (TREE_CODE (_q100))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q100))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q110 = gimple_assign_rhs1 (_a5);
										  _q110 = do_valueize (valueize, _q110);
										  tree _q111 = gimple_assign_rhs2 (_a5);
										  _q111 = do_valueize (valueize, _q111);
										  tree _q112 = gimple_assign_rhs3 (_a5);
										  _q112 = do_valueize (valueize, _q112);
										  switch (TREE_CODE (_q110))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q110))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LTGT_EXPR:
											        {
												  tree _q120 = gimple_assign_rhs1 (_a6);
												  _q120 = do_valueize (valueize, _q120);
												  tree _q121 = gimple_assign_rhs2 (_a6);
												  _q121 = do_valueize (valueize, _q121);
												  if (tree_swap_operands_p (_q120, _q121))
												    std::swap (_q120, _q121);
												  if ((_q120 == _q50 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q50, 0) && types_match (_q120, _q50)))
												    {
												      if ((_q121 == _q51 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q51, 0) && types_match (_q121, _q51)))
													{
													  if ((_q111 == _q41 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q41, 0) && types_match (_q111, _q41)))
													    {
													      if ((_q112 == _q42 && ! TREE_SIDE_EFFECTS (_q112)) || (operand_equal_p (_q112, _q42, 0) && types_match (_q112, _q42)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q21, _q40, _q50, _q51, _q41, _q42, _q20, _q100, _q110, _q101 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, UNEQ_EXPR, LTGT_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q101))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q101))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q120 = gimple_assign_rhs1 (_a5);
										  _q120 = do_valueize (valueize, _q120);
										  tree _q121 = gimple_assign_rhs2 (_a5);
										  _q121 = do_valueize (valueize, _q121);
										  tree _q122 = gimple_assign_rhs3 (_a5);
										  _q122 = do_valueize (valueize, _q122);
										  switch (TREE_CODE (_q120))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q120))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case LTGT_EXPR:
											        {
												  tree _q130 = gimple_assign_rhs1 (_a6);
												  _q130 = do_valueize (valueize, _q130);
												  tree _q131 = gimple_assign_rhs2 (_a6);
												  _q131 = do_valueize (valueize, _q131);
												  if (tree_swap_operands_p (_q130, _q131))
												    std::swap (_q130, _q131);
												  if ((_q130 == _q50 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q50, 0) && types_match (_q130, _q50)))
												    {
												      if ((_q131 == _q51 && ! TREE_SIDE_EFFECTS (_q131)) || (operand_equal_p (_q131, _q51, 0) && types_match (_q131, _q51)))
													{
													  if ((_q121 == _q41 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q41, 0) && types_match (_q121, _q41)))
													    {
													      if ((_q122 == _q42 && ! TREE_SIDE_EFFECTS (_q122)) || (operand_equal_p (_q122, _q42, 0) && types_match (_q122, _q42)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q21, _q40, _q50, _q51, _q41, _q42, _q20, _q101, _q120, _q100 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, UNEQ_EXPR, LTGT_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      case LTGT_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  if (tree_swap_operands_p (_q50, _q51))
						    std::swap (_q50, _q51);
						  switch (TREE_CODE (_p1))
						    {
						    case SSA_NAME:
						      if (gimple *_d4 = get_def (valueize, _p1))
						        {
							  if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							    switch (gimple_assign_rhs_code (_a4))
							      {
							      case BIT_AND_EXPR:
							        {
								  tree _q100 = gimple_assign_rhs1 (_a4);
								  _q100 = do_valueize (valueize, _q100);
								  tree _q101 = gimple_assign_rhs2 (_a4);
								  _q101 = do_valueize (valueize, _q101);
								  if (tree_swap_operands_p (_q100, _q101))
								    std::swap (_q100, _q101);
								  switch (TREE_CODE (_q100))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q100))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q110 = gimple_assign_rhs1 (_a5);
										  _q110 = do_valueize (valueize, _q110);
										  tree _q111 = gimple_assign_rhs2 (_a5);
										  _q111 = do_valueize (valueize, _q111);
										  tree _q112 = gimple_assign_rhs3 (_a5);
										  _q112 = do_valueize (valueize, _q112);
										  switch (TREE_CODE (_q110))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q110))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case UNEQ_EXPR:
											        {
												  tree _q120 = gimple_assign_rhs1 (_a6);
												  _q120 = do_valueize (valueize, _q120);
												  tree _q121 = gimple_assign_rhs2 (_a6);
												  _q121 = do_valueize (valueize, _q121);
												  if (tree_swap_operands_p (_q120, _q121))
												    std::swap (_q120, _q121);
												  if ((_q120 == _q50 && ! TREE_SIDE_EFFECTS (_q120)) || (operand_equal_p (_q120, _q50, 0) && types_match (_q120, _q50)))
												    {
												      if ((_q121 == _q51 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q51, 0) && types_match (_q121, _q51)))
													{
													  if ((_q111 == _q41 && ! TREE_SIDE_EFFECTS (_q111)) || (operand_equal_p (_q111, _q41, 0) && types_match (_q111, _q41)))
													    {
													      if ((_q112 == _q42 && ! TREE_SIDE_EFFECTS (_q112)) || (operand_equal_p (_q112, _q42, 0) && types_match (_q112, _q42)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q21, _q40, _q50, _q51, _q41, _q42, _q20, _q100, _q110, _q101 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, LTGT_EXPR, UNEQ_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
								  switch (TREE_CODE (_q101))
								    {
								    case SSA_NAME:
								      if (gimple *_d5 = get_def (valueize, _q101))
								        {
									  if (gassign *_a5 = dyn_cast <gassign *> (_d5))
									    switch (gimple_assign_rhs_code (_a5))
									      {
									      case VEC_COND_EXPR:
									        {
										  tree _q120 = gimple_assign_rhs1 (_a5);
										  _q120 = do_valueize (valueize, _q120);
										  tree _q121 = gimple_assign_rhs2 (_a5);
										  _q121 = do_valueize (valueize, _q121);
										  tree _q122 = gimple_assign_rhs3 (_a5);
										  _q122 = do_valueize (valueize, _q122);
										  switch (TREE_CODE (_q120))
										    {
										    case SSA_NAME:
										      if (gimple *_d6 = get_def (valueize, _q120))
										        {
											  if (gassign *_a6 = dyn_cast <gassign *> (_d6))
											    switch (gimple_assign_rhs_code (_a6))
											      {
											      case UNEQ_EXPR:
											        {
												  tree _q130 = gimple_assign_rhs1 (_a6);
												  _q130 = do_valueize (valueize, _q130);
												  tree _q131 = gimple_assign_rhs2 (_a6);
												  _q131 = do_valueize (valueize, _q131);
												  if (tree_swap_operands_p (_q130, _q131))
												    std::swap (_q130, _q131);
												  if ((_q130 == _q50 && ! TREE_SIDE_EFFECTS (_q130)) || (operand_equal_p (_q130, _q50, 0) && types_match (_q130, _q50)))
												    {
												      if ((_q131 == _q51 && ! TREE_SIDE_EFFECTS (_q131)) || (operand_equal_p (_q131, _q51, 0) && types_match (_q131, _q51)))
													{
													  if ((_q121 == _q41 && ! TREE_SIDE_EFFECTS (_q121)) || (operand_equal_p (_q121, _q41, 0) && types_match (_q121, _q41)))
													    {
													      if ((_q122 == _q42 && ! TREE_SIDE_EFFECTS (_q122)) || (operand_equal_p (_q122, _q42, 0) && types_match (_q122, _q42)))
														{
														  {
														    tree captures[10] ATTRIBUTE_UNUSED = { _q21, _q40, _q50, _q51, _q41, _q42, _q20, _q101, _q120, _q100 };
														    if (gimple_simplify_154 (res_op, seq, valueize, type, captures, LTGT_EXPR, UNEQ_EXPR))
														      return true;
														  }
													        }
													    }
												        }
												    }
											          break;
											        }
											      default:;
											      }
										        }
										      break;
										    default:;
										    }
									          break;
									        }
									      default:;
									      }
								        }
								      break;
								    default:;
								    }
							          break;
							        }
							      default:;
							      }
						        }
						      break;
						    default:;
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case BIT_NOT_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q61 == _q40 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q40, 0) && types_match (_q61, _q40)))
						    {
						      {
							tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q40, _p1, _q60 };
							if (gimple_simplify_155 (res_op, seq, valueize, type, captures))
							  return true;
						      }
						    }
						  if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
						    {
						      {
							tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q40, _p1, _q61 };
							if (gimple_simplify_155 (res_op, seq, valueize, type, captures))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_NOT_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_AND_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q61 == _q30 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q30, 0) && types_match (_q61, _q30)))
						    {
						      {
							tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q21, _q30, _p1, _q60 };
							if (gimple_simplify_155 (res_op, seq, valueize, type, captures))
							  return true;
						      }
						    }
						  if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
						    {
						      {
							tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q21, _q30, _p1, _q61 };
							if (gimple_simplify_155 (res_op, seq, valueize, type, captures))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_AND_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  switch (TREE_CODE (_q51))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q51))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_NOT_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						    {
						      {
							tree captures[5] ATTRIBUTE_UNUSED = { _p1, _q50, _q21, _p0, _q20 };
							if (gimple_simplify_155 (res_op, seq, valueize, type, captures))
							  return true;
						      }
						    }
						  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						    {
						      {
							tree captures[5] ATTRIBUTE_UNUSED = { _p1, _q50, _q20, _p0, _q21 };
							if (gimple_simplify_155 (res_op, seq, valueize, type, captures))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  switch (TREE_CODE (_q50))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q50))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_NOT_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
						    {
						      {
							tree captures[5] ATTRIBUTE_UNUSED = { _p1, _q51, _q21, _p0, _q20 };
							if (gimple_simplify_155 (res_op, seq, valueize, type, captures))
							  return true;
						      }
						    }
						  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
						    {
						      {
							tree captures[5] ATTRIBUTE_UNUSED = { _p1, _q51, _q20, _p0, _q21 };
							if (gimple_simplify_155 (res_op, seq, valueize, type, captures))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case BIT_XOR_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case INTEGER_CST:
			    {
			      {
				tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1 };
				if (gimple_simplify_41 (res_op, seq, valueize, type, captures, BIT_XOR_EXPR, BIT_IOR_EXPR))
				  return true;
			      }
			      break;
			    }
		          default:;
		          }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case GT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case NE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if (gimple_min_value (_q51, valueize))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
					    if (gimple_simplify_156 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if (gimple_max_value (_q51, valueize))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
					    if (gimple_simplify_157 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      case EQ_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if (gimple_min_value (_q51, valueize))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _p1, _q20, _p0, _q21 };
					    if (gimple_simplify_158 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case EQ_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q30, _q61, _p0, _q20, _q21 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, GT_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
						  if ((_q61 == _q30 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q30, 0) && types_match (_q61, _q30)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q30, _q60, _p0, _q20, _q21 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, GT_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      case NE_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q30, _q61, _p0, _q20, _q21 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, GT_EXPR, NE_EXPR))
							  return true;
						      }
						    }
						  if ((_q61 == _q30 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q30, 0) && types_match (_q61, _q30)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q30, _q60, _p0, _q20, _q21 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, GT_EXPR, NE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case EQ_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q40, _q61, _p0, _q21, _q20 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, LT_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
						  if ((_q61 == _q40 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q40, 0) && types_match (_q61, _q40)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q40, _q60, _p0, _q21, _q20 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, LT_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      case NE_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q40, _q61, _p0, _q21, _q20 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, LT_EXPR, NE_EXPR))
							  return true;
						      }
						    }
						  if ((_q61 == _q40 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q40, 0) && types_match (_q61, _q40)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q40, _q60, _p0, _q21, _q20 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, LT_EXPR, NE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case EQ_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q20, _q51, _p0, _q20, _q21 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, GT_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q21, _q51, _p0, _q21, _q20 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, LT_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q20, _q50, _p0, _q20, _q21 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, GT_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q21, _q50, _p0, _q21, _q20 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, LT_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case NE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q20, _q51, _p0, _q20, _q21 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, GT_EXPR, NE_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q21, _q51, _p0, _q21, _q20 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, LT_EXPR, NE_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q20, _q50, _p0, _q20, _q21 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, GT_EXPR, NE_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q21, _q50, _p0, _q21, _q20 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, LT_EXPR, NE_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case LT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51 };
					if (gimple_simplify_161 (res_op, seq, valueize, type, captures, LT_EXPR, GT_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case LE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51 };
					if (gimple_simplify_161 (res_op, seq, valueize, type, captures, LE_EXPR, GT_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case GT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51 };
					if (gimple_simplify_161 (res_op, seq, valueize, type, captures, GT_EXPR, GT_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case GE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51 };
					if (gimple_simplify_161 (res_op, seq, valueize, type, captures, GE_EXPR, GT_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_AND_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_q30))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q30))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_XOR_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  if (tree_swap_operands_p (_q40, _q41))
						    std::swap (_q40, _q41);
						  if (tree_expr_nonzero_p (_q31))
						    {
						      switch (TREE_CODE (_p1))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _p1))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case NE_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if (tree_swap_operands_p (_q90, _q91))
								        std::swap (_q90, _q91);
								      if ((_q90 == _q40 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q40, 0) && types_match (_q90, _q40)))
									{
									  if ((_q91 == _q41 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q41, 0) && types_match (_q91, _q41)))
									    {
									      {
										tree captures[5] ATTRIBUTE_UNUSED = { _q40, _q41, _q31, _q21, _p1 };
										if (gimple_simplify_162 (res_op, seq, valueize, type, captures, GT_EXPR))
										  return true;
									      }
									    }
								        }
								      if ((_q90 == _q41 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q41, 0) && types_match (_q90, _q41)))
									{
									  if ((_q91 == _q40 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q40, 0) && types_match (_q91, _q40)))
									    {
									      {
										tree captures[5] ATTRIBUTE_UNUSED = { _q41, _q40, _q31, _q21, _p1 };
										if (gimple_simplify_162 (res_op, seq, valueize, type, captures, GT_EXPR))
										  return true;
									      }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				if (tree_expr_nonzero_p (_q30))
				  {
				    switch (TREE_CODE (_q31))
				      {
				      case SSA_NAME:
				        if (gimple *_d3 = get_def (valueize, _q31))
				          {
					    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					      switch (gimple_assign_rhs_code (_a3))
						{
						case BIT_XOR_EXPR:
						  {
						    tree _q50 = gimple_assign_rhs1 (_a3);
						    _q50 = do_valueize (valueize, _q50);
						    tree _q51 = gimple_assign_rhs2 (_a3);
						    _q51 = do_valueize (valueize, _q51);
						    if (tree_swap_operands_p (_q50, _q51))
						      std::swap (_q50, _q51);
						    switch (TREE_CODE (_p1))
						      {
						      case SSA_NAME:
						        if (gimple *_d4 = get_def (valueize, _p1))
						          {
							    if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							      switch (gimple_assign_rhs_code (_a4))
								{
								case NE_EXPR:
								  {
								    tree _q90 = gimple_assign_rhs1 (_a4);
								    _q90 = do_valueize (valueize, _q90);
								    tree _q91 = gimple_assign_rhs2 (_a4);
								    _q91 = do_valueize (valueize, _q91);
								    if (tree_swap_operands_p (_q90, _q91))
								      std::swap (_q90, _q91);
								    if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								      {
									if ((_q91 == _q51 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q51, 0) && types_match (_q91, _q51)))
									  {
									    {
									      tree captures[5] ATTRIBUTE_UNUSED = { _q50, _q51, _q30, _q21, _p1 };
									      if (gimple_simplify_162 (res_op, seq, valueize, type, captures, GT_EXPR))
									        return true;
									    }
									  }
								      }
								    if ((_q90 == _q51 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q51, 0) && types_match (_q90, _q51)))
								      {
									if ((_q91 == _q50 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q50, 0) && types_match (_q91, _q50)))
									  {
									    {
									      tree captures[5] ATTRIBUTE_UNUSED = { _q51, _q50, _q30, _q21, _p1 };
									      if (gimple_simplify_162 (res_op, seq, valueize, type, captures, GT_EXPR))
									        return true;
									    }
									  }
								      }
								    break;
								  }
								default:;
								}
						          }
						        break;
						      default:;
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_AND_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  switch (TREE_CODE (_q40))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q40))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_XOR_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  if (tree_swap_operands_p (_q50, _q51))
						    std::swap (_q50, _q51);
						  if (tree_expr_nonzero_p (_q41))
						    {
						      switch (TREE_CODE (_p1))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _p1))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case NE_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if (tree_swap_operands_p (_q90, _q91))
								        std::swap (_q90, _q91);
								      if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
									{
									  if ((_q91 == _q51 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q51, 0) && types_match (_q91, _q51)))
									    {
									      {
										tree captures[5] ATTRIBUTE_UNUSED = { _q50, _q51, _q41, _q20, _p1 };
										if (gimple_simplify_162 (res_op, seq, valueize, type, captures, LT_EXPR))
										  return true;
									      }
									    }
								        }
								      if ((_q90 == _q51 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q51, 0) && types_match (_q90, _q51)))
									{
									  if ((_q91 == _q50 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q50, 0) && types_match (_q91, _q50)))
									    {
									      {
										tree captures[5] ATTRIBUTE_UNUSED = { _q51, _q50, _q41, _q20, _p1 };
										if (gimple_simplify_162 (res_op, seq, valueize, type, captures, LT_EXPR))
										  return true;
									      }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				if (tree_expr_nonzero_p (_q40))
				  {
				    switch (TREE_CODE (_q41))
				      {
				      case SSA_NAME:
				        if (gimple *_d3 = get_def (valueize, _q41))
				          {
					    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					      switch (gimple_assign_rhs_code (_a3))
						{
						case BIT_XOR_EXPR:
						  {
						    tree _q60 = gimple_assign_rhs1 (_a3);
						    _q60 = do_valueize (valueize, _q60);
						    tree _q61 = gimple_assign_rhs2 (_a3);
						    _q61 = do_valueize (valueize, _q61);
						    if (tree_swap_operands_p (_q60, _q61))
						      std::swap (_q60, _q61);
						    switch (TREE_CODE (_p1))
						      {
						      case SSA_NAME:
						        if (gimple *_d4 = get_def (valueize, _p1))
						          {
							    if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							      switch (gimple_assign_rhs_code (_a4))
								{
								case NE_EXPR:
								  {
								    tree _q90 = gimple_assign_rhs1 (_a4);
								    _q90 = do_valueize (valueize, _q90);
								    tree _q91 = gimple_assign_rhs2 (_a4);
								    _q91 = do_valueize (valueize, _q91);
								    if (tree_swap_operands_p (_q90, _q91))
								      std::swap (_q90, _q91);
								    if ((_q90 == _q60 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q60, 0) && types_match (_q90, _q60)))
								      {
									if ((_q91 == _q61 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q61, 0) && types_match (_q91, _q61)))
									  {
									    {
									      tree captures[5] ATTRIBUTE_UNUSED = { _q60, _q61, _q40, _q20, _p1 };
									      if (gimple_simplify_162 (res_op, seq, valueize, type, captures, LT_EXPR))
									        return true;
									    }
									  }
								      }
								    if ((_q90 == _q61 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q61, 0) && types_match (_q90, _q61)))
								      {
									if ((_q91 == _q60 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q60, 0) && types_match (_q91, _q60)))
									  {
									    {
									      tree captures[5] ATTRIBUTE_UNUSED = { _q61, _q60, _q40, _q20, _p1 };
									      if (gimple_simplify_162 (res_op, seq, valueize, type, captures, LT_EXPR))
									        return true;
									    }
									  }
								      }
								    break;
								  }
								default:;
								}
						          }
						        break;
						      default:;
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_XOR_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case NE_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
						    {
						      if ((_q71 == _q31 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q31, 0) && types_match (_q71, _q31)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q31, _q21, _p1 };
							    if (gimple_simplify_163 (res_op, seq, valueize, type, captures, GT_EXPR))
							      return true;
							  }
						        }
						    }
						  if ((_q70 == _q31 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q31, 0) && types_match (_q70, _q31)))
						    {
						      if ((_q71 == _q30 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q30, 0) && types_match (_q71, _q30)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q31, _q30, _q21, _p1 };
							    if (gimple_simplify_163 (res_op, seq, valueize, type, captures, GT_EXPR))
							      return true;
							  }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_XOR_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case NE_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
						    {
						      if ((_q71 == _q41 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q41, 0) && types_match (_q71, _q41)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q40, _q41, _q20, _p1 };
							    if (gimple_simplify_163 (res_op, seq, valueize, type, captures, LT_EXPR))
							      return true;
							  }
						        }
						    }
						  if ((_q70 == _q41 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q41, 0) && types_match (_q70, _q41)))
						    {
						      if ((_q71 == _q40 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q40, 0) && types_match (_q71, _q40)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q41, _q40, _q20, _p1 };
							    if (gimple_simplify_163 (res_op, seq, valueize, type, captures, LT_EXPR))
							      return true;
							  }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case LT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case NE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if (gimple_min_value (_q51, valueize))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q21, _q20, _p1 };
					    if (gimple_simplify_156 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if (gimple_max_value (_q51, valueize))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q21, _p1 };
					    if (gimple_simplify_157 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      case EQ_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if (gimple_min_value (_q51, valueize))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _p1, _q21, _p0, _q20 };
					    if (gimple_simplify_158 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case EQ_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q30, _q61, _p0, _q20, _q21 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, LT_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
						  if ((_q61 == _q30 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q30, 0) && types_match (_q61, _q30)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q30, _q60, _p0, _q20, _q21 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, LT_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      case NE_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q30, _q61, _p0, _q20, _q21 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, LT_EXPR, NE_EXPR))
							  return true;
						      }
						    }
						  if ((_q61 == _q30 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q30, 0) && types_match (_q61, _q30)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q30, _q60, _p0, _q20, _q21 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, LT_EXPR, NE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case EQ_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q40, _q61, _p0, _q21, _q20 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, GT_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
						  if ((_q61 == _q40 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q40, 0) && types_match (_q61, _q40)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q40, _q60, _p0, _q21, _q20 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, GT_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      case NE_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q40, _q61, _p0, _q21, _q20 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, GT_EXPR, NE_EXPR))
							  return true;
						      }
						    }
						  if ((_q61 == _q40 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q40, 0) && types_match (_q61, _q40)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q40, _q60, _p0, _q21, _q20 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, GT_EXPR, NE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case EQ_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q20, _q51, _p0, _q20, _q21 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, LT_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q21, _q51, _p0, _q21, _q20 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, GT_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q20, _q50, _p0, _q20, _q21 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, LT_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q21, _q50, _p0, _q21, _q20 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, GT_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case NE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q20, _q51, _p0, _q20, _q21 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, LT_EXPR, NE_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q21, _q51, _p0, _q21, _q20 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, GT_EXPR, NE_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q20, _q50, _p0, _q20, _q21 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, LT_EXPR, NE_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q21, _q50, _p0, _q21, _q20 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, GT_EXPR, NE_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case LT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51 };
					if (gimple_simplify_161 (res_op, seq, valueize, type, captures, LT_EXPR, LT_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case LE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51 };
					if (gimple_simplify_161 (res_op, seq, valueize, type, captures, LE_EXPR, LT_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case GT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51 };
					if (gimple_simplify_161 (res_op, seq, valueize, type, captures, GT_EXPR, LT_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case GE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51 };
					if (gimple_simplify_161 (res_op, seq, valueize, type, captures, GE_EXPR, LT_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_AND_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_q30))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q30))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_XOR_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  if (tree_swap_operands_p (_q40, _q41))
						    std::swap (_q40, _q41);
						  if (tree_expr_nonzero_p (_q31))
						    {
						      switch (TREE_CODE (_p1))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _p1))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case NE_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if (tree_swap_operands_p (_q90, _q91))
								        std::swap (_q90, _q91);
								      if ((_q90 == _q40 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q40, 0) && types_match (_q90, _q40)))
									{
									  if ((_q91 == _q41 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q41, 0) && types_match (_q91, _q41)))
									    {
									      {
										tree captures[5] ATTRIBUTE_UNUSED = { _q40, _q41, _q31, _q21, _p1 };
										if (gimple_simplify_162 (res_op, seq, valueize, type, captures, LT_EXPR))
										  return true;
									      }
									    }
								        }
								      if ((_q90 == _q41 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q41, 0) && types_match (_q90, _q41)))
									{
									  if ((_q91 == _q40 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q40, 0) && types_match (_q91, _q40)))
									    {
									      {
										tree captures[5] ATTRIBUTE_UNUSED = { _q41, _q40, _q31, _q21, _p1 };
										if (gimple_simplify_162 (res_op, seq, valueize, type, captures, LT_EXPR))
										  return true;
									      }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				if (tree_expr_nonzero_p (_q30))
				  {
				    switch (TREE_CODE (_q31))
				      {
				      case SSA_NAME:
				        if (gimple *_d3 = get_def (valueize, _q31))
				          {
					    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					      switch (gimple_assign_rhs_code (_a3))
						{
						case BIT_XOR_EXPR:
						  {
						    tree _q50 = gimple_assign_rhs1 (_a3);
						    _q50 = do_valueize (valueize, _q50);
						    tree _q51 = gimple_assign_rhs2 (_a3);
						    _q51 = do_valueize (valueize, _q51);
						    if (tree_swap_operands_p (_q50, _q51))
						      std::swap (_q50, _q51);
						    switch (TREE_CODE (_p1))
						      {
						      case SSA_NAME:
						        if (gimple *_d4 = get_def (valueize, _p1))
						          {
							    if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							      switch (gimple_assign_rhs_code (_a4))
								{
								case NE_EXPR:
								  {
								    tree _q90 = gimple_assign_rhs1 (_a4);
								    _q90 = do_valueize (valueize, _q90);
								    tree _q91 = gimple_assign_rhs2 (_a4);
								    _q91 = do_valueize (valueize, _q91);
								    if (tree_swap_operands_p (_q90, _q91))
								      std::swap (_q90, _q91);
								    if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								      {
									if ((_q91 == _q51 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q51, 0) && types_match (_q91, _q51)))
									  {
									    {
									      tree captures[5] ATTRIBUTE_UNUSED = { _q50, _q51, _q30, _q21, _p1 };
									      if (gimple_simplify_162 (res_op, seq, valueize, type, captures, LT_EXPR))
									        return true;
									    }
									  }
								      }
								    if ((_q90 == _q51 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q51, 0) && types_match (_q90, _q51)))
								      {
									if ((_q91 == _q50 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q50, 0) && types_match (_q91, _q50)))
									  {
									    {
									      tree captures[5] ATTRIBUTE_UNUSED = { _q51, _q50, _q30, _q21, _p1 };
									      if (gimple_simplify_162 (res_op, seq, valueize, type, captures, LT_EXPR))
									        return true;
									    }
									  }
								      }
								    break;
								  }
								default:;
								}
						          }
						        break;
						      default:;
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_AND_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  switch (TREE_CODE (_q40))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q40))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_XOR_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  if (tree_swap_operands_p (_q50, _q51))
						    std::swap (_q50, _q51);
						  if (tree_expr_nonzero_p (_q41))
						    {
						      switch (TREE_CODE (_p1))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _p1))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case NE_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if (tree_swap_operands_p (_q90, _q91))
								        std::swap (_q90, _q91);
								      if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
									{
									  if ((_q91 == _q51 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q51, 0) && types_match (_q91, _q51)))
									    {
									      {
										tree captures[5] ATTRIBUTE_UNUSED = { _q50, _q51, _q41, _q20, _p1 };
										if (gimple_simplify_162 (res_op, seq, valueize, type, captures, GT_EXPR))
										  return true;
									      }
									    }
								        }
								      if ((_q90 == _q51 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q51, 0) && types_match (_q90, _q51)))
									{
									  if ((_q91 == _q50 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q50, 0) && types_match (_q91, _q50)))
									    {
									      {
										tree captures[5] ATTRIBUTE_UNUSED = { _q51, _q50, _q41, _q20, _p1 };
										if (gimple_simplify_162 (res_op, seq, valueize, type, captures, GT_EXPR))
										  return true;
									      }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				if (tree_expr_nonzero_p (_q40))
				  {
				    switch (TREE_CODE (_q41))
				      {
				      case SSA_NAME:
				        if (gimple *_d3 = get_def (valueize, _q41))
				          {
					    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					      switch (gimple_assign_rhs_code (_a3))
						{
						case BIT_XOR_EXPR:
						  {
						    tree _q60 = gimple_assign_rhs1 (_a3);
						    _q60 = do_valueize (valueize, _q60);
						    tree _q61 = gimple_assign_rhs2 (_a3);
						    _q61 = do_valueize (valueize, _q61);
						    if (tree_swap_operands_p (_q60, _q61))
						      std::swap (_q60, _q61);
						    switch (TREE_CODE (_p1))
						      {
						      case SSA_NAME:
						        if (gimple *_d4 = get_def (valueize, _p1))
						          {
							    if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							      switch (gimple_assign_rhs_code (_a4))
								{
								case NE_EXPR:
								  {
								    tree _q90 = gimple_assign_rhs1 (_a4);
								    _q90 = do_valueize (valueize, _q90);
								    tree _q91 = gimple_assign_rhs2 (_a4);
								    _q91 = do_valueize (valueize, _q91);
								    if (tree_swap_operands_p (_q90, _q91))
								      std::swap (_q90, _q91);
								    if ((_q90 == _q60 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q60, 0) && types_match (_q90, _q60)))
								      {
									if ((_q91 == _q61 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q61, 0) && types_match (_q91, _q61)))
									  {
									    {
									      tree captures[5] ATTRIBUTE_UNUSED = { _q60, _q61, _q40, _q20, _p1 };
									      if (gimple_simplify_162 (res_op, seq, valueize, type, captures, GT_EXPR))
									        return true;
									    }
									  }
								      }
								    if ((_q90 == _q61 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q61, 0) && types_match (_q90, _q61)))
								      {
									if ((_q91 == _q60 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q60, 0) && types_match (_q91, _q60)))
									  {
									    {
									      tree captures[5] ATTRIBUTE_UNUSED = { _q61, _q60, _q40, _q20, _p1 };
									      if (gimple_simplify_162 (res_op, seq, valueize, type, captures, GT_EXPR))
									        return true;
									    }
									  }
								      }
								    break;
								  }
								default:;
								}
						          }
						        break;
						      default:;
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_XOR_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case NE_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
						    {
						      if ((_q71 == _q31 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q31, 0) && types_match (_q71, _q31)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q31, _q21, _p1 };
							    if (gimple_simplify_163 (res_op, seq, valueize, type, captures, LT_EXPR))
							      return true;
							  }
						        }
						    }
						  if ((_q70 == _q31 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q31, 0) && types_match (_q70, _q31)))
						    {
						      if ((_q71 == _q30 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q30, 0) && types_match (_q71, _q30)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q31, _q30, _q21, _p1 };
							    if (gimple_simplify_163 (res_op, seq, valueize, type, captures, LT_EXPR))
							      return true;
							  }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_XOR_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case NE_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
						    {
						      if ((_q71 == _q41 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q41, 0) && types_match (_q71, _q41)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q40, _q41, _q20, _p1 };
							    if (gimple_simplify_163 (res_op, seq, valueize, type, captures, GT_EXPR))
							      return true;
							  }
						        }
						    }
						  if ((_q70 == _q41 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q41, 0) && types_match (_q70, _q41)))
						    {
						      if ((_q71 == _q40 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q40, 0) && types_match (_q71, _q40)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q41, _q40, _q20, _p1 };
							    if (gimple_simplify_163 (res_op, seq, valueize, type, captures, GT_EXPR))
							      return true;
							  }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case NE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if (gimple_min_value (_q21, valueize))
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p1))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case GT_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a2);
				      _q51 = do_valueize (valueize, _q51);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q51, _p0 };
					    if (gimple_simplify_164 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				      break;
				    }
				  case LT_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a2);
				      _q51 = do_valueize (valueize, _q51);
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q50, _p0 };
					    if (gimple_simplify_164 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				      break;
				    }
				  case LE_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a2);
				      _q51 = do_valueize (valueize, _q51);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q51 };
					    if (gimple_simplify_165 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				      break;
				    }
				  case GE_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a2);
				      _q51 = do_valueize (valueize, _q51);
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q50 };
					    if (gimple_simplify_165 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
		  if (gimple_max_value (_q21, valueize))
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p1))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case LT_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a2);
				      _q51 = do_valueize (valueize, _q51);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q51, _p0 };
					    if (gimple_simplify_166 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				      break;
				    }
				  case GT_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a2);
				      _q51 = do_valueize (valueize, _q51);
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _q50, _p0 };
					    if (gimple_simplify_166 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				      break;
				    }
				  case GE_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a2);
				      _q51 = do_valueize (valueize, _q51);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _p1, _q20, _q51 };
					    if (gimple_simplify_167 (res_op, seq, valueize, type, captures, NE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  case LE_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a2);
				      _q51 = do_valueize (valueize, _q51);
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _p1, _q20, _q50 };
					    if (gimple_simplify_167 (res_op, seq, valueize, type, captures, NE_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case EQ_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  switch (TREE_CODE (_q50))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q50))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50, _q51 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR))
							  return true;
						      }
						    }
						  if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q50, _q51 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  switch (TREE_CODE (_q51))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q51))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51, _q50 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR))
							  return true;
						      }
						    }
						  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q51, _q50 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case NE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  switch (TREE_CODE (_q50))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q50))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50, _q51 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, NE_EXPR, NE_EXPR))
							  return true;
						      }
						    }
						  if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q50, _q51 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, NE_EXPR, NE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  switch (TREE_CODE (_q51))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q51))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51, _q50 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, NE_EXPR, NE_EXPR))
							  return true;
						      }
						    }
						  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q51, _q50 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, NE_EXPR, NE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case LT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  switch (TREE_CODE (_q50))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q50))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50, _q51 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, LT_EXPR, NE_EXPR))
							  return true;
						      }
						    }
						  if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q50, _q51 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, LT_EXPR, NE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  switch (TREE_CODE (_q51))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q51))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51, _q50 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, GT_EXPR, NE_EXPR))
							  return true;
						      }
						    }
						  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q51, _q50 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, GT_EXPR, NE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case GT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  switch (TREE_CODE (_q50))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q50))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50, _q51 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, GT_EXPR, NE_EXPR))
							  return true;
						      }
						    }
						  if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q50, _q51 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, GT_EXPR, NE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  switch (TREE_CODE (_q51))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q51))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51, _q50 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, LT_EXPR, NE_EXPR))
							  return true;
						      }
						    }
						  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q51, _q50 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, LT_EXPR, NE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case LE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  switch (TREE_CODE (_q50))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q50))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50, _q51 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, LE_EXPR, NE_EXPR))
							  return true;
						      }
						    }
						  if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q50, _q51 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, LE_EXPR, NE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  switch (TREE_CODE (_q51))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q51))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51, _q50 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, GE_EXPR, NE_EXPR))
							  return true;
						      }
						    }
						  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q51, _q50 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, GE_EXPR, NE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case GE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  switch (TREE_CODE (_q50))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q50))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50, _q51 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, GE_EXPR, NE_EXPR))
							  return true;
						      }
						    }
						  if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q50, _q51 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, GE_EXPR, NE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  switch (TREE_CODE (_q51))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q51))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51, _q50 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, LE_EXPR, NE_EXPR))
							  return true;
						      }
						    }
						  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q51, _q50 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, LE_EXPR, NE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case EQ_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q30, _q61, _p0, _q20, _q21 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
						  if ((_q61 == _q30 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q30, 0) && types_match (_q61, _q30)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q30, _q60, _p0, _q20, _q21 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      case NE_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q30, _q61, _p0, _q20, _q21 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, NE_EXPR, NE_EXPR))
							  return true;
						      }
						    }
						  if ((_q61 == _q30 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q30, 0) && types_match (_q61, _q30)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q30, _q60, _p0, _q20, _q21 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, NE_EXPR, NE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case EQ_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q40, _q61, _p0, _q21, _q20 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
						  if ((_q61 == _q40 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q40, 0) && types_match (_q61, _q40)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q40, _q60, _p0, _q21, _q20 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      case NE_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q40, _q61, _p0, _q21, _q20 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, NE_EXPR, NE_EXPR))
							  return true;
						      }
						    }
						  if ((_q61 == _q40 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q40, 0) && types_match (_q61, _q40)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q40, _q60, _p0, _q21, _q20 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, NE_EXPR, NE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case EQ_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50, _q51 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR))
					  return true;
				      }
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q20, _q51, _p0, _q20, _q21 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51, _q50 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q50, _q51 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR))
					  return true;
				      }
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q21, _q51, _p0, _q21, _q20 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q51, _q50 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR))
					  return true;
				      }
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q21, _q50, _p0, _q21, _q20 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q20, _q50, _p0, _q20, _q21 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case NE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50, _q51 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, NE_EXPR, NE_EXPR))
					  return true;
				      }
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q20, _q51, _p0, _q20, _q21 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, NE_EXPR, NE_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51, _q50 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, NE_EXPR, NE_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q50, _q51 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, NE_EXPR, NE_EXPR))
					  return true;
				      }
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q21, _q51, _p0, _q21, _q20 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, NE_EXPR, NE_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q51, _q50 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, NE_EXPR, NE_EXPR))
					  return true;
				      }
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q21, _q50, _p0, _q21, _q20 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, NE_EXPR, NE_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q20, _q50, _p0, _q20, _q21 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, NE_EXPR, NE_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case LT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50, _q51 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, LT_EXPR, NE_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51, _q50 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, GT_EXPR, NE_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q50, _q51 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, LT_EXPR, NE_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q51, _q50 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, GT_EXPR, NE_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case GT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50, _q51 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, GT_EXPR, NE_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51, _q50 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, LT_EXPR, NE_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q50, _q51 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, GT_EXPR, NE_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q51, _q50 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, LT_EXPR, NE_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case LE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50, _q51 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, LE_EXPR, NE_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51, _q50 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, GE_EXPR, NE_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q50, _q51 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, LE_EXPR, NE_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q51, _q50 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, GE_EXPR, NE_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case GE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50, _q51 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, GE_EXPR, NE_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51, _q50 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, LE_EXPR, NE_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q50, _q51 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, GE_EXPR, NE_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q51, _q50 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, LE_EXPR, NE_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_AND_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_q30))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q30))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_XOR_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  if (tree_swap_operands_p (_q40, _q41))
						    std::swap (_q40, _q41);
						  if (tree_expr_nonzero_p (_q31))
						    {
						      switch (TREE_CODE (_p1))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _p1))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case NE_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if (tree_swap_operands_p (_q90, _q91))
								        std::swap (_q90, _q91);
								      if ((_q90 == _q40 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q40, 0) && types_match (_q90, _q40)))
									{
									  if ((_q91 == _q41 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q41, 0) && types_match (_q91, _q41)))
									    {
									      {
										tree captures[5] ATTRIBUTE_UNUSED = { _q40, _q41, _q31, _q21, _p1 };
										if (gimple_simplify_162 (res_op, seq, valueize, type, captures, NE_EXPR))
										  return true;
									      }
									    }
								        }
								      if ((_q90 == _q41 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q41, 0) && types_match (_q90, _q41)))
									{
									  if ((_q91 == _q40 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q40, 0) && types_match (_q91, _q40)))
									    {
									      {
										tree captures[5] ATTRIBUTE_UNUSED = { _q41, _q40, _q31, _q21, _p1 };
										if (gimple_simplify_162 (res_op, seq, valueize, type, captures, NE_EXPR))
										  return true;
									      }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				if (tree_expr_nonzero_p (_q30))
				  {
				    switch (TREE_CODE (_q31))
				      {
				      case SSA_NAME:
				        if (gimple *_d3 = get_def (valueize, _q31))
				          {
					    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					      switch (gimple_assign_rhs_code (_a3))
						{
						case BIT_XOR_EXPR:
						  {
						    tree _q50 = gimple_assign_rhs1 (_a3);
						    _q50 = do_valueize (valueize, _q50);
						    tree _q51 = gimple_assign_rhs2 (_a3);
						    _q51 = do_valueize (valueize, _q51);
						    if (tree_swap_operands_p (_q50, _q51))
						      std::swap (_q50, _q51);
						    switch (TREE_CODE (_p1))
						      {
						      case SSA_NAME:
						        if (gimple *_d4 = get_def (valueize, _p1))
						          {
							    if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							      switch (gimple_assign_rhs_code (_a4))
								{
								case NE_EXPR:
								  {
								    tree _q90 = gimple_assign_rhs1 (_a4);
								    _q90 = do_valueize (valueize, _q90);
								    tree _q91 = gimple_assign_rhs2 (_a4);
								    _q91 = do_valueize (valueize, _q91);
								    if (tree_swap_operands_p (_q90, _q91))
								      std::swap (_q90, _q91);
								    if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								      {
									if ((_q91 == _q51 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q51, 0) && types_match (_q91, _q51)))
									  {
									    {
									      tree captures[5] ATTRIBUTE_UNUSED = { _q50, _q51, _q30, _q21, _p1 };
									      if (gimple_simplify_162 (res_op, seq, valueize, type, captures, NE_EXPR))
									        return true;
									    }
									  }
								      }
								    if ((_q90 == _q51 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q51, 0) && types_match (_q90, _q51)))
								      {
									if ((_q91 == _q50 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q50, 0) && types_match (_q91, _q50)))
									  {
									    {
									      tree captures[5] ATTRIBUTE_UNUSED = { _q51, _q50, _q30, _q21, _p1 };
									      if (gimple_simplify_162 (res_op, seq, valueize, type, captures, NE_EXPR))
									        return true;
									    }
									  }
								      }
								    break;
								  }
								default:;
								}
						          }
						        break;
						      default:;
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_AND_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  switch (TREE_CODE (_q40))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q40))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_XOR_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  if (tree_swap_operands_p (_q50, _q51))
						    std::swap (_q50, _q51);
						  if (tree_expr_nonzero_p (_q41))
						    {
						      switch (TREE_CODE (_p1))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _p1))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case NE_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if (tree_swap_operands_p (_q90, _q91))
								        std::swap (_q90, _q91);
								      if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
									{
									  if ((_q91 == _q51 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q51, 0) && types_match (_q91, _q51)))
									    {
									      {
										tree captures[5] ATTRIBUTE_UNUSED = { _q50, _q51, _q41, _q20, _p1 };
										if (gimple_simplify_162 (res_op, seq, valueize, type, captures, NE_EXPR))
										  return true;
									      }
									    }
								        }
								      if ((_q90 == _q51 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q51, 0) && types_match (_q90, _q51)))
									{
									  if ((_q91 == _q50 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q50, 0) && types_match (_q91, _q50)))
									    {
									      {
										tree captures[5] ATTRIBUTE_UNUSED = { _q51, _q50, _q41, _q20, _p1 };
										if (gimple_simplify_162 (res_op, seq, valueize, type, captures, NE_EXPR))
										  return true;
									      }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				if (tree_expr_nonzero_p (_q40))
				  {
				    switch (TREE_CODE (_q41))
				      {
				      case SSA_NAME:
				        if (gimple *_d3 = get_def (valueize, _q41))
				          {
					    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					      switch (gimple_assign_rhs_code (_a3))
						{
						case BIT_XOR_EXPR:
						  {
						    tree _q60 = gimple_assign_rhs1 (_a3);
						    _q60 = do_valueize (valueize, _q60);
						    tree _q61 = gimple_assign_rhs2 (_a3);
						    _q61 = do_valueize (valueize, _q61);
						    if (tree_swap_operands_p (_q60, _q61))
						      std::swap (_q60, _q61);
						    switch (TREE_CODE (_p1))
						      {
						      case SSA_NAME:
						        if (gimple *_d4 = get_def (valueize, _p1))
						          {
							    if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							      switch (gimple_assign_rhs_code (_a4))
								{
								case NE_EXPR:
								  {
								    tree _q90 = gimple_assign_rhs1 (_a4);
								    _q90 = do_valueize (valueize, _q90);
								    tree _q91 = gimple_assign_rhs2 (_a4);
								    _q91 = do_valueize (valueize, _q91);
								    if (tree_swap_operands_p (_q90, _q91))
								      std::swap (_q90, _q91);
								    if ((_q90 == _q60 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q60, 0) && types_match (_q90, _q60)))
								      {
									if ((_q91 == _q61 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q61, 0) && types_match (_q91, _q61)))
									  {
									    {
									      tree captures[5] ATTRIBUTE_UNUSED = { _q60, _q61, _q40, _q20, _p1 };
									      if (gimple_simplify_162 (res_op, seq, valueize, type, captures, NE_EXPR))
									        return true;
									    }
									  }
								      }
								    if ((_q90 == _q61 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q61, 0) && types_match (_q90, _q61)))
								      {
									if ((_q91 == _q60 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q60, 0) && types_match (_q91, _q60)))
									  {
									    {
									      tree captures[5] ATTRIBUTE_UNUSED = { _q61, _q60, _q40, _q20, _p1 };
									      if (gimple_simplify_162 (res_op, seq, valueize, type, captures, NE_EXPR))
									        return true;
									    }
									  }
								      }
								    break;
								  }
								default:;
								}
						          }
						        break;
						      default:;
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_XOR_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case NE_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
						    {
						      if ((_q71 == _q31 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q31, 0) && types_match (_q71, _q31)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q31, _q21, _p1 };
							    if (gimple_simplify_163 (res_op, seq, valueize, type, captures, NE_EXPR))
							      return true;
							  }
						        }
						    }
						  if ((_q70 == _q31 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q31, 0) && types_match (_q70, _q31)))
						    {
						      if ((_q71 == _q30 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q30, 0) && types_match (_q71, _q30)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q31, _q30, _q21, _p1 };
							    if (gimple_simplify_163 (res_op, seq, valueize, type, captures, NE_EXPR))
							      return true;
							  }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_XOR_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case NE_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
						    {
						      if ((_q71 == _q41 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q41, 0) && types_match (_q71, _q41)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q40, _q41, _q20, _p1 };
							    if (gimple_simplify_163 (res_op, seq, valueize, type, captures, NE_EXPR))
							      return true;
							  }
						        }
						    }
						  if ((_q70 == _q41 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q41, 0) && types_match (_q70, _q41)))
						    {
						      if ((_q71 == _q40 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q40, 0) && types_match (_q71, _q40)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q41, _q40, _q20, _p1 };
							    if (gimple_simplify_163 (res_op, seq, valueize, type, captures, NE_EXPR))
							      return true;
							  }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case LE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case NE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if (gimple_min_value (_q51, valueize))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    if (gimple_simplify_170 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if (gimple_max_value (_q51, valueize))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q21, _q20 };
					    if (gimple_simplify_171 (res_op, seq, valueize, type, captures, NE_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      case EQ_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if (gimple_min_value (_q51, valueize))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
					    if (gimple_simplify_172 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if (gimple_max_value (_q51, valueize))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q21, _q20 };
					    if (gimple_simplify_171 (res_op, seq, valueize, type, captures, EQ_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case EQ_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q30, _q61, _p0, _q20, _q21 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, LE_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
						  if ((_q61 == _q30 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q30, 0) && types_match (_q61, _q30)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q30, _q60, _p0, _q20, _q21 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, LE_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      case NE_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q30, _q61, _p0, _q20, _q21 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, LE_EXPR, NE_EXPR))
							  return true;
						      }
						    }
						  if ((_q61 == _q30 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q30, 0) && types_match (_q61, _q30)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q30, _q60, _p0, _q20, _q21 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, LE_EXPR, NE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case EQ_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q40, _q61, _p0, _q21, _q20 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, GE_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
						  if ((_q61 == _q40 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q40, 0) && types_match (_q61, _q40)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q40, _q60, _p0, _q21, _q20 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, GE_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      case NE_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q40, _q61, _p0, _q21, _q20 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, GE_EXPR, NE_EXPR))
							  return true;
						      }
						    }
						  if ((_q61 == _q40 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q40, 0) && types_match (_q61, _q40)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q40, _q60, _p0, _q21, _q20 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, GE_EXPR, NE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case EQ_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q20, _q51, _p0, _q20, _q21 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, LE_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q21, _q51, _p0, _q21, _q20 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, GE_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q20, _q50, _p0, _q20, _q21 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, LE_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q21, _q50, _p0, _q21, _q20 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, GE_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case NE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q20, _q51, _p0, _q20, _q21 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, LE_EXPR, NE_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q21, _q51, _p0, _q21, _q20 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, GE_EXPR, NE_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q20, _q50, _p0, _q20, _q21 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, LE_EXPR, NE_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q21, _q50, _p0, _q21, _q20 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, GE_EXPR, NE_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case LT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51 };
					if (gimple_simplify_161 (res_op, seq, valueize, type, captures, LT_EXPR, LE_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case LE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51 };
					if (gimple_simplify_161 (res_op, seq, valueize, type, captures, LE_EXPR, LE_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case GT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51 };
					if (gimple_simplify_161 (res_op, seq, valueize, type, captures, GT_EXPR, LE_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case GE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51 };
					if (gimple_simplify_161 (res_op, seq, valueize, type, captures, GE_EXPR, LE_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_AND_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_q30))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q30))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_XOR_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  if (tree_swap_operands_p (_q40, _q41))
						    std::swap (_q40, _q41);
						  if (tree_expr_nonzero_p (_q31))
						    {
						      switch (TREE_CODE (_p1))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _p1))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case NE_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if (tree_swap_operands_p (_q90, _q91))
								        std::swap (_q90, _q91);
								      if ((_q90 == _q40 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q40, 0) && types_match (_q90, _q40)))
									{
									  if ((_q91 == _q41 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q41, 0) && types_match (_q91, _q41)))
									    {
									      {
										tree captures[5] ATTRIBUTE_UNUSED = { _q40, _q41, _q31, _q21, _p1 };
										if (gimple_simplify_162 (res_op, seq, valueize, type, captures, LE_EXPR))
										  return true;
									      }
									    }
								        }
								      if ((_q90 == _q41 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q41, 0) && types_match (_q90, _q41)))
									{
									  if ((_q91 == _q40 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q40, 0) && types_match (_q91, _q40)))
									    {
									      {
										tree captures[5] ATTRIBUTE_UNUSED = { _q41, _q40, _q31, _q21, _p1 };
										if (gimple_simplify_162 (res_op, seq, valueize, type, captures, LE_EXPR))
										  return true;
									      }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				if (tree_expr_nonzero_p (_q30))
				  {
				    switch (TREE_CODE (_q31))
				      {
				      case SSA_NAME:
				        if (gimple *_d3 = get_def (valueize, _q31))
				          {
					    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					      switch (gimple_assign_rhs_code (_a3))
						{
						case BIT_XOR_EXPR:
						  {
						    tree _q50 = gimple_assign_rhs1 (_a3);
						    _q50 = do_valueize (valueize, _q50);
						    tree _q51 = gimple_assign_rhs2 (_a3);
						    _q51 = do_valueize (valueize, _q51);
						    if (tree_swap_operands_p (_q50, _q51))
						      std::swap (_q50, _q51);
						    switch (TREE_CODE (_p1))
						      {
						      case SSA_NAME:
						        if (gimple *_d4 = get_def (valueize, _p1))
						          {
							    if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							      switch (gimple_assign_rhs_code (_a4))
								{
								case NE_EXPR:
								  {
								    tree _q90 = gimple_assign_rhs1 (_a4);
								    _q90 = do_valueize (valueize, _q90);
								    tree _q91 = gimple_assign_rhs2 (_a4);
								    _q91 = do_valueize (valueize, _q91);
								    if (tree_swap_operands_p (_q90, _q91))
								      std::swap (_q90, _q91);
								    if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								      {
									if ((_q91 == _q51 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q51, 0) && types_match (_q91, _q51)))
									  {
									    {
									      tree captures[5] ATTRIBUTE_UNUSED = { _q50, _q51, _q30, _q21, _p1 };
									      if (gimple_simplify_162 (res_op, seq, valueize, type, captures, LE_EXPR))
									        return true;
									    }
									  }
								      }
								    if ((_q90 == _q51 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q51, 0) && types_match (_q90, _q51)))
								      {
									if ((_q91 == _q50 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q50, 0) && types_match (_q91, _q50)))
									  {
									    {
									      tree captures[5] ATTRIBUTE_UNUSED = { _q51, _q50, _q30, _q21, _p1 };
									      if (gimple_simplify_162 (res_op, seq, valueize, type, captures, LE_EXPR))
									        return true;
									    }
									  }
								      }
								    break;
								  }
								default:;
								}
						          }
						        break;
						      default:;
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_AND_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  switch (TREE_CODE (_q40))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q40))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_XOR_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  if (tree_swap_operands_p (_q50, _q51))
						    std::swap (_q50, _q51);
						  if (tree_expr_nonzero_p (_q41))
						    {
						      switch (TREE_CODE (_p1))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _p1))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case NE_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if (tree_swap_operands_p (_q90, _q91))
								        std::swap (_q90, _q91);
								      if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
									{
									  if ((_q91 == _q51 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q51, 0) && types_match (_q91, _q51)))
									    {
									      {
										tree captures[5] ATTRIBUTE_UNUSED = { _q50, _q51, _q41, _q20, _p1 };
										if (gimple_simplify_162 (res_op, seq, valueize, type, captures, GE_EXPR))
										  return true;
									      }
									    }
								        }
								      if ((_q90 == _q51 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q51, 0) && types_match (_q90, _q51)))
									{
									  if ((_q91 == _q50 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q50, 0) && types_match (_q91, _q50)))
									    {
									      {
										tree captures[5] ATTRIBUTE_UNUSED = { _q51, _q50, _q41, _q20, _p1 };
										if (gimple_simplify_162 (res_op, seq, valueize, type, captures, GE_EXPR))
										  return true;
									      }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				if (tree_expr_nonzero_p (_q40))
				  {
				    switch (TREE_CODE (_q41))
				      {
				      case SSA_NAME:
				        if (gimple *_d3 = get_def (valueize, _q41))
				          {
					    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					      switch (gimple_assign_rhs_code (_a3))
						{
						case BIT_XOR_EXPR:
						  {
						    tree _q60 = gimple_assign_rhs1 (_a3);
						    _q60 = do_valueize (valueize, _q60);
						    tree _q61 = gimple_assign_rhs2 (_a3);
						    _q61 = do_valueize (valueize, _q61);
						    if (tree_swap_operands_p (_q60, _q61))
						      std::swap (_q60, _q61);
						    switch (TREE_CODE (_p1))
						      {
						      case SSA_NAME:
						        if (gimple *_d4 = get_def (valueize, _p1))
						          {
							    if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							      switch (gimple_assign_rhs_code (_a4))
								{
								case NE_EXPR:
								  {
								    tree _q90 = gimple_assign_rhs1 (_a4);
								    _q90 = do_valueize (valueize, _q90);
								    tree _q91 = gimple_assign_rhs2 (_a4);
								    _q91 = do_valueize (valueize, _q91);
								    if (tree_swap_operands_p (_q90, _q91))
								      std::swap (_q90, _q91);
								    if ((_q90 == _q60 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q60, 0) && types_match (_q90, _q60)))
								      {
									if ((_q91 == _q61 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q61, 0) && types_match (_q91, _q61)))
									  {
									    {
									      tree captures[5] ATTRIBUTE_UNUSED = { _q60, _q61, _q40, _q20, _p1 };
									      if (gimple_simplify_162 (res_op, seq, valueize, type, captures, GE_EXPR))
									        return true;
									    }
									  }
								      }
								    if ((_q90 == _q61 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q61, 0) && types_match (_q90, _q61)))
								      {
									if ((_q91 == _q60 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q60, 0) && types_match (_q91, _q60)))
									  {
									    {
									      tree captures[5] ATTRIBUTE_UNUSED = { _q61, _q60, _q40, _q20, _p1 };
									      if (gimple_simplify_162 (res_op, seq, valueize, type, captures, GE_EXPR))
									        return true;
									    }
									  }
								      }
								    break;
								  }
								default:;
								}
						          }
						        break;
						      default:;
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_XOR_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case NE_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
						    {
						      if ((_q71 == _q31 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q31, 0) && types_match (_q71, _q31)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q31, _q21, _p1 };
							    if (gimple_simplify_163 (res_op, seq, valueize, type, captures, LE_EXPR))
							      return true;
							  }
						        }
						    }
						  if ((_q70 == _q31 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q31, 0) && types_match (_q70, _q31)))
						    {
						      if ((_q71 == _q30 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q30, 0) && types_match (_q71, _q30)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q31, _q30, _q21, _p1 };
							    if (gimple_simplify_163 (res_op, seq, valueize, type, captures, LE_EXPR))
							      return true;
							  }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_XOR_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case NE_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
						    {
						      if ((_q71 == _q41 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q41, 0) && types_match (_q71, _q41)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q40, _q41, _q20, _p1 };
							    if (gimple_simplify_163 (res_op, seq, valueize, type, captures, GE_EXPR))
							      return true;
							  }
						        }
						    }
						  if ((_q70 == _q41 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q41, 0) && types_match (_q70, _q41)))
						    {
						      if ((_q71 == _q40 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q40, 0) && types_match (_q71, _q40)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q41, _q40, _q20, _p1 };
							    if (gimple_simplify_163 (res_op, seq, valueize, type, captures, GE_EXPR))
							      return true;
							  }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case GE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case NE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if (gimple_min_value (_q51, valueize))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q21, _q20 };
					    if (gimple_simplify_170 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if (gimple_max_value (_q51, valueize))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
					    if (gimple_simplify_171 (res_op, seq, valueize, type, captures, NE_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      case EQ_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if (gimple_min_value (_q51, valueize))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q21, _q20 };
					    if (gimple_simplify_172 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if (gimple_max_value (_q51, valueize))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
					    if (gimple_simplify_171 (res_op, seq, valueize, type, captures, EQ_EXPR))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case EQ_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q30, _q61, _p0, _q20, _q21 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, GE_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
						  if ((_q61 == _q30 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q30, 0) && types_match (_q61, _q30)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q30, _q60, _p0, _q20, _q21 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, GE_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      case NE_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q30, _q61, _p0, _q20, _q21 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, GE_EXPR, NE_EXPR))
							  return true;
						      }
						    }
						  if ((_q61 == _q30 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q30, 0) && types_match (_q61, _q30)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q30, _q60, _p0, _q20, _q21 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, GE_EXPR, NE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case EQ_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q40, _q61, _p0, _q21, _q20 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, LE_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
						  if ((_q61 == _q40 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q40, 0) && types_match (_q61, _q40)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q40, _q60, _p0, _q21, _q20 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, LE_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      case NE_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q40, _q61, _p0, _q21, _q20 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, LE_EXPR, NE_EXPR))
							  return true;
						      }
						    }
						  if ((_q61 == _q40 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q40, 0) && types_match (_q61, _q40)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q40, _q60, _p0, _q21, _q20 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, LE_EXPR, NE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case EQ_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q20, _q51, _p0, _q20, _q21 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, GE_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q21, _q51, _p0, _q21, _q20 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, LE_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q20, _q50, _p0, _q20, _q21 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, GE_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q21, _q50, _p0, _q21, _q20 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, LE_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case NE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q20, _q51, _p0, _q20, _q21 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, GE_EXPR, NE_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q21, _q51, _p0, _q21, _q20 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, LE_EXPR, NE_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q20, _q50, _p0, _q20, _q21 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, GE_EXPR, NE_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q21, _q50, _p0, _q21, _q20 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, LE_EXPR, NE_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case LT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51 };
					if (gimple_simplify_161 (res_op, seq, valueize, type, captures, LT_EXPR, GE_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case LE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51 };
					if (gimple_simplify_161 (res_op, seq, valueize, type, captures, LE_EXPR, GE_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case GT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51 };
					if (gimple_simplify_161 (res_op, seq, valueize, type, captures, GT_EXPR, GE_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case GE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51 };
					if (gimple_simplify_161 (res_op, seq, valueize, type, captures, GE_EXPR, GE_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_AND_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_q30))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q30))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_XOR_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  if (tree_swap_operands_p (_q40, _q41))
						    std::swap (_q40, _q41);
						  if (tree_expr_nonzero_p (_q31))
						    {
						      switch (TREE_CODE (_p1))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _p1))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case NE_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if (tree_swap_operands_p (_q90, _q91))
								        std::swap (_q90, _q91);
								      if ((_q90 == _q40 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q40, 0) && types_match (_q90, _q40)))
									{
									  if ((_q91 == _q41 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q41, 0) && types_match (_q91, _q41)))
									    {
									      {
										tree captures[5] ATTRIBUTE_UNUSED = { _q40, _q41, _q31, _q21, _p1 };
										if (gimple_simplify_162 (res_op, seq, valueize, type, captures, GE_EXPR))
										  return true;
									      }
									    }
								        }
								      if ((_q90 == _q41 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q41, 0) && types_match (_q90, _q41)))
									{
									  if ((_q91 == _q40 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q40, 0) && types_match (_q91, _q40)))
									    {
									      {
										tree captures[5] ATTRIBUTE_UNUSED = { _q41, _q40, _q31, _q21, _p1 };
										if (gimple_simplify_162 (res_op, seq, valueize, type, captures, GE_EXPR))
										  return true;
									      }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				if (tree_expr_nonzero_p (_q30))
				  {
				    switch (TREE_CODE (_q31))
				      {
				      case SSA_NAME:
				        if (gimple *_d3 = get_def (valueize, _q31))
				          {
					    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					      switch (gimple_assign_rhs_code (_a3))
						{
						case BIT_XOR_EXPR:
						  {
						    tree _q50 = gimple_assign_rhs1 (_a3);
						    _q50 = do_valueize (valueize, _q50);
						    tree _q51 = gimple_assign_rhs2 (_a3);
						    _q51 = do_valueize (valueize, _q51);
						    if (tree_swap_operands_p (_q50, _q51))
						      std::swap (_q50, _q51);
						    switch (TREE_CODE (_p1))
						      {
						      case SSA_NAME:
						        if (gimple *_d4 = get_def (valueize, _p1))
						          {
							    if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							      switch (gimple_assign_rhs_code (_a4))
								{
								case NE_EXPR:
								  {
								    tree _q90 = gimple_assign_rhs1 (_a4);
								    _q90 = do_valueize (valueize, _q90);
								    tree _q91 = gimple_assign_rhs2 (_a4);
								    _q91 = do_valueize (valueize, _q91);
								    if (tree_swap_operands_p (_q90, _q91))
								      std::swap (_q90, _q91);
								    if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								      {
									if ((_q91 == _q51 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q51, 0) && types_match (_q91, _q51)))
									  {
									    {
									      tree captures[5] ATTRIBUTE_UNUSED = { _q50, _q51, _q30, _q21, _p1 };
									      if (gimple_simplify_162 (res_op, seq, valueize, type, captures, GE_EXPR))
									        return true;
									    }
									  }
								      }
								    if ((_q90 == _q51 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q51, 0) && types_match (_q90, _q51)))
								      {
									if ((_q91 == _q50 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q50, 0) && types_match (_q91, _q50)))
									  {
									    {
									      tree captures[5] ATTRIBUTE_UNUSED = { _q51, _q50, _q30, _q21, _p1 };
									      if (gimple_simplify_162 (res_op, seq, valueize, type, captures, GE_EXPR))
									        return true;
									    }
									  }
								      }
								    break;
								  }
								default:;
								}
						          }
						        break;
						      default:;
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_AND_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  switch (TREE_CODE (_q40))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q40))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_XOR_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  if (tree_swap_operands_p (_q50, _q51))
						    std::swap (_q50, _q51);
						  if (tree_expr_nonzero_p (_q41))
						    {
						      switch (TREE_CODE (_p1))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _p1))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case NE_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if (tree_swap_operands_p (_q90, _q91))
								        std::swap (_q90, _q91);
								      if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
									{
									  if ((_q91 == _q51 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q51, 0) && types_match (_q91, _q51)))
									    {
									      {
										tree captures[5] ATTRIBUTE_UNUSED = { _q50, _q51, _q41, _q20, _p1 };
										if (gimple_simplify_162 (res_op, seq, valueize, type, captures, LE_EXPR))
										  return true;
									      }
									    }
								        }
								      if ((_q90 == _q51 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q51, 0) && types_match (_q90, _q51)))
									{
									  if ((_q91 == _q50 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q50, 0) && types_match (_q91, _q50)))
									    {
									      {
										tree captures[5] ATTRIBUTE_UNUSED = { _q51, _q50, _q41, _q20, _p1 };
										if (gimple_simplify_162 (res_op, seq, valueize, type, captures, LE_EXPR))
										  return true;
									      }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				if (tree_expr_nonzero_p (_q40))
				  {
				    switch (TREE_CODE (_q41))
				      {
				      case SSA_NAME:
				        if (gimple *_d3 = get_def (valueize, _q41))
				          {
					    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					      switch (gimple_assign_rhs_code (_a3))
						{
						case BIT_XOR_EXPR:
						  {
						    tree _q60 = gimple_assign_rhs1 (_a3);
						    _q60 = do_valueize (valueize, _q60);
						    tree _q61 = gimple_assign_rhs2 (_a3);
						    _q61 = do_valueize (valueize, _q61);
						    if (tree_swap_operands_p (_q60, _q61))
						      std::swap (_q60, _q61);
						    switch (TREE_CODE (_p1))
						      {
						      case SSA_NAME:
						        if (gimple *_d4 = get_def (valueize, _p1))
						          {
							    if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							      switch (gimple_assign_rhs_code (_a4))
								{
								case NE_EXPR:
								  {
								    tree _q90 = gimple_assign_rhs1 (_a4);
								    _q90 = do_valueize (valueize, _q90);
								    tree _q91 = gimple_assign_rhs2 (_a4);
								    _q91 = do_valueize (valueize, _q91);
								    if (tree_swap_operands_p (_q90, _q91))
								      std::swap (_q90, _q91);
								    if ((_q90 == _q60 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q60, 0) && types_match (_q90, _q60)))
								      {
									if ((_q91 == _q61 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q61, 0) && types_match (_q91, _q61)))
									  {
									    {
									      tree captures[5] ATTRIBUTE_UNUSED = { _q60, _q61, _q40, _q20, _p1 };
									      if (gimple_simplify_162 (res_op, seq, valueize, type, captures, LE_EXPR))
									        return true;
									    }
									  }
								      }
								    if ((_q90 == _q61 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q61, 0) && types_match (_q90, _q61)))
								      {
									if ((_q91 == _q60 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q60, 0) && types_match (_q91, _q60)))
									  {
									    {
									      tree captures[5] ATTRIBUTE_UNUSED = { _q61, _q60, _q40, _q20, _p1 };
									      if (gimple_simplify_162 (res_op, seq, valueize, type, captures, LE_EXPR))
									        return true;
									    }
									  }
								      }
								    break;
								  }
								default:;
								}
						          }
						        break;
						      default:;
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_XOR_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case NE_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
						    {
						      if ((_q71 == _q31 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q31, 0) && types_match (_q71, _q31)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q31, _q21, _p1 };
							    if (gimple_simplify_163 (res_op, seq, valueize, type, captures, GE_EXPR))
							      return true;
							  }
						        }
						    }
						  if ((_q70 == _q31 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q31, 0) && types_match (_q70, _q31)))
						    {
						      if ((_q71 == _q30 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q30, 0) && types_match (_q71, _q30)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q31, _q30, _q21, _p1 };
							    if (gimple_simplify_163 (res_op, seq, valueize, type, captures, GE_EXPR))
							      return true;
							  }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_XOR_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case NE_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
						    {
						      if ((_q71 == _q41 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q41, 0) && types_match (_q71, _q41)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q40, _q41, _q20, _p1 };
							    if (gimple_simplify_163 (res_op, seq, valueize, type, captures, LE_EXPR))
							      return true;
							  }
						        }
						    }
						  if ((_q70 == _q41 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q41, 0) && types_match (_q70, _q41)))
						    {
						      if ((_q71 == _q40 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q40, 0) && types_match (_q71, _q40)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q41, _q40, _q20, _p1 };
							    if (gimple_simplify_163 (res_op, seq, valueize, type, captures, LE_EXPR))
							      return true;
							  }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case EQ_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if (gimple_min_value (_q21, valueize))
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p1))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case LE_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a2);
				      _q51 = do_valueize (valueize, _q51);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _p1, _q20, _q51 };
					    if (gimple_simplify_172 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				      break;
				    }
				  case GE_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a2);
				      _q51 = do_valueize (valueize, _q51);
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _p1, _q20, _q50 };
					    if (gimple_simplify_172 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				      break;
				    }
				  case LT_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a2);
				      _q51 = do_valueize (valueize, _q51);
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _p1, _q50 };
					    if (gimple_simplify_173 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				      break;
				    }
				  case GT_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a2);
				      _q51 = do_valueize (valueize, _q51);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  {
					    tree captures[4] ATTRIBUTE_UNUSED = { _p0, _q20, _p1, _q51 };
					    if (gimple_simplify_173 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
		  if (gimple_max_value (_q21, valueize))
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p1))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case GE_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a2);
				      _q51 = do_valueize (valueize, _q51);
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _p1, _q20, _q51 };
					    if (gimple_simplify_167 (res_op, seq, valueize, type, captures, EQ_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  case LE_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a2);
				      _q51 = do_valueize (valueize, _q51);
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _p1, _q20, _q50 };
					    if (gimple_simplify_167 (res_op, seq, valueize, type, captures, EQ_EXPR))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case EQ_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  switch (TREE_CODE (_q50))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q50))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50, _q51 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, EQ_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
						  if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q50, _q51 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, EQ_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  switch (TREE_CODE (_q51))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q51))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51, _q50 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, EQ_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
						  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q51, _q50 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, EQ_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case NE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  switch (TREE_CODE (_q50))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q50))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50, _q51 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
						  if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q50, _q51 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  switch (TREE_CODE (_q51))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q51))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51, _q50 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
						  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q51, _q50 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case LT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  switch (TREE_CODE (_q50))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q50))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50, _q51 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, LT_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
						  if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q50, _q51 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, LT_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  switch (TREE_CODE (_q51))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q51))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51, _q50 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, GT_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
						  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q51, _q50 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, GT_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case GT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  switch (TREE_CODE (_q50))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q50))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50, _q51 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, GT_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
						  if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q50, _q51 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, GT_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  switch (TREE_CODE (_q51))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q51))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51, _q50 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, LT_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
						  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q51, _q50 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, LT_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case LE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  switch (TREE_CODE (_q50))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q50))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50, _q51 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, LE_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
						  if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q50, _q51 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, LE_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  switch (TREE_CODE (_q51))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q51))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51, _q50 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, GE_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
						  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q51, _q50 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, GE_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      case GE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  switch (TREE_CODE (_q50))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q50))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50, _q51 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, GE_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
						  if ((_q60 == _q21 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q21, 0) && types_match (_q60, _q21)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q50, _q51 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, GE_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				  switch (TREE_CODE (_q51))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q51))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      CASE_CONVERT:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51, _q50 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, LE_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
						  if ((_q70 == _q21 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q21, 0) && types_match (_q70, _q21)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q51, _q50 };
							if (gimple_simplify_168 (res_op, seq, valueize, type, captures, LE_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case EQ_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q30, _q61, _p0, _q20, _q21 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, EQ_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
						  if ((_q61 == _q30 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q30, 0) && types_match (_q61, _q30)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q30, _q60, _p0, _q20, _q21 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, EQ_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      case NE_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q30 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q30, 0) && types_match (_q60, _q30)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q30, _q61, _p0, _q20, _q21 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR))
							  return true;
						      }
						    }
						  if ((_q61 == _q30 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q30, 0) && types_match (_q61, _q30)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q30, _q60, _p0, _q20, _q21 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      CASE_CONVERT:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case EQ_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q40, _q61, _p0, _q21, _q20 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, EQ_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
						  if ((_q61 == _q40 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q40, 0) && types_match (_q61, _q40)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q40, _q60, _p0, _q21, _q20 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, EQ_EXPR, EQ_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      case NE_EXPR:
					        {
						  tree _q60 = gimple_assign_rhs1 (_a3);
						  _q60 = do_valueize (valueize, _q60);
						  tree _q61 = gimple_assign_rhs2 (_a3);
						  _q61 = do_valueize (valueize, _q61);
						  if (tree_swap_operands_p (_q60, _q61))
						    std::swap (_q60, _q61);
						  if ((_q60 == _q40 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q40, 0) && types_match (_q60, _q40)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q40, _q61, _p0, _q21, _q20 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR))
							  return true;
						      }
						    }
						  if ((_q61 == _q40 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q40, 0) && types_match (_q61, _q40)))
						    {
						      {
							tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q40, _q60, _p0, _q21, _q20 };
							if (gimple_simplify_159 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR))
							  return true;
						      }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case EQ_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50, _q51 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, EQ_EXPR, EQ_EXPR))
					  return true;
				      }
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q20, _q51, _p0, _q20, _q21 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, EQ_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51, _q50 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, EQ_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q50, _q51 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, EQ_EXPR, EQ_EXPR))
					  return true;
				      }
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q21, _q51, _p0, _q21, _q20 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, EQ_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q51, _q50 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, EQ_EXPR, EQ_EXPR))
					  return true;
				      }
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q21, _q50, _p0, _q21, _q20 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, EQ_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q20, _q50, _p0, _q20, _q21 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, EQ_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case NE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50, _q51 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR))
					  return true;
				      }
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q20, _q51, _p0, _q20, _q21 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51, _q50 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q50, _q51 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR))
					  return true;
				      }
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q21, _q51, _p0, _q21, _q20 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q51, _q50 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, NE_EXPR, EQ_EXPR))
					  return true;
				      }
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q21, _q50, _p0, _q21, _q20 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q20, _q50, _p0, _q20, _q21 };
					if (gimple_simplify_160 (res_op, seq, valueize, type, captures, EQ_EXPR, NE_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case LT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50, _q51 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, LT_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51, _q50 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, GT_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q50, _q51 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, LT_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q51, _q50 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, GT_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case GT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50, _q51 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, GT_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51, _q50 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, LT_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q50, _q51 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, GT_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q51, _q50 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, LT_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case LE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50, _q51 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, LE_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51, _q50 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, GE_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q50, _q51 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, LE_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q51, _q50 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, GE_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case GE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50, _q51 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, GE_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51, _q50 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, LE_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q50, _q51 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, GE_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[6] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q51, _q50 };
					if (gimple_simplify_169 (res_op, seq, valueize, type, captures, LE_EXPR, EQ_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_AND_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_q30))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q30))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_XOR_EXPR:
					        {
						  tree _q40 = gimple_assign_rhs1 (_a3);
						  _q40 = do_valueize (valueize, _q40);
						  tree _q41 = gimple_assign_rhs2 (_a3);
						  _q41 = do_valueize (valueize, _q41);
						  if (tree_swap_operands_p (_q40, _q41))
						    std::swap (_q40, _q41);
						  if (tree_expr_nonzero_p (_q31))
						    {
						      switch (TREE_CODE (_p1))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _p1))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case NE_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if (tree_swap_operands_p (_q90, _q91))
								        std::swap (_q90, _q91);
								      if ((_q90 == _q40 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q40, 0) && types_match (_q90, _q40)))
									{
									  if ((_q91 == _q41 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q41, 0) && types_match (_q91, _q41)))
									    {
									      {
										tree captures[5] ATTRIBUTE_UNUSED = { _q40, _q41, _q31, _q21, _p1 };
										if (gimple_simplify_162 (res_op, seq, valueize, type, captures, EQ_EXPR))
										  return true;
									      }
									    }
								        }
								      if ((_q90 == _q41 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q41, 0) && types_match (_q90, _q41)))
									{
									  if ((_q91 == _q40 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q40, 0) && types_match (_q91, _q40)))
									    {
									      {
										tree captures[5] ATTRIBUTE_UNUSED = { _q41, _q40, _q31, _q21, _p1 };
										if (gimple_simplify_162 (res_op, seq, valueize, type, captures, EQ_EXPR))
										  return true;
									      }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				if (tree_expr_nonzero_p (_q30))
				  {
				    switch (TREE_CODE (_q31))
				      {
				      case SSA_NAME:
				        if (gimple *_d3 = get_def (valueize, _q31))
				          {
					    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					      switch (gimple_assign_rhs_code (_a3))
						{
						case BIT_XOR_EXPR:
						  {
						    tree _q50 = gimple_assign_rhs1 (_a3);
						    _q50 = do_valueize (valueize, _q50);
						    tree _q51 = gimple_assign_rhs2 (_a3);
						    _q51 = do_valueize (valueize, _q51);
						    if (tree_swap_operands_p (_q50, _q51))
						      std::swap (_q50, _q51);
						    switch (TREE_CODE (_p1))
						      {
						      case SSA_NAME:
						        if (gimple *_d4 = get_def (valueize, _p1))
						          {
							    if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							      switch (gimple_assign_rhs_code (_a4))
								{
								case NE_EXPR:
								  {
								    tree _q90 = gimple_assign_rhs1 (_a4);
								    _q90 = do_valueize (valueize, _q90);
								    tree _q91 = gimple_assign_rhs2 (_a4);
								    _q91 = do_valueize (valueize, _q91);
								    if (tree_swap_operands_p (_q90, _q91))
								      std::swap (_q90, _q91);
								    if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
								      {
									if ((_q91 == _q51 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q51, 0) && types_match (_q91, _q51)))
									  {
									    {
									      tree captures[5] ATTRIBUTE_UNUSED = { _q50, _q51, _q30, _q21, _p1 };
									      if (gimple_simplify_162 (res_op, seq, valueize, type, captures, EQ_EXPR))
									        return true;
									    }
									  }
								      }
								    if ((_q90 == _q51 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q51, 0) && types_match (_q90, _q51)))
								      {
									if ((_q91 == _q50 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q50, 0) && types_match (_q91, _q50)))
									  {
									    {
									      tree captures[5] ATTRIBUTE_UNUSED = { _q51, _q50, _q30, _q21, _p1 };
									      if (gimple_simplify_162 (res_op, seq, valueize, type, captures, EQ_EXPR))
									        return true;
									    }
									  }
								      }
								    break;
								  }
								default:;
								}
						          }
						        break;
						      default:;
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_AND_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  switch (TREE_CODE (_q40))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _q40))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case BIT_XOR_EXPR:
					        {
						  tree _q50 = gimple_assign_rhs1 (_a3);
						  _q50 = do_valueize (valueize, _q50);
						  tree _q51 = gimple_assign_rhs2 (_a3);
						  _q51 = do_valueize (valueize, _q51);
						  if (tree_swap_operands_p (_q50, _q51))
						    std::swap (_q50, _q51);
						  if (tree_expr_nonzero_p (_q41))
						    {
						      switch (TREE_CODE (_p1))
						        {
							case SSA_NAME:
							  if (gimple *_d4 = get_def (valueize, _p1))
							    {
							      if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							        switch (gimple_assign_rhs_code (_a4))
								  {
								  case NE_EXPR:
								    {
								      tree _q90 = gimple_assign_rhs1 (_a4);
								      _q90 = do_valueize (valueize, _q90);
								      tree _q91 = gimple_assign_rhs2 (_a4);
								      _q91 = do_valueize (valueize, _q91);
								      if (tree_swap_operands_p (_q90, _q91))
								        std::swap (_q90, _q91);
								      if ((_q90 == _q50 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q50, 0) && types_match (_q90, _q50)))
									{
									  if ((_q91 == _q51 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q51, 0) && types_match (_q91, _q51)))
									    {
									      {
										tree captures[5] ATTRIBUTE_UNUSED = { _q50, _q51, _q41, _q20, _p1 };
										if (gimple_simplify_162 (res_op, seq, valueize, type, captures, EQ_EXPR))
										  return true;
									      }
									    }
								        }
								      if ((_q90 == _q51 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q51, 0) && types_match (_q90, _q51)))
									{
									  if ((_q91 == _q50 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q50, 0) && types_match (_q91, _q50)))
									    {
									      {
										tree captures[5] ATTRIBUTE_UNUSED = { _q51, _q50, _q41, _q20, _p1 };
										if (gimple_simplify_162 (res_op, seq, valueize, type, captures, EQ_EXPR))
										  return true;
									      }
									    }
								        }
								      break;
								    }
								  default:;
								  }
							    }
							  break;
						        default:;
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
				if (tree_expr_nonzero_p (_q40))
				  {
				    switch (TREE_CODE (_q41))
				      {
				      case SSA_NAME:
				        if (gimple *_d3 = get_def (valueize, _q41))
				          {
					    if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					      switch (gimple_assign_rhs_code (_a3))
						{
						case BIT_XOR_EXPR:
						  {
						    tree _q60 = gimple_assign_rhs1 (_a3);
						    _q60 = do_valueize (valueize, _q60);
						    tree _q61 = gimple_assign_rhs2 (_a3);
						    _q61 = do_valueize (valueize, _q61);
						    if (tree_swap_operands_p (_q60, _q61))
						      std::swap (_q60, _q61);
						    switch (TREE_CODE (_p1))
						      {
						      case SSA_NAME:
						        if (gimple *_d4 = get_def (valueize, _p1))
						          {
							    if (gassign *_a4 = dyn_cast <gassign *> (_d4))
							      switch (gimple_assign_rhs_code (_a4))
								{
								case NE_EXPR:
								  {
								    tree _q90 = gimple_assign_rhs1 (_a4);
								    _q90 = do_valueize (valueize, _q90);
								    tree _q91 = gimple_assign_rhs2 (_a4);
								    _q91 = do_valueize (valueize, _q91);
								    if (tree_swap_operands_p (_q90, _q91))
								      std::swap (_q90, _q91);
								    if ((_q90 == _q60 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q60, 0) && types_match (_q90, _q60)))
								      {
									if ((_q91 == _q61 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q61, 0) && types_match (_q91, _q61)))
									  {
									    {
									      tree captures[5] ATTRIBUTE_UNUSED = { _q60, _q61, _q40, _q20, _p1 };
									      if (gimple_simplify_162 (res_op, seq, valueize, type, captures, EQ_EXPR))
									        return true;
									    }
									  }
								      }
								    if ((_q90 == _q61 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q61, 0) && types_match (_q90, _q61)))
								      {
									if ((_q91 == _q60 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q60, 0) && types_match (_q91, _q60)))
									  {
									    {
									      tree captures[5] ATTRIBUTE_UNUSED = { _q61, _q60, _q40, _q20, _p1 };
									      if (gimple_simplify_162 (res_op, seq, valueize, type, captures, EQ_EXPR))
									        return true;
									    }
									  }
								      }
								    break;
								  }
								default:;
								}
						          }
						        break;
						      default:;
						      }
						    break;
						  }
						default:;
						}
				          }
				        break;
				      default:;
				      }
				  }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_XOR_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  if (tree_swap_operands_p (_q30, _q31))
				    std::swap (_q30, _q31);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case NE_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
						    {
						      if ((_q71 == _q31 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q31, 0) && types_match (_q71, _q31)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q30, _q31, _q21, _p1 };
							    if (gimple_simplify_163 (res_op, seq, valueize, type, captures, EQ_EXPR))
							      return true;
							  }
						        }
						    }
						  if ((_q70 == _q31 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q31, 0) && types_match (_q70, _q31)))
						    {
						      if ((_q71 == _q30 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q30, 0) && types_match (_q71, _q30)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q31, _q30, _q21, _p1 };
							    if (gimple_simplify_163 (res_op, seq, valueize, type, captures, EQ_EXPR))
							      return true;
							  }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case BIT_XOR_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  if (tree_swap_operands_p (_q40, _q41))
				    std::swap (_q40, _q41);
				  switch (TREE_CODE (_p1))
				    {
				    case SSA_NAME:
				      if (gimple *_d3 = get_def (valueize, _p1))
				        {
					  if (gassign *_a3 = dyn_cast <gassign *> (_d3))
					    switch (gimple_assign_rhs_code (_a3))
					      {
					      case NE_EXPR:
					        {
						  tree _q70 = gimple_assign_rhs1 (_a3);
						  _q70 = do_valueize (valueize, _q70);
						  tree _q71 = gimple_assign_rhs2 (_a3);
						  _q71 = do_valueize (valueize, _q71);
						  if (tree_swap_operands_p (_q70, _q71))
						    std::swap (_q70, _q71);
						  if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
						    {
						      if ((_q71 == _q41 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q41, 0) && types_match (_q71, _q41)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q40, _q41, _q20, _p1 };
							    if (gimple_simplify_163 (res_op, seq, valueize, type, captures, EQ_EXPR))
							      return true;
							  }
						        }
						    }
						  if ((_q70 == _q41 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q41, 0) && types_match (_q70, _q41)))
						    {
						      if ((_q71 == _q40 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q40, 0) && types_match (_q71, _q40)))
							{
							  {
							    tree captures[4] ATTRIBUTE_UNUSED = { _q41, _q40, _q20, _p1 };
							    if (gimple_simplify_163 (res_op, seq, valueize, type, captures, EQ_EXPR))
							      return true;
							  }
						        }
						    }
					          break;
					        }
					      default:;
					      }
				        }
				      break;
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case MULT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    case MULT_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a2);
					_q51 = do_valueize (valueize, _q51);
					if (tree_swap_operands_p (_q50, _q51))
					  std::swap (_q50, _q51);
					switch (TREE_CODE (_q51))
					  {
					  case INTEGER_CST:
					    {
					      {
						tree captures[8] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q21, _p1, _p1, _q50, _q51 };
						if (gimple_simplify_42 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
						  return true;
					      }
					      break;
					    }
				          default:;
				          }
				        break;
				      }
				    case LSHIFT_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a2);
					_q51 = do_valueize (valueize, _q51);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_q51))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[6] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q21, _p1, _q51 };
						    if (gimple_simplify_43 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    {
			      tree captures[4] ATTRIBUTE_UNUSED = { _p0, _p0, _q20, _q21 };
			      if (gimple_simplify_44 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
			        return true;
			    }
			  }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      case LSHIFT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    case MULT_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a2);
					_q51 = do_valueize (valueize, _q51);
					if (tree_swap_operands_p (_q50, _q51))
					  std::swap (_q50, _q51);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_q51))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[6] ATTRIBUTE_UNUSED = { _p1, _p1, _q20, _q51, _p0, _q21 };
						    if (gimple_simplify_43 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
		      {
			tree _p1_pops[1];
			if (gimple_nop_convert (_p1, _p1_pops, valueize))
			  {
			    tree _q50 = _p1_pops[0];
			    switch (TREE_CODE (_q50))
			      {
			      case SSA_NAME:
			        if (gimple *_d2 = get_def (valueize, _q50))
			          {
				    if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				      switch (gimple_assign_rhs_code (_a2))
					{
					case MULT_EXPR:
					  {
					    tree _q60 = gimple_assign_rhs1 (_a2);
					    _q60 = do_valueize (valueize, _q60);
					    tree _q61 = gimple_assign_rhs2 (_a2);
					    _q61 = do_valueize (valueize, _q61);
					    if (tree_swap_operands_p (_q60, _q61))
					      std::swap (_q60, _q61);
					    {
					      tree _q60_pops[1];
					      if (gimple_nop_convert (_q60, _q60_pops, valueize))
					        {
						  tree _q70 = _q60_pops[0];
						  if ((_q70 == _q20 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q20, 0) && types_match (_q70, _q20)))
						    {
						      switch (TREE_CODE (_q61))
						        {
							case INTEGER_CST:
							  {
							    {
							      tree captures[6] ATTRIBUTE_UNUSED = { _p1, _q50, _q20, _q61, _p0, _q21 };
							      if (gimple_simplify_39 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
							        return true;
							    }
							    break;
							  }
						        default:;
						        }
						    }
					        }
					    }
					    break;
					  }
					default:;
					}
			          }
			        break;
			      default:;
			      }
			  }
		      }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
{
  tree _p0_pops[1];
  if (gimple_logical_inverted_value (_p0, _p0_pops, valueize))
    {
      tree _q20 = _p0_pops[0];
      if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
	{
	  if (gimple_truth_valued_p (_p1, valueize))
	    {
	      {
		tree captures[1] ATTRIBUTE_UNUSED = { _q20 };
		if (gimple_simplify_34 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
		  return true;
	      }
	    }
        }
    }
}
if (gimple_truth_valued_p (_p0, valueize))
  {
    {
      tree _p1_pops[1];
      if (gimple_logical_inverted_value (_p1, _p1_pops, valueize))
        {
	  tree _q30 = _p1_pops[0];
	  if ((_q30 == _p0 && ! TREE_SIDE_EFFECTS (_q30)) || (operand_equal_p (_q30, _p0, 0) && types_match (_q30, _p0)))
	    {
	      {
		tree captures[1] ATTRIBUTE_UNUSED = { _p0 };
		if (gimple_simplify_34 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
		  return true;
	      }
	    }
        }
    }
  }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case MULT_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  if (tree_swap_operands_p (_q30, _q31))
		    std::swap (_q30, _q31);
		  if ((_q30 == _p0 && ! TREE_SIDE_EFFECTS (_q30)) || (operand_equal_p (_q30, _p0, 0) && types_match (_q30, _p0)))
		    {
		      switch (TREE_CODE (_q31))
		        {
			case INTEGER_CST:
			  {
			    {
			      tree captures[4] ATTRIBUTE_UNUSED = { _p1, _p1, _p0, _q31 };
			      if (gimple_simplify_44 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
			        return true;
			    }
			    break;
			  }
		        default:;
		        }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
{
  tree _p1_pops[1];
  if (gimple_nop_convert (_p1, _p1_pops, valueize))
    {
      tree _q30 = _p1_pops[0];
      switch (TREE_CODE (_q30))
        {
	case SSA_NAME:
	  if (gimple *_d1 = get_def (valueize, _q30))
	    {
	      if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	        switch (gimple_assign_rhs_code (_a1))
		  {
		  case MULT_EXPR:
		    {
		      tree _q40 = gimple_assign_rhs1 (_a1);
		      _q40 = do_valueize (valueize, _q40);
		      tree _q41 = gimple_assign_rhs2 (_a1);
		      _q41 = do_valueize (valueize, _q41);
		      if (tree_swap_operands_p (_q40, _q41))
		        std::swap (_q40, _q41);
		      {
			tree _q40_pops[1];
			if (gimple_nop_convert (_q40, _q40_pops, valueize))
			  {
			    tree _q50 = _q40_pops[0];
			    if ((_q50 == _p0 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _p0, 0) && types_match (_q50, _p0)))
			      {
				switch (TREE_CODE (_q41))
				  {
				  case INTEGER_CST:
				    {
				      {
					tree captures[4] ATTRIBUTE_UNUSED = { _p1, _q30, _p0, _q41 };
					if (gimple_simplify_40 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
					  return true;
				      }
				      break;
				    }
			          default:;
			          }
			      }
			  }
		      }
		      break;
		    }
		  default:;
		  }
	    }
	  break;
        default:;
        }
    }
}
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case LSHIFT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_q21))
		    {
		    case INTEGER_CST:
		      {
			switch (TREE_CODE (_p1))
			  {
			  case SSA_NAME:
			    if (gimple *_d2 = get_def (valueize, _p1))
			      {
				if (gassign *_a2 = dyn_cast <gassign *> (_d2))
				  switch (gimple_assign_rhs_code (_a2))
				    {
				    case LSHIFT_EXPR:
				      {
					tree _q50 = gimple_assign_rhs1 (_a2);
					_q50 = do_valueize (valueize, _q50);
					tree _q51 = gimple_assign_rhs2 (_a2);
					_q51 = do_valueize (valueize, _q51);
					if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					  {
					    switch (TREE_CODE (_q51))
					      {
					      case INTEGER_CST:
					        {
						  {
						    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51 };
						    if (gimple_simplify_46 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
						      return true;
						  }
					          break;
					        }
					      default:;
					      }
					  }
				        break;
				      }
				    default:;
				    }
			      }
			    break;
		          default:;
		          }
			if ((_p1 == _q20 && ! TREE_SIDE_EFFECTS (_p1)) || (operand_equal_p (_p1, _q20, 0) && types_match (_p1, _q20)))
			  {
			    {
			      tree captures[3] ATTRIBUTE_UNUSED = { _p0, _q20, _q21 };
			      if (gimple_simplify_47 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
			        return true;
			    }
			  }
		        break;
		      }
		    default:;
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case LSHIFT_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  if ((_q30 == _p0 && ! TREE_SIDE_EFFECTS (_q30)) || (operand_equal_p (_q30, _p0, 0) && types_match (_q30, _p0)))
		    {
		      switch (TREE_CODE (_q31))
		        {
			case INTEGER_CST:
			  {
			    {
			      tree captures[3] ATTRIBUTE_UNUSED = { _p1, _p0, _q31 };
			      if (gimple_simplify_47 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR))
			        return true;
			    }
			    break;
			  }
		        default:;
		        }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case MIN_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MAX_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    if (!HONOR_NANS (captures[0])
)
					      {
						gimple_seq *lseq = seq;
						if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2040;
						{
						  res_op->set_op (BIT_IOR_EXPR, type, 2);
						  res_op->ops[0] = captures[0];
						  res_op->ops[1] = captures[1];
						  res_op->resimplify (lseq, valueize);
						  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1020, __FILE__, __LINE__, true);
						  return true;
						}
next_after_fail2040:;
					      }
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q21, _q20 };
					    if (!HONOR_NANS (captures[0])
)
					      {
						gimple_seq *lseq = seq;
						if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2041;
						{
						  res_op->set_op (BIT_IOR_EXPR, type, 2);
						  res_op->ops[0] = captures[0];
						  res_op->ops[1] = captures[1];
						  res_op->resimplify (lseq, valueize);
						  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1020, __FILE__, __LINE__, true);
						  return true;
						}
next_after_fail2041:;
					      }
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case MAX_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case MIN_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    if (!HONOR_NANS (captures[0])
)
					      {
						gimple_seq *lseq = seq;
						if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2042;
						{
						  res_op->set_op (BIT_IOR_EXPR, type, 2);
						  res_op->ops[0] = captures[0];
						  res_op->ops[1] = captures[1];
						  res_op->resimplify (lseq, valueize);
						  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1020, __FILE__, __LINE__, true);
						  return true;
						}
next_after_fail2042:;
					      }
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q21 };
					    if (!HONOR_NANS (captures[0])
)
					      {
						gimple_seq *lseq = seq;
						if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2043;
						{
						  res_op->set_op (BIT_IOR_EXPR, type, 2);
						  res_op->ops[0] = captures[0];
						  res_op->ops[1] = captures[1];
						  res_op->resimplify (lseq, valueize);
						  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1020, __FILE__, __LINE__, true);
						  return true;
						}
next_after_fail2043:;
					      }
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case VEC_COND_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  tree _q22 = gimple_assign_rhs3 (_a1);
		  _q22 = do_valueize (valueize, _q22);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case VEC_COND_EXPR:
			        {
				  tree _q60 = gimple_assign_rhs1 (_a2);
				  _q60 = do_valueize (valueize, _q60);
				  tree _q61 = gimple_assign_rhs2 (_a2);
				  _q61 = do_valueize (valueize, _q61);
				  tree _q62 = gimple_assign_rhs3 (_a2);
				  _q62 = do_valueize (valueize, _q62);
				  if ((_q60 == _q20 && ! TREE_SIDE_EFFECTS (_q60)) || (operand_equal_p (_q60, _q20, 0) && types_match (_q60, _q20)))
				    {
				      {
					tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _q22, _p1, _q61, _q62 };
					if (VECTOR_TYPE_P (type)
 && (TREE_CODE_CLASS (BIT_IOR_EXPR) != tcc_comparison
 || types_match (type, TREE_TYPE (captures[2]))
 || expand_vec_cond_expr_p (type, TREE_TYPE (captures[1]))
 || (optimize_vectors_before_lowering_p ()
 && !expand_vec_cond_expr_p (TREE_TYPE (captures[2]), TREE_TYPE (captures[1]))))
)
					  {
					    gimple_seq *lseq = seq;
					    if (lseq
					        && (!single_use (captures[0])
					            || !single_use (captures[4])))
					      lseq = NULL;
					    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2044;
					    {
					      res_op->set_op (VEC_COND_EXPR, type, 3);
					      res_op->ops[0] = captures[1];
					      {
						tree _o1[2], _r1;
						_o1[0] = captures[2];
						_o1[1] = captures[5];
						gimple_match_op tem_op (res_op->cond.any_else (), BIT_IOR_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
						tem_op.resimplify (NULL, valueize);
						_r1 = maybe_push_res_to_seq (&tem_op, NULL);
						if (!_r1) goto next_after_fail2044;
						res_op->ops[1] = _r1;
					      }
					      {
						tree _o1[2], _r1;
						_o1[0] = captures[3];
						_o1[1] = captures[6];
						gimple_match_op tem_op (res_op->cond.any_else (), BIT_IOR_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
						tem_op.resimplify (NULL, valueize);
						_r1 = maybe_push_res_to_seq (&tem_op, NULL);
						if (!_r1) goto next_after_fail2044;
						res_op->ops[2] = _r1;
					      }
					      res_op->resimplify (lseq, valueize);
					      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1021, __FILE__, __LINE__, true);
					      return true;
					    }
next_after_fail2044:;
					  }
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  {
		    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _q22, _p1 };
		    if (VECTOR_TYPE_P (type)
 && (TREE_CODE_CLASS (BIT_IOR_EXPR) != tcc_comparison
 || types_match (type, TREE_TYPE (captures[2]))
 || expand_vec_cond_expr_p (type, TREE_TYPE (captures[1]))
 || (optimize_vectors_before_lowering_p ()
 && !expand_vec_cond_expr_p (TREE_TYPE (captures[2]), TREE_TYPE (captures[1]))))
)
		      {
			gimple_seq *lseq = seq;
			if (lseq
			    && (!single_use (captures[0])))
			  lseq = NULL;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2045;
			{
			  res_op->set_op (VEC_COND_EXPR, type, 3);
			  res_op->ops[0] = captures[1];
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[2];
			    _o1[1] = captures[4];
			    gimple_match_op tem_op (res_op->cond.any_else (), BIT_IOR_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail2045;
			    res_op->ops[1] = _r1;
			  }
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[3];
			    _o1[1] = captures[4];
			    gimple_match_op tem_op (res_op->cond.any_else (), BIT_IOR_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail2045;
			    res_op->ops[2] = _r1;
			  }
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1022, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail2045:;
		      }
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p1))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p1))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case VEC_COND_EXPR:
	        {
		  tree _q30 = gimple_assign_rhs1 (_a1);
		  _q30 = do_valueize (valueize, _q30);
		  tree _q31 = gimple_assign_rhs2 (_a1);
		  _q31 = do_valueize (valueize, _q31);
		  tree _q32 = gimple_assign_rhs3 (_a1);
		  _q32 = do_valueize (valueize, _q32);
		  {
		    tree captures[5] ATTRIBUTE_UNUSED = { _p0, _p1, _q30, _q31, _q32 };
		    if (VECTOR_TYPE_P (type)
 && (TREE_CODE_CLASS (BIT_IOR_EXPR) != tcc_comparison
 || types_match (type, TREE_TYPE (captures[3]))
 || expand_vec_cond_expr_p (type, TREE_TYPE (captures[2]))
 || (optimize_vectors_before_lowering_p ()
 && !expand_vec_cond_expr_p (TREE_TYPE (captures[3]), TREE_TYPE (captures[2]))))
)
		      {
			gimple_seq *lseq = seq;
			if (lseq
			    && (!single_use (captures[1])))
			  lseq = NULL;
			if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2046;
			{
			  res_op->set_op (VEC_COND_EXPR, type, 3);
			  res_op->ops[0] = captures[2];
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[0];
			    _o1[1] = captures[3];
			    gimple_match_op tem_op (res_op->cond.any_else (), BIT_IOR_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail2046;
			    res_op->ops[1] = _r1;
			  }
			  {
			    tree _o1[2], _r1;
			    _o1[0] = captures[0];
			    _o1[1] = captures[4];
			    gimple_match_op tem_op (res_op->cond.any_else (), BIT_IOR_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
			    tem_op.resimplify (NULL, valueize);
			    _r1 = maybe_push_res_to_seq (&tem_op, NULL);
			    if (!_r1) goto next_after_fail2046;
			    res_op->ops[2] = _r1;
			  }
			  res_op->resimplify (lseq, valueize);
			  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1023, __FILE__, __LINE__, true);
			  return true;
			}
next_after_fail2046:;
		      }
		  }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  switch (TREE_CODE (_p0))
    {
    case SSA_NAME:
      if (gimple *_d1 = get_def (valueize, _p0))
        {
	  if (gassign *_a1 = dyn_cast <gassign *> (_d1))
	    switch (gimple_assign_rhs_code (_a1))
	      {
	      case UNORDERED_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  if (tree_swap_operands_p (_q20, _q21))
		    std::swap (_q20, _q21);
		  if ((_q21 == _q20 && ! TREE_SIDE_EFFECTS (_q21)) || (operand_equal_p (_q21, _q20, 0) && types_match (_q21, _q20)))
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p1))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case UNORDERED_EXPR:
				    {
				      tree _q50 = gimple_assign_rhs1 (_a2);
				      _q50 = do_valueize (valueize, _q50);
				      tree _q51 = gimple_assign_rhs2 (_a2);
				      _q51 = do_valueize (valueize, _q51);
				      if (tree_swap_operands_p (_q50, _q51))
				        std::swap (_q50, _q51);
				      if ((_q51 == _q50 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q50, 0) && types_match (_q51, _q50)))
					{
					  {
					    tree captures[2] ATTRIBUTE_UNUSED = { _q20, _q50 };
					    if (types_match (captures[0], captures[1])
)
					      {
						gimple_seq *lseq = seq;
						if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2047;
						{
						  res_op->set_op (UNORDERED_EXPR, type, 2);
						  res_op->ops[0] = captures[0];
						  res_op->ops[1] = captures[1];
						  res_op->resimplify (lseq, valueize);
						  if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1068, __FILE__, __LINE__, true);
						  return true;
						}
next_after_fail2047:;
					      }
					  }
				        }
				      if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _q51 };
					    if (gimple_simplify_174 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p1, _q50 };
					    if (gimple_simplify_174 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case UNORDERED_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if (tree_swap_operands_p (_q50, _q51))
				    std::swap (_q50, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q20, _p0, _q21 };
					    if (gimple_simplify_175 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
					{
					  {
					    tree captures[3] ATTRIBUTE_UNUSED = { _q21, _p0, _q20 };
					    if (gimple_simplify_175 (res_op, seq, valueize, type, captures))
					      return true;
					  }
				        }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case LT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case LT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51 };
					if (gimple_simplify_176 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, LT_EXPR, MAX_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q50 };
					if (gimple_simplify_176 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, GT_EXPR, MIN_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case GT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50 };
					if (gimple_simplify_176 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, LT_EXPR, MAX_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q51 };
					if (gimple_simplify_176 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, GT_EXPR, MIN_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case POINTER_PLUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  switch (TREE_CODE (_q31))
				    {
				    case INTEGER_CST:
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case LT_EXPR:
						      {
							tree _q70 = gimple_assign_rhs1 (_a3);
							_q70 = do_valueize (valueize, _q70);
							tree _q71 = gimple_assign_rhs2 (_a3);
							_q71 = do_valueize (valueize, _q71);
							switch (TREE_CODE (_q70))
							  {
							  case SSA_NAME:
							    if (gimple *_d4 = get_def (valueize, _q70))
							      {
								if (gassign *_a4 = dyn_cast <gassign *> (_d4))
								  switch (gimple_assign_rhs_code (_a4))
								    {
								    case POINTER_PLUS_EXPR:
								      {
									tree _q80 = gimple_assign_rhs1 (_a4);
									_q80 = do_valueize (valueize, _q80);
									tree _q81 = gimple_assign_rhs2 (_a4);
									_q81 = do_valueize (valueize, _q81);
									if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
									  {
									    if ((_q81 == _q31 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q31, 0) && types_match (_q81, _q31)))
									      {
										if ((_q71 == _q30 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q30, 0) && types_match (_q71, _q30)))
										  {
										    {
										      tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31, _q21, _p1, _q70 };
										      const enum tree_code cmp = LT_EXPR;
										      if (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (captures[2]))
 && TYPE_OVERFLOW_WRAPS (sizetype)
 && TYPE_PRECISION (TREE_TYPE (captures[2])) == TYPE_PRECISION (sizetype)
)
											{
											  {
 offset_int off = wi::to_offset (captures[3]) - (cmp == LE_EXPR ? 1 : 0);
 offset_int rhs = off * 2;
											      if (wi::min_precision (rhs, UNSIGNED) <= TYPE_PRECISION (sizetype)
)
												{
												  {
 bool swap_p = tree_swap_operands_p (captures[2], captures[4]);
 tree rhs_tree = wide_int_to_tree (sizetype, rhs);
												      if (cmp == LT_EXPR
)
													{
													  gimple_seq *lseq = seq;
													  if (lseq
													      && (!single_use (captures[0])
													          || !single_use (captures[5])))
													    lseq = NULL;
													  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2048;
													  {
													    res_op->set_op (GT_EXPR, type, 2);
													    {
													      tree _o1[1], _r1;
													      {
														tree _o2[2], _r2;
														_o2[0] =  swap_p ? captures[6] : captures[1];
														_o2[1] =  swap_p ? captures[2] : captures[4];
														gimple_match_op tem_op (res_op->cond.any_else (), POINTER_DIFF_EXPR, ssizetype, _o2[0], _o2[1]);
														tem_op.resimplify (lseq, valueize);
														_r2 = maybe_push_res_to_seq (&tem_op, lseq);
														if (!_r2) goto next_after_fail2048;
														_o1[0] = _r2;
													      }
													      if (sizetype != TREE_TYPE (_o1[0])
													          && !useless_type_conversion_p (sizetype, TREE_TYPE (_o1[0])))
														{
														  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, sizetype, _o1[0]);
														  tem_op.resimplify (lseq, valueize);
														  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
														  if (!_r1) goto next_after_fail2048;
													        }
													      else
													        _r1 = _o1[0];
													      res_op->ops[0] = _r1;
													    }
													    res_op->ops[1] =  rhs_tree;
													    res_op->resimplify (lseq, valueize);
													    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1069, __FILE__, __LINE__, true);
													    return true;
													  }
next_after_fail2048:;
													}
												      else
													{
													  gimple_seq *lseq = seq;
													  if (lseq
													      && (!single_use (captures[0])
													          || !single_use (captures[5])))
													    lseq = NULL;
													  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2049;
													  {
													    res_op->set_op (GT_EXPR, type, 2);
													    {
													      tree _o1[1], _r1;
													      {
														tree _o2[2], _r2;
														{
														  tree _o3[2], _r3;
														  _o3[0] =  swap_p ? captures[4] : captures[2];
														  _o3[1] =  wide_int_to_tree (sizetype, off);
														  gimple_match_op tem_op (res_op->cond.any_else (), POINTER_PLUS_EXPR, TREE_TYPE (_o3[0]), _o3[0], _o3[1]);
														  tem_op.resimplify (lseq, valueize);
														  _r3 = maybe_push_res_to_seq (&tem_op, lseq);
														  if (!_r3) goto next_after_fail2049;
														  _o2[0] = _r3;
														}
														_o2[1] =  swap_p ? captures[2] : captures[4];
														gimple_match_op tem_op (res_op->cond.any_else (), POINTER_DIFF_EXPR, ssizetype, _o2[0], _o2[1]);
														tem_op.resimplify (lseq, valueize);
														_r2 = maybe_push_res_to_seq (&tem_op, lseq);
														if (!_r2) goto next_after_fail2049;
														_o1[0] = _r2;
													      }
													      if (sizetype != TREE_TYPE (_o1[0])
													          && !useless_type_conversion_p (sizetype, TREE_TYPE (_o1[0])))
														{
														  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, sizetype, _o1[0]);
														  tem_op.resimplify (lseq, valueize);
														  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
														  if (!_r1) goto next_after_fail2049;
													        }
													      else
													        _r1 = _o1[0];
													      res_op->ops[0] = _r1;
													    }
													    res_op->ops[1] =  rhs_tree;
													    res_op->resimplify (lseq, valueize);
													    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1070, __FILE__, __LINE__, true);
													    return true;
													  }
next_after_fail2049:;
													}
												  }
												}
											  }
											}
										    }
										  }
									      }
									  }
								        break;
								      }
								    default:;
								    }
							      }
							    break;
						          default:;
						          }
						        break;
						      }
						    case GT_EXPR:
						      {
							tree _q70 = gimple_assign_rhs1 (_a3);
							_q70 = do_valueize (valueize, _q70);
							tree _q71 = gimple_assign_rhs2 (_a3);
							_q71 = do_valueize (valueize, _q71);
							if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
							  {
							    switch (TREE_CODE (_q71))
							      {
							      case SSA_NAME:
							        if (gimple *_d4 = get_def (valueize, _q71))
							          {
								    if (gassign *_a4 = dyn_cast <gassign *> (_d4))
								      switch (gimple_assign_rhs_code (_a4))
									{
									case POINTER_PLUS_EXPR:
									  {
									    tree _q90 = gimple_assign_rhs1 (_a4);
									    _q90 = do_valueize (valueize, _q90);
									    tree _q91 = gimple_assign_rhs2 (_a4);
									    _q91 = do_valueize (valueize, _q91);
									    if ((_q90 == _q21 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q21, 0) && types_match (_q90, _q21)))
									      {
										if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
										  {
										    {
										      tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31, _q21, _p1, _q71 };
										      const enum tree_code cmp = LT_EXPR;
										      if (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (captures[2]))
 && TYPE_OVERFLOW_WRAPS (sizetype)
 && TYPE_PRECISION (TREE_TYPE (captures[2])) == TYPE_PRECISION (sizetype)
)
											{
											  {
 offset_int off = wi::to_offset (captures[3]) - (cmp == LE_EXPR ? 1 : 0);
 offset_int rhs = off * 2;
											      if (wi::min_precision (rhs, UNSIGNED) <= TYPE_PRECISION (sizetype)
)
												{
												  {
 bool swap_p = tree_swap_operands_p (captures[2], captures[4]);
 tree rhs_tree = wide_int_to_tree (sizetype, rhs);
												      if (cmp == LT_EXPR
)
													{
													  gimple_seq *lseq = seq;
													  if (lseq
													      && (!single_use (captures[0])
													          || !single_use (captures[5])))
													    lseq = NULL;
													  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2050;
													  {
													    res_op->set_op (GT_EXPR, type, 2);
													    {
													      tree _o1[1], _r1;
													      {
														tree _o2[2], _r2;
														_o2[0] =  swap_p ? captures[6] : captures[1];
														_o2[1] =  swap_p ? captures[2] : captures[4];
														gimple_match_op tem_op (res_op->cond.any_else (), POINTER_DIFF_EXPR, ssizetype, _o2[0], _o2[1]);
														tem_op.resimplify (lseq, valueize);
														_r2 = maybe_push_res_to_seq (&tem_op, lseq);
														if (!_r2) goto next_after_fail2050;
														_o1[0] = _r2;
													      }
													      if (sizetype != TREE_TYPE (_o1[0])
													          && !useless_type_conversion_p (sizetype, TREE_TYPE (_o1[0])))
														{
														  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, sizetype, _o1[0]);
														  tem_op.resimplify (lseq, valueize);
														  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
														  if (!_r1) goto next_after_fail2050;
													        }
													      else
													        _r1 = _o1[0];
													      res_op->ops[0] = _r1;
													    }
													    res_op->ops[1] =  rhs_tree;
													    res_op->resimplify (lseq, valueize);
													    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1069, __FILE__, __LINE__, true);
													    return true;
													  }
next_after_fail2050:;
													}
												      else
													{
													  gimple_seq *lseq = seq;
													  if (lseq
													      && (!single_use (captures[0])
													          || !single_use (captures[5])))
													    lseq = NULL;
													  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2051;
													  {
													    res_op->set_op (GT_EXPR, type, 2);
													    {
													      tree _o1[1], _r1;
													      {
														tree _o2[2], _r2;
														{
														  tree _o3[2], _r3;
														  _o3[0] =  swap_p ? captures[4] : captures[2];
														  _o3[1] =  wide_int_to_tree (sizetype, off);
														  gimple_match_op tem_op (res_op->cond.any_else (), POINTER_PLUS_EXPR, TREE_TYPE (_o3[0]), _o3[0], _o3[1]);
														  tem_op.resimplify (lseq, valueize);
														  _r3 = maybe_push_res_to_seq (&tem_op, lseq);
														  if (!_r3) goto next_after_fail2051;
														  _o2[0] = _r3;
														}
														_o2[1] =  swap_p ? captures[2] : captures[4];
														gimple_match_op tem_op (res_op->cond.any_else (), POINTER_DIFF_EXPR, ssizetype, _o2[0], _o2[1]);
														tem_op.resimplify (lseq, valueize);
														_r2 = maybe_push_res_to_seq (&tem_op, lseq);
														if (!_r2) goto next_after_fail2051;
														_o1[0] = _r2;
													      }
													      if (sizetype != TREE_TYPE (_o1[0])
													          && !useless_type_conversion_p (sizetype, TREE_TYPE (_o1[0])))
														{
														  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, sizetype, _o1[0]);
														  tem_op.resimplify (lseq, valueize);
														  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
														  if (!_r1) goto next_after_fail2051;
													        }
													      else
													        _r1 = _o1[0];
													      res_op->ops[0] = _r1;
													    }
													    res_op->ops[1] =  rhs_tree;
													    res_op->resimplify (lseq, valueize);
													    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1070, __FILE__, __LINE__, true);
													    return true;
													  }
next_after_fail2051:;
													}
												  }
												}
											  }
											}
										    }
										  }
									      }
									    break;
									  }
									default:;
									}
							          }
							        break;
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case LE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case LE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51 };
					if (gimple_simplify_176 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, LE_EXPR, MAX_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q50 };
					if (gimple_simplify_176 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, GE_EXPR, MIN_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case GE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50 };
					if (gimple_simplify_176 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, LE_EXPR, MAX_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q51 };
					if (gimple_simplify_176 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, GE_EXPR, MIN_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q20))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q20))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case POINTER_PLUS_EXPR:
			        {
				  tree _q30 = gimple_assign_rhs1 (_a2);
				  _q30 = do_valueize (valueize, _q30);
				  tree _q31 = gimple_assign_rhs2 (_a2);
				  _q31 = do_valueize (valueize, _q31);
				  switch (TREE_CODE (_q31))
				    {
				    case INTEGER_CST:
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case LE_EXPR:
						      {
							tree _q70 = gimple_assign_rhs1 (_a3);
							_q70 = do_valueize (valueize, _q70);
							tree _q71 = gimple_assign_rhs2 (_a3);
							_q71 = do_valueize (valueize, _q71);
							switch (TREE_CODE (_q70))
							  {
							  case SSA_NAME:
							    if (gimple *_d4 = get_def (valueize, _q70))
							      {
								if (gassign *_a4 = dyn_cast <gassign *> (_d4))
								  switch (gimple_assign_rhs_code (_a4))
								    {
								    case POINTER_PLUS_EXPR:
								      {
									tree _q80 = gimple_assign_rhs1 (_a4);
									_q80 = do_valueize (valueize, _q80);
									tree _q81 = gimple_assign_rhs2 (_a4);
									_q81 = do_valueize (valueize, _q81);
									if ((_q80 == _q21 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q21, 0) && types_match (_q80, _q21)))
									  {
									    if ((_q81 == _q31 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q31, 0) && types_match (_q81, _q31)))
									      {
										if ((_q71 == _q30 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q30, 0) && types_match (_q71, _q30)))
										  {
										    {
										      tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31, _q21, _p1, _q70 };
										      const enum tree_code cmp = LE_EXPR;
										      if (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (captures[2]))
 && TYPE_OVERFLOW_WRAPS (sizetype)
 && TYPE_PRECISION (TREE_TYPE (captures[2])) == TYPE_PRECISION (sizetype)
)
											{
											  {
 offset_int off = wi::to_offset (captures[3]) - (cmp == LE_EXPR ? 1 : 0);
 offset_int rhs = off * 2;
											      if (wi::min_precision (rhs, UNSIGNED) <= TYPE_PRECISION (sizetype)
)
												{
												  {
 bool swap_p = tree_swap_operands_p (captures[2], captures[4]);
 tree rhs_tree = wide_int_to_tree (sizetype, rhs);
												      if (cmp == LT_EXPR
)
													{
													  gimple_seq *lseq = seq;
													  if (lseq
													      && (!single_use (captures[0])
													          || !single_use (captures[5])))
													    lseq = NULL;
													  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2052;
													  {
													    res_op->set_op (GT_EXPR, type, 2);
													    {
													      tree _o1[1], _r1;
													      {
														tree _o2[2], _r2;
														_o2[0] =  swap_p ? captures[6] : captures[1];
														_o2[1] =  swap_p ? captures[2] : captures[4];
														gimple_match_op tem_op (res_op->cond.any_else (), POINTER_DIFF_EXPR, ssizetype, _o2[0], _o2[1]);
														tem_op.resimplify (lseq, valueize);
														_r2 = maybe_push_res_to_seq (&tem_op, lseq);
														if (!_r2) goto next_after_fail2052;
														_o1[0] = _r2;
													      }
													      if (sizetype != TREE_TYPE (_o1[0])
													          && !useless_type_conversion_p (sizetype, TREE_TYPE (_o1[0])))
														{
														  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, sizetype, _o1[0]);
														  tem_op.resimplify (lseq, valueize);
														  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
														  if (!_r1) goto next_after_fail2052;
													        }
													      else
													        _r1 = _o1[0];
													      res_op->ops[0] = _r1;
													    }
													    res_op->ops[1] =  rhs_tree;
													    res_op->resimplify (lseq, valueize);
													    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1069, __FILE__, __LINE__, true);
													    return true;
													  }
next_after_fail2052:;
													}
												      else
													{
													  gimple_seq *lseq = seq;
													  if (lseq
													      && (!single_use (captures[0])
													          || !single_use (captures[5])))
													    lseq = NULL;
													  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2053;
													  {
													    res_op->set_op (GT_EXPR, type, 2);
													    {
													      tree _o1[1], _r1;
													      {
														tree _o2[2], _r2;
														{
														  tree _o3[2], _r3;
														  _o3[0] =  swap_p ? captures[4] : captures[2];
														  _o3[1] =  wide_int_to_tree (sizetype, off);
														  gimple_match_op tem_op (res_op->cond.any_else (), POINTER_PLUS_EXPR, TREE_TYPE (_o3[0]), _o3[0], _o3[1]);
														  tem_op.resimplify (lseq, valueize);
														  _r3 = maybe_push_res_to_seq (&tem_op, lseq);
														  if (!_r3) goto next_after_fail2053;
														  _o2[0] = _r3;
														}
														_o2[1] =  swap_p ? captures[2] : captures[4];
														gimple_match_op tem_op (res_op->cond.any_else (), POINTER_DIFF_EXPR, ssizetype, _o2[0], _o2[1]);
														tem_op.resimplify (lseq, valueize);
														_r2 = maybe_push_res_to_seq (&tem_op, lseq);
														if (!_r2) goto next_after_fail2053;
														_o1[0] = _r2;
													      }
													      if (sizetype != TREE_TYPE (_o1[0])
													          && !useless_type_conversion_p (sizetype, TREE_TYPE (_o1[0])))
														{
														  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, sizetype, _o1[0]);
														  tem_op.resimplify (lseq, valueize);
														  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
														  if (!_r1) goto next_after_fail2053;
													        }
													      else
													        _r1 = _o1[0];
													      res_op->ops[0] = _r1;
													    }
													    res_op->ops[1] =  rhs_tree;
													    res_op->resimplify (lseq, valueize);
													    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1070, __FILE__, __LINE__, true);
													    return true;
													  }
next_after_fail2053:;
													}
												  }
												}
											  }
											}
										    }
										  }
									      }
									  }
								        break;
								      }
								    default:;
								    }
							      }
							    break;
						          default:;
						          }
						        break;
						      }
						    case GE_EXPR:
						      {
							tree _q70 = gimple_assign_rhs1 (_a3);
							_q70 = do_valueize (valueize, _q70);
							tree _q71 = gimple_assign_rhs2 (_a3);
							_q71 = do_valueize (valueize, _q71);
							if ((_q70 == _q30 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q30, 0) && types_match (_q70, _q30)))
							  {
							    switch (TREE_CODE (_q71))
							      {
							      case SSA_NAME:
							        if (gimple *_d4 = get_def (valueize, _q71))
							          {
								    if (gassign *_a4 = dyn_cast <gassign *> (_d4))
								      switch (gimple_assign_rhs_code (_a4))
									{
									case POINTER_PLUS_EXPR:
									  {
									    tree _q90 = gimple_assign_rhs1 (_a4);
									    _q90 = do_valueize (valueize, _q90);
									    tree _q91 = gimple_assign_rhs2 (_a4);
									    _q91 = do_valueize (valueize, _q91);
									    if ((_q90 == _q21 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q21, 0) && types_match (_q90, _q21)))
									      {
										if ((_q91 == _q31 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q31, 0) && types_match (_q91, _q31)))
										  {
										    {
										      tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q20, _q30, _q31, _q21, _p1, _q71 };
										      const enum tree_code cmp = LE_EXPR;
										      if (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (captures[2]))
 && TYPE_OVERFLOW_WRAPS (sizetype)
 && TYPE_PRECISION (TREE_TYPE (captures[2])) == TYPE_PRECISION (sizetype)
)
											{
											  {
 offset_int off = wi::to_offset (captures[3]) - (cmp == LE_EXPR ? 1 : 0);
 offset_int rhs = off * 2;
											      if (wi::min_precision (rhs, UNSIGNED) <= TYPE_PRECISION (sizetype)
)
												{
												  {
 bool swap_p = tree_swap_operands_p (captures[2], captures[4]);
 tree rhs_tree = wide_int_to_tree (sizetype, rhs);
												      if (cmp == LT_EXPR
)
													{
													  gimple_seq *lseq = seq;
													  if (lseq
													      && (!single_use (captures[0])
													          || !single_use (captures[5])))
													    lseq = NULL;
													  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2054;
													  {
													    res_op->set_op (GT_EXPR, type, 2);
													    {
													      tree _o1[1], _r1;
													      {
														tree _o2[2], _r2;
														_o2[0] =  swap_p ? captures[6] : captures[1];
														_o2[1] =  swap_p ? captures[2] : captures[4];
														gimple_match_op tem_op (res_op->cond.any_else (), POINTER_DIFF_EXPR, ssizetype, _o2[0], _o2[1]);
														tem_op.resimplify (lseq, valueize);
														_r2 = maybe_push_res_to_seq (&tem_op, lseq);
														if (!_r2) goto next_after_fail2054;
														_o1[0] = _r2;
													      }
													      if (sizetype != TREE_TYPE (_o1[0])
													          && !useless_type_conversion_p (sizetype, TREE_TYPE (_o1[0])))
														{
														  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, sizetype, _o1[0]);
														  tem_op.resimplify (lseq, valueize);
														  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
														  if (!_r1) goto next_after_fail2054;
													        }
													      else
													        _r1 = _o1[0];
													      res_op->ops[0] = _r1;
													    }
													    res_op->ops[1] =  rhs_tree;
													    res_op->resimplify (lseq, valueize);
													    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1069, __FILE__, __LINE__, true);
													    return true;
													  }
next_after_fail2054:;
													}
												      else
													{
													  gimple_seq *lseq = seq;
													  if (lseq
													      && (!single_use (captures[0])
													          || !single_use (captures[5])))
													    lseq = NULL;
													  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2055;
													  {
													    res_op->set_op (GT_EXPR, type, 2);
													    {
													      tree _o1[1], _r1;
													      {
														tree _o2[2], _r2;
														{
														  tree _o3[2], _r3;
														  _o3[0] =  swap_p ? captures[4] : captures[2];
														  _o3[1] =  wide_int_to_tree (sizetype, off);
														  gimple_match_op tem_op (res_op->cond.any_else (), POINTER_PLUS_EXPR, TREE_TYPE (_o3[0]), _o3[0], _o3[1]);
														  tem_op.resimplify (lseq, valueize);
														  _r3 = maybe_push_res_to_seq (&tem_op, lseq);
														  if (!_r3) goto next_after_fail2055;
														  _o2[0] = _r3;
														}
														_o2[1] =  swap_p ? captures[2] : captures[4];
														gimple_match_op tem_op (res_op->cond.any_else (), POINTER_DIFF_EXPR, ssizetype, _o2[0], _o2[1]);
														tem_op.resimplify (lseq, valueize);
														_r2 = maybe_push_res_to_seq (&tem_op, lseq);
														if (!_r2) goto next_after_fail2055;
														_o1[0] = _r2;
													      }
													      if (sizetype != TREE_TYPE (_o1[0])
													          && !useless_type_conversion_p (sizetype, TREE_TYPE (_o1[0])))
														{
														  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, sizetype, _o1[0]);
														  tem_op.resimplify (lseq, valueize);
														  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
														  if (!_r1) goto next_after_fail2055;
													        }
													      else
													        _r1 = _o1[0];
													      res_op->ops[0] = _r1;
													    }
													    res_op->ops[1] =  rhs_tree;
													    res_op->resimplify (lseq, valueize);
													    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1070, __FILE__, __LINE__, true);
													    return true;
													  }
next_after_fail2055:;
													}
												  }
												}
											  }
											}
										    }
										  }
									      }
									    break;
									  }
									default:;
									}
							          }
							        break;
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case GT_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case GT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51 };
					if (gimple_simplify_176 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, GT_EXPR, MIN_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q50 };
					if (gimple_simplify_176 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, LT_EXPR, MAX_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case LT_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50 };
					if (gimple_simplify_176 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, GT_EXPR, MIN_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q51 };
					if (gimple_simplify_176 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, LT_EXPR, MAX_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case POINTER_PLUS_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  switch (TREE_CODE (_q41))
				    {
				    case INTEGER_CST:
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case LT_EXPR:
						      {
							tree _q70 = gimple_assign_rhs1 (_a3);
							_q70 = do_valueize (valueize, _q70);
							tree _q71 = gimple_assign_rhs2 (_a3);
							_q71 = do_valueize (valueize, _q71);
							switch (TREE_CODE (_q70))
							  {
							  case SSA_NAME:
							    if (gimple *_d4 = get_def (valueize, _q70))
							      {
								if (gassign *_a4 = dyn_cast <gassign *> (_d4))
								  switch (gimple_assign_rhs_code (_a4))
								    {
								    case POINTER_PLUS_EXPR:
								      {
									tree _q80 = gimple_assign_rhs1 (_a4);
									_q80 = do_valueize (valueize, _q80);
									tree _q81 = gimple_assign_rhs2 (_a4);
									_q81 = do_valueize (valueize, _q81);
									if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
									  {
									    if ((_q81 == _q41 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q41, 0) && types_match (_q81, _q41)))
									      {
										if ((_q71 == _q40 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q40, 0) && types_match (_q71, _q40)))
										  {
										    {
										      tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q21, _q40, _q41, _q20, _p1, _q70 };
										      const enum tree_code cmp = LT_EXPR;
										      if (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (captures[2]))
 && TYPE_OVERFLOW_WRAPS (sizetype)
 && TYPE_PRECISION (TREE_TYPE (captures[2])) == TYPE_PRECISION (sizetype)
)
											{
											  {
 offset_int off = wi::to_offset (captures[3]) - (cmp == LE_EXPR ? 1 : 0);
 offset_int rhs = off * 2;
											      if (wi::min_precision (rhs, UNSIGNED) <= TYPE_PRECISION (sizetype)
)
												{
												  {
 bool swap_p = tree_swap_operands_p (captures[2], captures[4]);
 tree rhs_tree = wide_int_to_tree (sizetype, rhs);
												      if (cmp == LT_EXPR
)
													{
													  gimple_seq *lseq = seq;
													  if (lseq
													      && (!single_use (captures[0])
													          || !single_use (captures[5])))
													    lseq = NULL;
													  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2056;
													  {
													    res_op->set_op (GT_EXPR, type, 2);
													    {
													      tree _o1[1], _r1;
													      {
														tree _o2[2], _r2;
														_o2[0] =  swap_p ? captures[6] : captures[1];
														_o2[1] =  swap_p ? captures[2] : captures[4];
														gimple_match_op tem_op (res_op->cond.any_else (), POINTER_DIFF_EXPR, ssizetype, _o2[0], _o2[1]);
														tem_op.resimplify (lseq, valueize);
														_r2 = maybe_push_res_to_seq (&tem_op, lseq);
														if (!_r2) goto next_after_fail2056;
														_o1[0] = _r2;
													      }
													      if (sizetype != TREE_TYPE (_o1[0])
													          && !useless_type_conversion_p (sizetype, TREE_TYPE (_o1[0])))
														{
														  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, sizetype, _o1[0]);
														  tem_op.resimplify (lseq, valueize);
														  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
														  if (!_r1) goto next_after_fail2056;
													        }
													      else
													        _r1 = _o1[0];
													      res_op->ops[0] = _r1;
													    }
													    res_op->ops[1] =  rhs_tree;
													    res_op->resimplify (lseq, valueize);
													    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1069, __FILE__, __LINE__, true);
													    return true;
													  }
next_after_fail2056:;
													}
												      else
													{
													  gimple_seq *lseq = seq;
													  if (lseq
													      && (!single_use (captures[0])
													          || !single_use (captures[5])))
													    lseq = NULL;
													  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2057;
													  {
													    res_op->set_op (GT_EXPR, type, 2);
													    {
													      tree _o1[1], _r1;
													      {
														tree _o2[2], _r2;
														{
														  tree _o3[2], _r3;
														  _o3[0] =  swap_p ? captures[4] : captures[2];
														  _o3[1] =  wide_int_to_tree (sizetype, off);
														  gimple_match_op tem_op (res_op->cond.any_else (), POINTER_PLUS_EXPR, TREE_TYPE (_o3[0]), _o3[0], _o3[1]);
														  tem_op.resimplify (lseq, valueize);
														  _r3 = maybe_push_res_to_seq (&tem_op, lseq);
														  if (!_r3) goto next_after_fail2057;
														  _o2[0] = _r3;
														}
														_o2[1] =  swap_p ? captures[2] : captures[4];
														gimple_match_op tem_op (res_op->cond.any_else (), POINTER_DIFF_EXPR, ssizetype, _o2[0], _o2[1]);
														tem_op.resimplify (lseq, valueize);
														_r2 = maybe_push_res_to_seq (&tem_op, lseq);
														if (!_r2) goto next_after_fail2057;
														_o1[0] = _r2;
													      }
													      if (sizetype != TREE_TYPE (_o1[0])
													          && !useless_type_conversion_p (sizetype, TREE_TYPE (_o1[0])))
														{
														  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, sizetype, _o1[0]);
														  tem_op.resimplify (lseq, valueize);
														  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
														  if (!_r1) goto next_after_fail2057;
													        }
													      else
													        _r1 = _o1[0];
													      res_op->ops[0] = _r1;
													    }
													    res_op->ops[1] =  rhs_tree;
													    res_op->resimplify (lseq, valueize);
													    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1070, __FILE__, __LINE__, true);
													    return true;
													  }
next_after_fail2057:;
													}
												  }
												}
											  }
											}
										    }
										  }
									      }
									  }
								        break;
								      }
								    default:;
								    }
							      }
							    break;
						          default:;
						          }
						        break;
						      }
						    case GT_EXPR:
						      {
							tree _q70 = gimple_assign_rhs1 (_a3);
							_q70 = do_valueize (valueize, _q70);
							tree _q71 = gimple_assign_rhs2 (_a3);
							_q71 = do_valueize (valueize, _q71);
							if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
							  {
							    switch (TREE_CODE (_q71))
							      {
							      case SSA_NAME:
							        if (gimple *_d4 = get_def (valueize, _q71))
							          {
								    if (gassign *_a4 = dyn_cast <gassign *> (_d4))
								      switch (gimple_assign_rhs_code (_a4))
									{
									case POINTER_PLUS_EXPR:
									  {
									    tree _q90 = gimple_assign_rhs1 (_a4);
									    _q90 = do_valueize (valueize, _q90);
									    tree _q91 = gimple_assign_rhs2 (_a4);
									    _q91 = do_valueize (valueize, _q91);
									    if ((_q90 == _q20 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q20, 0) && types_match (_q90, _q20)))
									      {
										if ((_q91 == _q41 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q41, 0) && types_match (_q91, _q41)))
										  {
										    {
										      tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q21, _q40, _q41, _q20, _p1, _q71 };
										      const enum tree_code cmp = LT_EXPR;
										      if (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (captures[2]))
 && TYPE_OVERFLOW_WRAPS (sizetype)
 && TYPE_PRECISION (TREE_TYPE (captures[2])) == TYPE_PRECISION (sizetype)
)
											{
											  {
 offset_int off = wi::to_offset (captures[3]) - (cmp == LE_EXPR ? 1 : 0);
 offset_int rhs = off * 2;
											      if (wi::min_precision (rhs, UNSIGNED) <= TYPE_PRECISION (sizetype)
)
												{
												  {
 bool swap_p = tree_swap_operands_p (captures[2], captures[4]);
 tree rhs_tree = wide_int_to_tree (sizetype, rhs);
												      if (cmp == LT_EXPR
)
													{
													  gimple_seq *lseq = seq;
													  if (lseq
													      && (!single_use (captures[0])
													          || !single_use (captures[5])))
													    lseq = NULL;
													  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2058;
													  {
													    res_op->set_op (GT_EXPR, type, 2);
													    {
													      tree _o1[1], _r1;
													      {
														tree _o2[2], _r2;
														_o2[0] =  swap_p ? captures[6] : captures[1];
														_o2[1] =  swap_p ? captures[2] : captures[4];
														gimple_match_op tem_op (res_op->cond.any_else (), POINTER_DIFF_EXPR, ssizetype, _o2[0], _o2[1]);
														tem_op.resimplify (lseq, valueize);
														_r2 = maybe_push_res_to_seq (&tem_op, lseq);
														if (!_r2) goto next_after_fail2058;
														_o1[0] = _r2;
													      }
													      if (sizetype != TREE_TYPE (_o1[0])
													          && !useless_type_conversion_p (sizetype, TREE_TYPE (_o1[0])))
														{
														  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, sizetype, _o1[0]);
														  tem_op.resimplify (lseq, valueize);
														  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
														  if (!_r1) goto next_after_fail2058;
													        }
													      else
													        _r1 = _o1[0];
													      res_op->ops[0] = _r1;
													    }
													    res_op->ops[1] =  rhs_tree;
													    res_op->resimplify (lseq, valueize);
													    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1069, __FILE__, __LINE__, true);
													    return true;
													  }
next_after_fail2058:;
													}
												      else
													{
													  gimple_seq *lseq = seq;
													  if (lseq
													      && (!single_use (captures[0])
													          || !single_use (captures[5])))
													    lseq = NULL;
													  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2059;
													  {
													    res_op->set_op (GT_EXPR, type, 2);
													    {
													      tree _o1[1], _r1;
													      {
														tree _o2[2], _r2;
														{
														  tree _o3[2], _r3;
														  _o3[0] =  swap_p ? captures[4] : captures[2];
														  _o3[1] =  wide_int_to_tree (sizetype, off);
														  gimple_match_op tem_op (res_op->cond.any_else (), POINTER_PLUS_EXPR, TREE_TYPE (_o3[0]), _o3[0], _o3[1]);
														  tem_op.resimplify (lseq, valueize);
														  _r3 = maybe_push_res_to_seq (&tem_op, lseq);
														  if (!_r3) goto next_after_fail2059;
														  _o2[0] = _r3;
														}
														_o2[1] =  swap_p ? captures[2] : captures[4];
														gimple_match_op tem_op (res_op->cond.any_else (), POINTER_DIFF_EXPR, ssizetype, _o2[0], _o2[1]);
														tem_op.resimplify (lseq, valueize);
														_r2 = maybe_push_res_to_seq (&tem_op, lseq);
														if (!_r2) goto next_after_fail2059;
														_o1[0] = _r2;
													      }
													      if (sizetype != TREE_TYPE (_o1[0])
													          && !useless_type_conversion_p (sizetype, TREE_TYPE (_o1[0])))
														{
														  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, sizetype, _o1[0]);
														  tem_op.resimplify (lseq, valueize);
														  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
														  if (!_r1) goto next_after_fail2059;
													        }
													      else
													        _r1 = _o1[0];
													      res_op->ops[0] = _r1;
													    }
													    res_op->ops[1] =  rhs_tree;
													    res_op->resimplify (lseq, valueize);
													    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1070, __FILE__, __LINE__, true);
													    return true;
													  }
next_after_fail2059:;
													}
												  }
												}
											  }
											}
										    }
										  }
									      }
									    break;
									  }
									default:;
									}
							          }
							        break;
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case GE_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  switch (TREE_CODE (_p1))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _p1))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case GE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q50 == _q20 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q20, 0) && types_match (_q50, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q51 };
					if (gimple_simplify_176 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, GE_EXPR, MIN_EXPR))
					  return true;
				      }
				    }
				  if ((_q51 == _q21 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q21, 0) && types_match (_q51, _q21)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q50 };
					if (gimple_simplify_176 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, LE_EXPR, MAX_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      case LE_EXPR:
			        {
				  tree _q50 = gimple_assign_rhs1 (_a2);
				  _q50 = do_valueize (valueize, _q50);
				  tree _q51 = gimple_assign_rhs2 (_a2);
				  _q51 = do_valueize (valueize, _q51);
				  if ((_q51 == _q20 && ! TREE_SIDE_EFFECTS (_q51)) || (operand_equal_p (_q51, _q20, 0) && types_match (_q51, _q20)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q20, _q21, _p1, _q50 };
					if (gimple_simplify_176 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, GE_EXPR, MIN_EXPR))
					  return true;
				      }
				    }
				  if ((_q50 == _q21 && ! TREE_SIDE_EFFECTS (_q50)) || (operand_equal_p (_q50, _q21, 0) && types_match (_q50, _q21)))
				    {
				      {
					tree captures[5] ATTRIBUTE_UNUSED = { _p0, _q21, _q20, _p1, _q51 };
					if (gimple_simplify_176 (res_op, seq, valueize, type, captures, BIT_IOR_EXPR, LE_EXPR, MAX_EXPR))
					  return true;
				      }
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
		  switch (TREE_CODE (_q21))
		    {
		    case SSA_NAME:
		      if (gimple *_d2 = get_def (valueize, _q21))
		        {
			  if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			    switch (gimple_assign_rhs_code (_a2))
			      {
			      case POINTER_PLUS_EXPR:
			        {
				  tree _q40 = gimple_assign_rhs1 (_a2);
				  _q40 = do_valueize (valueize, _q40);
				  tree _q41 = gimple_assign_rhs2 (_a2);
				  _q41 = do_valueize (valueize, _q41);
				  switch (TREE_CODE (_q41))
				    {
				    case INTEGER_CST:
				      {
					switch (TREE_CODE (_p1))
					  {
					  case SSA_NAME:
					    if (gimple *_d3 = get_def (valueize, _p1))
					      {
						if (gassign *_a3 = dyn_cast <gassign *> (_d3))
						  switch (gimple_assign_rhs_code (_a3))
						    {
						    case LE_EXPR:
						      {
							tree _q70 = gimple_assign_rhs1 (_a3);
							_q70 = do_valueize (valueize, _q70);
							tree _q71 = gimple_assign_rhs2 (_a3);
							_q71 = do_valueize (valueize, _q71);
							switch (TREE_CODE (_q70))
							  {
							  case SSA_NAME:
							    if (gimple *_d4 = get_def (valueize, _q70))
							      {
								if (gassign *_a4 = dyn_cast <gassign *> (_d4))
								  switch (gimple_assign_rhs_code (_a4))
								    {
								    case POINTER_PLUS_EXPR:
								      {
									tree _q80 = gimple_assign_rhs1 (_a4);
									_q80 = do_valueize (valueize, _q80);
									tree _q81 = gimple_assign_rhs2 (_a4);
									_q81 = do_valueize (valueize, _q81);
									if ((_q80 == _q20 && ! TREE_SIDE_EFFECTS (_q80)) || (operand_equal_p (_q80, _q20, 0) && types_match (_q80, _q20)))
									  {
									    if ((_q81 == _q41 && ! TREE_SIDE_EFFECTS (_q81)) || (operand_equal_p (_q81, _q41, 0) && types_match (_q81, _q41)))
									      {
										if ((_q71 == _q40 && ! TREE_SIDE_EFFECTS (_q71)) || (operand_equal_p (_q71, _q40, 0) && types_match (_q71, _q40)))
										  {
										    {
										      tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q21, _q40, _q41, _q20, _p1, _q70 };
										      const enum tree_code cmp = LE_EXPR;
										      if (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (captures[2]))
 && TYPE_OVERFLOW_WRAPS (sizetype)
 && TYPE_PRECISION (TREE_TYPE (captures[2])) == TYPE_PRECISION (sizetype)
)
											{
											  {
 offset_int off = wi::to_offset (captures[3]) - (cmp == LE_EXPR ? 1 : 0);
 offset_int rhs = off * 2;
											      if (wi::min_precision (rhs, UNSIGNED) <= TYPE_PRECISION (sizetype)
)
												{
												  {
 bool swap_p = tree_swap_operands_p (captures[2], captures[4]);
 tree rhs_tree = wide_int_to_tree (sizetype, rhs);
												      if (cmp == LT_EXPR
)
													{
													  gimple_seq *lseq = seq;
													  if (lseq
													      && (!single_use (captures[0])
													          || !single_use (captures[5])))
													    lseq = NULL;
													  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2060;
													  {
													    res_op->set_op (GT_EXPR, type, 2);
													    {
													      tree _o1[1], _r1;
													      {
														tree _o2[2], _r2;
														_o2[0] =  swap_p ? captures[6] : captures[1];
														_o2[1] =  swap_p ? captures[2] : captures[4];
														gimple_match_op tem_op (res_op->cond.any_else (), POINTER_DIFF_EXPR, ssizetype, _o2[0], _o2[1]);
														tem_op.resimplify (lseq, valueize);
														_r2 = maybe_push_res_to_seq (&tem_op, lseq);
														if (!_r2) goto next_after_fail2060;
														_o1[0] = _r2;
													      }
													      if (sizetype != TREE_TYPE (_o1[0])
													          && !useless_type_conversion_p (sizetype, TREE_TYPE (_o1[0])))
														{
														  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, sizetype, _o1[0]);
														  tem_op.resimplify (lseq, valueize);
														  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
														  if (!_r1) goto next_after_fail2060;
													        }
													      else
													        _r1 = _o1[0];
													      res_op->ops[0] = _r1;
													    }
													    res_op->ops[1] =  rhs_tree;
													    res_op->resimplify (lseq, valueize);
													    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1069, __FILE__, __LINE__, true);
													    return true;
													  }
next_after_fail2060:;
													}
												      else
													{
													  gimple_seq *lseq = seq;
													  if (lseq
													      && (!single_use (captures[0])
													          || !single_use (captures[5])))
													    lseq = NULL;
													  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2061;
													  {
													    res_op->set_op (GT_EXPR, type, 2);
													    {
													      tree _o1[1], _r1;
													      {
														tree _o2[2], _r2;
														{
														  tree _o3[2], _r3;
														  _o3[0] =  swap_p ? captures[4] : captures[2];
														  _o3[1] =  wide_int_to_tree (sizetype, off);
														  gimple_match_op tem_op (res_op->cond.any_else (), POINTER_PLUS_EXPR, TREE_TYPE (_o3[0]), _o3[0], _o3[1]);
														  tem_op.resimplify (lseq, valueize);
														  _r3 = maybe_push_res_to_seq (&tem_op, lseq);
														  if (!_r3) goto next_after_fail2061;
														  _o2[0] = _r3;
														}
														_o2[1] =  swap_p ? captures[2] : captures[4];
														gimple_match_op tem_op (res_op->cond.any_else (), POINTER_DIFF_EXPR, ssizetype, _o2[0], _o2[1]);
														tem_op.resimplify (lseq, valueize);
														_r2 = maybe_push_res_to_seq (&tem_op, lseq);
														if (!_r2) goto next_after_fail2061;
														_o1[0] = _r2;
													      }
													      if (sizetype != TREE_TYPE (_o1[0])
													          && !useless_type_conversion_p (sizetype, TREE_TYPE (_o1[0])))
														{
														  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, sizetype, _o1[0]);
														  tem_op.resimplify (lseq, valueize);
														  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
														  if (!_r1) goto next_after_fail2061;
													        }
													      else
													        _r1 = _o1[0];
													      res_op->ops[0] = _r1;
													    }
													    res_op->ops[1] =  rhs_tree;
													    res_op->resimplify (lseq, valueize);
													    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1070, __FILE__, __LINE__, true);
													    return true;
													  }
next_after_fail2061:;
													}
												  }
												}
											  }
											}
										    }
										  }
									      }
									  }
								        break;
								      }
								    default:;
								    }
							      }
							    break;
						          default:;
						          }
						        break;
						      }
						    case GE_EXPR:
						      {
							tree _q70 = gimple_assign_rhs1 (_a3);
							_q70 = do_valueize (valueize, _q70);
							tree _q71 = gimple_assign_rhs2 (_a3);
							_q71 = do_valueize (valueize, _q71);
							if ((_q70 == _q40 && ! TREE_SIDE_EFFECTS (_q70)) || (operand_equal_p (_q70, _q40, 0) && types_match (_q70, _q40)))
							  {
							    switch (TREE_CODE (_q71))
							      {
							      case SSA_NAME:
							        if (gimple *_d4 = get_def (valueize, _q71))
							          {
								    if (gassign *_a4 = dyn_cast <gassign *> (_d4))
								      switch (gimple_assign_rhs_code (_a4))
									{
									case POINTER_PLUS_EXPR:
									  {
									    tree _q90 = gimple_assign_rhs1 (_a4);
									    _q90 = do_valueize (valueize, _q90);
									    tree _q91 = gimple_assign_rhs2 (_a4);
									    _q91 = do_valueize (valueize, _q91);
									    if ((_q90 == _q20 && ! TREE_SIDE_EFFECTS (_q90)) || (operand_equal_p (_q90, _q20, 0) && types_match (_q90, _q20)))
									      {
										if ((_q91 == _q41 && ! TREE_SIDE_EFFECTS (_q91)) || (operand_equal_p (_q91, _q41, 0) && types_match (_q91, _q41)))
										  {
										    {
										      tree captures[7] ATTRIBUTE_UNUSED = { _p0, _q21, _q40, _q41, _q20, _p1, _q71 };
										      const enum tree_code cmp = LE_EXPR;
										      if (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (captures[2]))
 && TYPE_OVERFLOW_WRAPS (sizetype)
 && TYPE_PRECISION (TREE_TYPE (captures[2])) == TYPE_PRECISION (sizetype)
)
											{
											  {
 offset_int off = wi::to_offset (captures[3]) - (cmp == LE_EXPR ? 1 : 0);
 offset_int rhs = off * 2;
											      if (wi::min_precision (rhs, UNSIGNED) <= TYPE_PRECISION (sizetype)
)
												{
												  {
 bool swap_p = tree_swap_operands_p (captures[2], captures[4]);
 tree rhs_tree = wide_int_to_tree (sizetype, rhs);
												      if (cmp == LT_EXPR
)
													{
													  gimple_seq *lseq = seq;
													  if (lseq
													      && (!single_use (captures[0])
													          || !single_use (captures[5])))
													    lseq = NULL;
													  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2062;
													  {
													    res_op->set_op (GT_EXPR, type, 2);
													    {
													      tree _o1[1], _r1;
													      {
														tree _o2[2], _r2;
														_o2[0] =  swap_p ? captures[6] : captures[1];
														_o2[1] =  swap_p ? captures[2] : captures[4];
														gimple_match_op tem_op (res_op->cond.any_else (), POINTER_DIFF_EXPR, ssizetype, _o2[0], _o2[1]);
														tem_op.resimplify (lseq, valueize);
														_r2 = maybe_push_res_to_seq (&tem_op, lseq);
														if (!_r2) goto next_after_fail2062;
														_o1[0] = _r2;
													      }
													      if (sizetype != TREE_TYPE (_o1[0])
													          && !useless_type_conversion_p (sizetype, TREE_TYPE (_o1[0])))
														{
														  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, sizetype, _o1[0]);
														  tem_op.resimplify (lseq, valueize);
														  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
														  if (!_r1) goto next_after_fail2062;
													        }
													      else
													        _r1 = _o1[0];
													      res_op->ops[0] = _r1;
													    }
													    res_op->ops[1] =  rhs_tree;
													    res_op->resimplify (lseq, valueize);
													    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1069, __FILE__, __LINE__, true);
													    return true;
													  }
next_after_fail2062:;
													}
												      else
													{
													  gimple_seq *lseq = seq;
													  if (lseq
													      && (!single_use (captures[0])
													          || !single_use (captures[5])))
													    lseq = NULL;
													  if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2063;
													  {
													    res_op->set_op (GT_EXPR, type, 2);
													    {
													      tree _o1[1], _r1;
													      {
														tree _o2[2], _r2;
														{
														  tree _o3[2], _r3;
														  _o3[0] =  swap_p ? captures[4] : captures[2];
														  _o3[1] =  wide_int_to_tree (sizetype, off);
														  gimple_match_op tem_op (res_op->cond.any_else (), POINTER_PLUS_EXPR, TREE_TYPE (_o3[0]), _o3[0], _o3[1]);
														  tem_op.resimplify (lseq, valueize);
														  _r3 = maybe_push_res_to_seq (&tem_op, lseq);
														  if (!_r3) goto next_after_fail2063;
														  _o2[0] = _r3;
														}
														_o2[1] =  swap_p ? captures[2] : captures[4];
														gimple_match_op tem_op (res_op->cond.any_else (), POINTER_DIFF_EXPR, ssizetype, _o2[0], _o2[1]);
														tem_op.resimplify (lseq, valueize);
														_r2 = maybe_push_res_to_seq (&tem_op, lseq);
														if (!_r2) goto next_after_fail2063;
														_o1[0] = _r2;
													      }
													      if (sizetype != TREE_TYPE (_o1[0])
													          && !useless_type_conversion_p (sizetype, TREE_TYPE (_o1[0])))
														{
														  gimple_match_op tem_op (res_op->cond.any_else (), NOP_EXPR, sizetype, _o1[0]);
														  tem_op.resimplify (lseq, valueize);
														  _r1 = maybe_push_res_to_seq (&tem_op, lseq);
														  if (!_r1) goto next_after_fail2063;
													        }
													      else
													        _r1 = _o1[0];
													      res_op->ops[0] = _r1;
													    }
													    res_op->ops[1] =  rhs_tree;
													    res_op->resimplify (lseq, valueize);
													    if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1070, __FILE__, __LINE__, true);
													    return true;
													  }
next_after_fail2063:;
													}
												  }
												}
											  }
											}
										    }
										  }
									      }
									    break;
									  }
									default:;
									}
							          }
							        break;
							      default:;
							      }
							  }
						        break;
						      }
						    default:;
						    }
					      }
					    break;
				          default:;
				          }
				        break;
				      }
				    default:;
				    }
			          break;
			        }
			      default:;
			      }
		        }
		      break;
		    default:;
		    }
	          break;
	        }
	      case VEC_PERM_EXPR:
	        {
		  tree _q20 = gimple_assign_rhs1 (_a1);
		  _q20 = do_valueize (valueize, _q20);
		  tree _q21 = gimple_assign_rhs2 (_a1);
		  _q21 = do_valueize (valueize, _q21);
		  tree _q22 = gimple_assign_rhs3 (_a1);
		  _q22 = do_valueize (valueize, _q22);
		  if ((_q21 == _q20 && ! TREE_SIDE_EFFECTS (_q21)) || (operand_equal_p (_q21, _q20, 0) && types_match (_q21, _q20)))
		    {
		      switch (TREE_CODE (_p1))
		        {
			case SSA_NAME:
			  if (gimple *_d2 = get_def (valueize, _p1))
			    {
			      if (gassign *_a2 = dyn_cast <gassign *> (_d2))
			        switch (gimple_assign_rhs_code (_a2))
				  {
				  case VEC_PERM_EXPR:
				    {
				      tree _q60 = gimple_assign_rhs1 (_a2);
				      _q60 = do_valueize (valueize, _q60);
				      tree _q61 = gimple_assign_rhs2 (_a2);
				      _q61 = do_valueize (valueize, _q61);
				      tree _q62 = gimple_assign_rhs3 (_a2);
				      _q62 = do_valueize (valueize, _q62);
				      if ((_q61 == _q60 && ! TREE_SIDE_EFFECTS (_q61)) || (operand_equal_p (_q61, _q60, 0) && types_match (_q61, _q60)))
					{
					  if ((_q62 == _q22 && ! TREE_SIDE_EFFECTS (_q62)) || (operand_equal_p (_q62, _q22, 0) && types_match (_q62, _q22)))
					    {
					      {
						tree captures[4] ATTRIBUTE_UNUSED = { _q20, _q22, _q60 };
						if (VECTOR_INTEGER_TYPE_P (type)
)
						  {
						    gimple_seq *lseq = seq;
						    if (UNLIKELY (!dbg_cnt (match))) goto next_after_fail2064;
						    {
						      res_op->set_op (VEC_PERM_EXPR, type, 3);
						      {
							tree _o1[2], _r1;
							_o1[0] = captures[0];
							_o1[1] = captures[2];
							gimple_match_op tem_op (res_op->cond.any_else (), BIT_IOR_EXPR, TREE_TYPE (_o1[0]), _o1[0], _o1[1]);
							tem_op.resimplify (lseq, valueize);
							_r1 = maybe_push_res_to_seq (&tem_op, lseq);
							if (!_r1) goto next_after_fail2064;
							captures[3] = _r1;
						      }
						      res_op->ops[0] = captures[3];
						      res_op->ops[1] = captures[3];
						      res_op->ops[2] = captures[1];
						      res_op->resimplify (lseq, valueize);
						      if (UNLIKELY (debug_dump)) gimple_dump_logs ("match.pd", 1024, __FILE__, __LINE__, true);
						      return true;
						    }
next_after_fail2064:;
						  }
					      }
					    }
				        }
				      break;
				    }
				  default:;
				  }
			    }
			  break;
		        default:;
		        }
		    }
	          break;
	        }
	      default:;
	      }
        }
      break;
    default:;
    }
  return false;
}
#pragma GCC diagnostic pop
